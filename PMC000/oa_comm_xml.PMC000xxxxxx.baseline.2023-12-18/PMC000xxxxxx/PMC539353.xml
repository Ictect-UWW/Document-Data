<!DOCTYPE article PUBLIC "-//NLM//DTD Journal Archiving and Interchange DTD v2.3 20070202//EN" "archivearticle.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink" article-type="product-review"><?properties open_access?><front><journal-meta><journal-id journal-id-type="nlm-ta">BMC Bioinformatics</journal-id><journal-title>BMC Bioinformatics</journal-title><issn pub-type="epub">1471-2105</issn><publisher><publisher-name>BioMed Central</publisher-name><publisher-loc>London</publisher-loc></publisher></journal-meta><article-meta><article-id pub-id-type="pmid">15588317</article-id><article-id pub-id-type="pmc">PMC539353</article-id><article-id pub-id-type="publisher-id">1471-2105-5-195</article-id><article-id pub-id-type="doi">10.1186/1471-2105-5-195</article-id><article-categories><subj-group subj-group-type="heading"><subject>Software</subject></subj-group></article-categories><title-group><article-title>GECKO: a complete large-scale gene expression analysis platform</article-title></title-group><contrib-group><contrib id="A1" corresp="yes" contrib-type="author"><name><surname>Theilhaber</surname><given-names>Joachim</given-names></name><xref ref-type="aff" rid="I1">1</xref><email>joachim.theilhaber@aventis.com</email></contrib><contrib id="A2" contrib-type="author"><name><surname>Ulyanov</surname><given-names>Anatoly</given-names></name><xref ref-type="aff" rid="I1">1</xref><email>anatoly.ulyanov@aventis.com</email></contrib><contrib id="A3" contrib-type="author"><name><surname>Malanthara</surname><given-names>Anish</given-names></name><xref ref-type="aff" rid="I2">2</xref><email>anish.malanthara@aventis.com</email></contrib><contrib id="A4" contrib-type="author"><name><surname>Cole</surname><given-names>Jack</given-names></name><xref ref-type="aff" rid="I3">3</xref><email>jack@fastgun.com</email></contrib><contrib id="A5" contrib-type="author"><name><surname>Xu</surname><given-names>Dapeng</given-names></name><xref ref-type="aff" rid="I1">1</xref><email>dapeng.xu@aventis.com</email></contrib><contrib id="A6" contrib-type="author"><name><surname>Nahf</surname><given-names>Robert</given-names></name><xref ref-type="aff" rid="I4">4</xref><email>robert.nahf@aventis.com</email></contrib><contrib id="A7" contrib-type="author"><name><surname>Heuer</surname><given-names>Michael</given-names></name><xref ref-type="aff" rid="I5">5</xref><email>heuer@ccgb.umn.edu</email></contrib><contrib id="A8" contrib-type="author"><name><surname>Brockel</surname><given-names>Christoph</given-names></name><xref ref-type="aff" rid="I1">1</xref><email>christoph.brockel@aventis.com</email></contrib><contrib id="A9" contrib-type="author"><name><surname>Bushnell</surname><given-names>Steven</given-names></name><xref ref-type="aff" rid="I1">1</xref><email>steven.bushnell@aventis.com</email></contrib></contrib-group><aff id="I1"><label>1</label>Cambridge Genomics Center, Sanofi-Aventis, 26 Landsdowne Street, Cambridge, MA 02139, USA</aff><aff id="I2"><label>2</label>Sanofi-Aventis, Genomics and Scientific Computation, Route 202&#x02013;206, Bridgewater, NJ 08807, USA</aff><aff id="I3"><label>3</label>Fast Gun Software, Inc., 180 Myrtle St., Wrentham MA, 02093, USA</aff><aff id="I4"><label>4</label>Sanofi-Aventis Tucson Selectide, 1580 E. Hanley Blvd., Tucson, AZ 85737, USA</aff><aff id="I5"><label>5</label>Center for Computational Genomics and Bioinformatics, University of Minnesota, 426 Church Street SE, Minneapolis, MN 55455, USA</aff><pub-date pub-type="collection"><year>2004</year></pub-date><pub-date pub-type="epub"><day>10</day><month>12</month><year>2004</year></pub-date><volume>5</volume><fpage>195</fpage><lpage>195</lpage><ext-link ext-link-type="uri" xlink:href="http://www.biomedcentral.com/1471-2105/5/195"/><history><date date-type="received"><day>16</day><month>7</month><year>2004</year></date><date date-type="accepted"><day>10</day><month>12</month><year>2004</year></date></history><copyright-statement>Copyright &#x000a9; 2004 Theilhaber et al; licensee BioMed Central Ltd.</copyright-statement><license license-type="open-access" xlink:href="http://creativecommons.org/licenses/by/2.0"><p>This is an Open Access article distributed under the terms of the Creative Commons Attribution License (<ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/licenses/by/2.0"/>), which permits unrestricted use, distribution, and reproduction in any medium, provided the original work is properly cited.</p></license><abstract><sec><title>Background</title><p>Gecko (Gene Expression: Computation and Knowledge Organization) is a complete, high-capacity centralized gene expression analysis system, developed in response to the needs of a distributed user community.</p></sec><sec><title>Results</title><p>Based on a client-server architecture, with a centralized repository of typically many tens of thousands of Affymetrix scans, Gecko includes automatic processing pipelines for uploading data from remote sites, a data base, a computational engine implementing ~ 50 different analysis tools, and a client application. Among available analysis tools are clustering methods, principal component analysis, supervised classification including feature selection and cross-validation, multi-factorial ANOVA, statistical contrast calculations, and various post-processing tools for extracting data at given error rates or significance levels. On account of its open architecture, Gecko also allows for the integration of new algorithms. The Gecko framework is very general: non-Affymetrix and non-gene expression data can be analyzed as well. A unique feature of the Gecko architecture is the concept of the Analysis Tree (actually, a directed acyclic graph), in which all successive results in ongoing analyses are saved. This approach has proven invaluable in allowing a large (~ 100 users) and distributed community to share results, and to repeatedly return over a span of years to older and potentially very complex analyses of gene expression data.</p></sec><sec><title>Conclusions</title><p>The Gecko system is being made publicly available as free software <ext-link ext-link-type="uri" xlink:href="http://sourceforge.net/projects/geckoe"/>. In totality or in parts, the Gecko framework should prove useful to users and system developers with a broad range of analysis needs.</p></sec></abstract></article-meta></front><body><sec><title>Background</title><p>In recent years, in response to the needs of our scientific community we have developed a comprehensive, company-wide gene expression data analysis platform based on a centralized client-server architecture (Figure <xref ref-type="fig" rid="F1">1</xref>). This platform, named Gecko (Gene Expression: Computation and Knowledge Organization) addresses the problems of analyzing large volumes of continuously generated data (thousands of Affymetrix scans per year), provides a broad spectrum of analysis tools, and creates a single, collaborative view of data for a large, decentralized community of users.</p><p>Three organizing concepts have guided the construction of Gecko. The first is the use of the <italic>Analysis Tree </italic>(actually, a directed acyclic graph) which provides a complete historical and hierarchical display of all analyses conducted to date by the users. In particular, in support of this concept, Gecko permanently stores the results of <italic>all </italic>analyses performed. A second organizing concept is that of the <italic>agglomeration </italic>syntax, an "Erector Set" of operations for flexibly creating, combining and subsetting data matrices. The third organizing concept is the pervasive use of <italic>experimental designs</italic>, which are associated with each data matrix, and which enable the application of a wide range of statistical and pattern recognition tools.</p><p>It is the aim of this paper to give an idea of the user's view of Gecko and how one conducts analyses using the system, as well as to provide a software-level overview of the Gecko system architecture. Indeed, we believe that Gecko presents a number of innovative features well-worth presenting, and in connection with this publication, we are making available a public release of the Gecko software[<xref ref-type="bibr" rid="B1">1</xref>].</p><p>In what follows, we first go "behind the scenes", and present the system architecture in some detail, including overall data organization, database structure, computational engines, statistical tools and models, and finally utility programs. We then present a focused discussion of a specific analysis example, so as to give the reader a more immediate impression of the Gecko system.</p></sec><sec><title>Implementation</title><sec><title>The Gecko architecture</title><p>Gecko is based on a client-server architecture, with a global structure shown in Figure <xref ref-type="fig" rid="F2">2</xref>. The Gecko users have remote access to the system through a client application, currently designed for the Windows operating system and running on any desktop or laptop computer (a prototype Java-based client has also been developed, but is not yet in production use). Overall, the Gecko client is a "thin" client, focused on handling user requests and server responses, with most of the actual computation and data organizational tasks handled by the Gecko server. As indicated in the figure, the client not only manages interaction with the Gecko server, but also allows for local connection to applications such as Microsoft Excel or the Spotfire visualization tools[<xref ref-type="bibr" rid="B2">2</xref>], which can be invoked for additional data analysis after the data has been automatically streamed to these applications from the client.</p><p>The exchanges between the client and the server occur through HTTP requests, which transit through a web server running on the server platform. A central aspect of the Gecko client is that it contains an embedded Internet Explorer browser, a feature which greatly simplifies the task of building user interfaces. Thus, forms for submitting parameters to the server are typically built in HTML dynamically generated by server-side Perl CGI or Java servlet programs, and displayed in the embedded browser.</p><p>The Gecko server itself runs on a UNIX platform, and consists of the four main components indicated in Figure <xref ref-type="fig" rid="F2">2</xref>: a database, that predominantly contains non-numerical, organizational data; a set of computational engines, written in C++, Java, or Perl; a set of request-handler programs (Perl CGI and Java servlet programs) that enable the client-server interaction; and a flat file repository, that contain files for both raw numerical expression data (scans) as well as for all derived data types (analyses).</p></sec><sec><title>The Gecko database</title><p>The set of tables in the Gecko database can be partitioned into three main groups, which we call the "Scan", "Chip" and "Analysis" groups in accordance to their functional roles.</p><p>The Scan group of tables stores attributes of the individual scans of microarray data entered into the system. These attributes include a unique scan identifier (the scan name), as well as many parameters (project name, experiment name, sample name, compound(s) applied and treatment duration, hybridization protocols, etc), which record the nature of the biological sample used and how it was processed, and place the scan in a tree with experimental and biological context.</p><p>While the Scan group of tables captures many items in common with the so-called MIAME (Minimum Information about a Microarray Experiment) annotation standards[<xref ref-type="bibr" rid="B3">3</xref>], it should be emphasized that its design antecedates the creation of the MIAME standards, and is neither as comprehensive, nor fully consistent with these standards. In current installations of Gecko, an independent laboratory information management system (LIMS), upstream of the Gecko analysis platform itself, provides considerably more detailed information about the samples. With our emphasis on Gecko as an analysis platform and not as a LIMS, we have so far deferred the question of how to best federate (under a MIAME-compliant heading) all of the experimental annotation information.</p><p>The Scan group of tables also records numerical data in the form of summary statistics for each scan, including several measures of chip brightness and measures of noise and saturation. However, the bulk numerical data for each scan is stored as a file in the flat file repository, with only a file pointer stored in the database.</p><p>The Chip group of tables stores the attributes of the Affymetrix chip designs currently known to the system. These include the names of the chip designs used, and for each chip design, all the qualifiers pertaining to it. The tables also store sequence annotation information on a qualifier-by-qualifier basis, including a short description line, as well as a URL that provides a link to more general annotation information for each qualifier. The annotation information is generated externally to the Gecko system, with periodic updates via flat files which can be automatically uploaded.</p><p>The Analysis group of tables is central to all the analysis functions available in Gecko. Any analysis object generated in the system has a set of attributes which are saved under five categories of information: 1) its parent/child relations, 2) an internal pointer to the machine-generated file which contains the bulk numerical data, 3) the parameters for the operation which created the analysis object, 4) general parameters (name of the analysis object, data type, number of rows and columns in the data matrix, etc), and 5) experimental design parameters. Knowledge of the experimental design [[<xref ref-type="bibr" rid="B4">4</xref>], p.93] [[<xref ref-type="bibr" rid="B5">5</xref>], p.214] underlying a dataset is essential to many types of analyses (e.g. ANOVA, contrast calculations [[<xref ref-type="bibr" rid="B5">5</xref>], p.214], supervised classification). In Gecko, the experimental design parameters (factors and levels) of each data matrix are thus stored in the database, and can be accessed or modified by the user at any time. They are automatically retrieved and used whenever a relevant analysis is invoked.</p><p>Finally we note that no access control is imposed in Gecko: any user can access any collection of scans, or visit any of the existing analyses created by other users. While this very open architecture has greatly fostered collaboration, it is conceivable that access control might eventually be required. To that end, limited architectural and programming modifications are needed. Modifications might consist of expansion of the current user tables, to include group definition and password fields, and addition of straightforward programming logic in both client and server, to mask access to data which is out of the scope of a given user.</p></sec><sec><title>Computational engines</title><p>Gecko incorporates a spectrum of computational tools, which enter into 5 major categories: 1) agglomeration, 2) statistical analysis, 3) clustering, 4) supervised classification and 5) transformation methods</p><sec><title>Agglomeration tools</title><p>Data for a given experiment is typically distributed over many scans, numbering in some cases hundreds or even thousands. The ability to easily construct or modify the relevant data matrix, with appropriate normalization of scans with respect to each other, is thus critical to all downstream analysis, and this need is addressed by a suite of tools under the generic heading of <italic>agglomeration </italic>(Figure <xref ref-type="fig" rid="F3">3</xref>). For instance, the Gecko <italic>Concatenate </italic>tool enables assembly of large sets of scans (Figure <xref ref-type="fig" rid="F3">3a</xref>) through the submission of a simple spreadsheet containing the list of scans in an ordered format. The spreadsheet data entry optionally includes specification of the experimental design (factors and levels), which can also be modified or created de novo at any later time.</p><p>Once created, a data matrix then becomes accessible as a single object, to be used in higher-level agglomeration operations. For instance, <italic>Cat Ratio </italic>enables one to take ratios of two complete data matrices, on a element-by-element basis (Figure <xref ref-type="fig" rid="F3">3b</xref>). To achieve this, the user needs only to specify the two relevant datasets by selecting the corresponding nodes in the Analysis Tree. All subsequent aspects of the computation (matching numerators and denominators pairwise, actual ratio calculations, on-the-fly normalizations, etc) are achieved automatically, and the resulting data matrix, now containing ratios, is registered in Gecko as a child of the two input datasets.</p><p>The suite of agglomeration operations also includes concatenating data matrices to each other, merging replicates within an agglomerated dataset, subsetting on rows or columns, or performing join operations (Figs. <xref ref-type="fig" rid="F3">3c,3d,3e</xref>), altogether approximating an "Erector Set" for building data matrices out of smaller or larger blocks. These operations are routinely performed on large datasets (currently up to ~ 50000 rows &#x000d7; 500 columns). To indicate processing times for these operations, we note that on a 400 MHz Sun Enterprise server, concatenation requires about 2 second per scan, while the more complex ratio calculations require about 10 seconds per scan pair. Thus concatenating, say, 1000 scans, will require about 30 minutes of processing time, while computing the ratio of 1000 scans to another 1000 scans simultaneously, will require about 3 hours of processing time.</p><p>We finally note that users can bypass agglomeration of scan data altogether, and directly upload arbitrary data matrices into the system (see <italic>Data sources </italic>section below). This feature makes Gecko into a general analysis tool, for multivariate analysis in contexts quite different from that of gene expression.</p></sec><sec><title>Statistical analysis tools</title><p>The suite of statistical analysis tools includes application of both parametric and non-parametric tests to the agglomerated data matrices, on a qualifier-by-qualifier basis and using the associated experimental designs. Included are two-class comparison tests (Student t-tests, SAM[<xref ref-type="bibr" rid="B6">6</xref>], comparison of variances, Mann-Whitney [[<xref ref-type="bibr" rid="B5">5</xref>], p.265]), as well as multiple-class and multiple-factors tests (one and two-way ANOVA) and the ability to perform contrast calculations [[<xref ref-type="bibr" rid="B5">5</xref>], p. 241] of several different types.</p><p>The parametric tests are available with a "renormalization" option which corrects P-values in accordance to an intra-class correlation (icc) model (JT, manuscript to be submitted for publication). For instance, when applied to a one-way ANOVA across several classes, the icc model folds part of the class-dependent effects into the null hypothesis, by mathematically assuming that they have a random component already explained by the null hypothesis, with variance proportional to the variance of the residuals within each class. The proportionality constant is then computed on-the-fly, by requiring that the resulting distribution of the <italic>F </italic>statistic over all genes is non-significant up to its median value. This renormalization suppresses weak or biologically unremarkable class-dependent effects, while preserving significant data in the upper tail of the observed <italic>F </italic>distribution. It typically avoids the conundrum of "all genes are significantly regulated" which very often occurs as the number of samples becomes large.</p><p>Biased-variance versions of the parametric tests (where an additional, fixed variance term is introduced in the denominators of the <italic>t </italic>or <italic>F </italic>statistics so as to reduce noise) are also implemented, in a form where the icc model is combined with semi-parametric resampling to estimate accurate P-values.</p><p>Alongside these statistical location tests, which depend on samples being assigned to different classes, one can compute class-independent statistics, such as &#x003c7;<sup>2</sup>, grand means or standard deviations on a qualifier-by-qualifier basis across all samples. These tests are frequently useful in ranking expression profiles on the basis of one or several of these test statistics, typically for subsequent filtering-out of noisy profiles, or for overall statistical assessment of the dataset.</p><p>Tests incorporating the calculation of the Pearson correlation coefficient are also implemented. These tests enable one to perform "nearest-neighbor" searches for the expression profiles most like those of single or multiple query profiles. As with the set of location tests, these correlation-based tests include options for renormalization, based on the icc model, and for biased-variance terms in the denominators of the equations for correlation coefficients.</p><p>As an indication of typical execution times for statistical tests, we note that on a 400 MHz Sun Enterprise server, a two-way ANOVA with associated contrasts, applied to a ~ 22000 rows &#x000d7; 100 columns data matrix, requires about 120 seconds of processing time.</p><p>In all cases, tests results are saved in the Gecko Analysis Tree and can be revisited a posteriori by use of the generic <italic>Get Stats </italic>tool, which internally computes receiver operating characteristics (ROCs) [[<xref ref-type="bibr" rid="B7">7</xref>], p. 48], generates graphics for the corresponding ROC plots, and allows for selection of qualifiers based on P-value or on false-discovery rate criteria[<xref ref-type="bibr" rid="B8">8</xref>].</p></sec><sec><title>Clustering and supervised classification tools</title><p>The types of clustering tools implemented in Gecko include self-organized maps (SOM)[<xref ref-type="bibr" rid="B9">9</xref>], average linkage hierarchical clustering [[<xref ref-type="bibr" rid="B10">10</xref>], p. 318], principal component analysis (PCA) [[<xref ref-type="bibr" rid="B11">11</xref>], p. 23], multidimensional scaling (MDS) [[<xref ref-type="bibr" rid="B11">11</xref>], p. 107] and the ability to build and display correlation or distance matrices. Supervised classification tools include a gene expression <italic>k</italic>-nearest-neighbor classifier(GENNC)[<xref ref-type="bibr" rid="B12">12</xref>], in conjunction with fully self-consistent feature selection, based on a number of cross-validation methods (leave-one-out, leave-one-group-out, v-fold) [[<xref ref-type="bibr" rid="B13">13</xref>], p. 219].</p></sec><sec><title>Transformations</title><p>Data transformations are frequently required in the course of analyses. Among those available in Gecko are point transformations, where each element of the data matrix is independently transformed (log-transformations, flooring of values to the noise standard deviation, and others), as well as more global transformations, including variance stabilization[<xref ref-type="bibr" rid="B14">14</xref>], standardization of rows and/or columns (by mean or median centering followed by division by the corresponding standard deviations) [[<xref ref-type="bibr" rid="B11">11</xref>], p. 8], and wholesale transposition of the data matrix. In Gecko, transformations usually appear as explicit steps in the Analysis Tree, rather than being "rolled into" other operations, such as clustering.</p></sec><sec><title>Adding new analysis methods</title><p>New analysis methods, if already available as executables or applications running from the UNIX command line (for instance, based on C++, Java, R, Matlab, or other languages), can be internally added to the Gecko system by straightforward programming steps. These steps include i) providing for a user interface, generated by server Perl CGI or Java servlet programs, and displayed as HTML in the client Browser window; and ii) constructing a server-based driver program, that will execute the UNIX command, using the parameters communicated by the user interface. We note that while an application programming interface (API) has not been formalized, a Gecko API is already well-approximated, by the existence of a modular set of methods for accessing the database, and for reading and writing to numerical flat files.</p><p>For external analysis using other applications, direct streaming of all internal Gecko types is currently implemented for Spotfire[<xref ref-type="bibr" rid="B2">2</xref>] and Microsoft Excel. For saving data to local disk, generic data export in tab-separated values format is also possible. Furthermore, specially formatted types of data export to disk have also been implemented, in particular for the Cluster and TreeView[<xref ref-type="bibr" rid="B15">15</xref>] clustering and visualization programs. Extending the number of specially formatted export options to other analysis packages (for instance, to create R "data frames" to be used in BioConductor R packages[<xref ref-type="bibr" rid="B16">16</xref>]), should be a straightforward programming task, consisting of adding an appropriate formatting function to the existing Perl/CGI module.</p></sec></sec><sec><title>Data organization in Gecko: the Analysis Tree</title><p>A central concern in the design of Gecko was to enable the user to perform and especially to later recall complex analysis work flows (such as the cell line data analysis, described in detail below). In general, graphs of analyses conducted in Gecko, with nodes corresponding to datasets and edges to operations on these datasets, result in directed acyclic graphs (DAGs). A DAG is unlike a tree, in that each of its nodes can have multiple parents, whereas in a tree each node has a unique parent; for simplicity however, we refer to the DAG generated by Gecko as the Analysis "Tree". Furthermore, in the Gecko client the DAG is actually displayed as a tree: the DAG topology is correctly maintained by replicating, for nodes with multiple parents, the corresponding subgraphs under each of the parent nodes.</p><p>Once generated, the data file corresponding to a node in the Gecko Analysis Tree is permanently stored (unless the node is explicitly deleted by the user at some later time). This approach enables users to return at any time to potentially very large and complex panels of analysis results, without requiring them to regenerate all final and intermediate results on-the-fly, as might be required in an alternative real-time "dataflow" approach (in which only the sequence of operations is permanently stored, and in which data is recomputed every time a new session is started). We have found that the dataflow approach can entail a prohibitive computational cost and waiting time, whenever a large number of analyses are being simultaneously considered, as in the examples of Figure <xref ref-type="fig" rid="F4">4</xref> (described in detail below). This situation is obviously exacerbated by the presence of individual lengthy computations, such as are required for instance for classifier cross-validation.</p><p>The permanent storage of all analysis results might seem an extravagant use of computer resources, but experience shows that it results in reasonable use of server memory over time. For an expression analysis community of roughly 100 scientific users, over a span of 5 years memory use has been limited to about 150 GB (corresponding to the disk space available on a couple of current generation personal computers), reached with slow linear growth over time. Furthermore, should it be absolutely required, implementing a file archival and retrieval system for the oldest analyses would be a straightforward task.</p></sec><sec><title>Noise model</title><p>The Gecko noise model is based on the so-called PFOLD joint noise model and ratio estimation algorithm[<xref ref-type="bibr" rid="B17">17</xref>]. This model includes both additive (background, cross-hybridization) and multiplicative (coefficient-of-variation effects) noise terms, within a Bayesian estimation framework. Expression ratios and related P-values and confidence limits are computed on the basis of a posterior distribution of ratios conditional on measured intensities and noise terms. The rigorous mathematical derivation of the posterior distribution results in a formulation that seamlessly connects high and low signal-to-noise regimes, and allows estimation of ratios even when recorded intensities are zero or negative.</p></sec><sec><title>Data sources</title><p>While currently all scans uploaded into Gecko are generated by Affymetrix technology, in the past the system has also been used with other types of expression data, for instance generated by two-color hybridizations on spotted arrays. This has been possible at low programming cost, because the internal representation of scan data in Gecko is <italic>independent </italic>of microarray technology, with a generalized storage of intensity and noise information for each chip qualifier or microarray spot. Programming modifications needed for a new technology thus primarily occur in the design of the new raw-file parser (automatically invoked on entry by the scan processing pipeline). Note that for the two-color technologies mentioned above, data for each channel is entered as a separate intensity scan. Channel-to-channel ratios between matched scans are then computed downstream by the users, using the <italic>Cat Ratio </italic>Agglomeration tool mentioned above.</p><p>An alternative and very flexible method for data entry into Gecko, which entirely bypasses scan entry, is to directly upload a tabular file through the Gecko client. In particular, this method enables one to upload gene expression data from the many public sources where it is provided only in spreadsheet format. Furthermore, as already stated, it also enables one to use the Gecko analysis tools in contexts unrelated to gene expression.</p></sec><sec><title>Utilities: the Gecko scan processing pipeline</title><p>As Gecko was designed as a centralized resource, but also for service of geographically remote sites (Figure <xref ref-type="fig" rid="F1">1</xref>), it was critical that the Affymetrix scan submission process be made as automatic and foolproof as possible. To that end, a two-step procedure was devised, described as follows.</p><p>First, users register scans through an interface provided in the Gecko client, using an appropriate submission window. This registration step stores the scan attributes in the Gecko database (project name, experiment name, sample name, and so forth), but does not transfer the scan numerical data (intensity values) itself. In the second, independent step, the users send the scan numerical data, in the form of Affymetrix CEL files[<xref ref-type="bibr" rid="B18">18</xref>], to a specific incoming directory on the Gecko server, typically using the file transfer protocol (FTP) utility (Figure <xref ref-type="fig" rid="F1">1</xref>).</p><p>The Gecko scan processing pipeline, run as a periodic "cron" job on the UNIX platform, automatically converts the Affymetrix CEL file data to Affymetrix MAS5[<xref ref-type="bibr" rid="B18">18</xref>] estimated values, using an emulator of the corresponding algorithm, and writes the results in a format specific to the Gecko system, finally setting a "processing pending" flag to off for each processed scan. Error statuses for files which exceptionally fail processing are written into the database and displayed in a client-based processing queue administration window. On a 400 MHz Sun Enterprise server, the processing time per scan is approximately 3 minutes, enabling upload of about 500 scans per 24 hour period.</p><p>The processing pipeline has proven to be very robust, and can be readily modified to accept other sources of gene expression data, as already mentioned above. Thus, it has also been used to process cDNA microarray data[<xref ref-type="bibr" rid="B19">19</xref>] in the past.</p></sec></sec><sec><title>Results</title><sec><title>An analysis example</title><p>As an example of an analysis workflow conducted in Gecko, we describe a study of a cancer cell line treated with a panel of compounds which are inhibitors of cell proliferation. Cultures of the A498 cell line (a cell line derived from kidney carcinoma and part of the NCI60 panel[<xref ref-type="bibr" rid="B20">20</xref>]) were treated with five different dimethyl sulfoxide(DMSO)-dissolved compounds (here named A1, A2, A3, B1 and B2) falling into two distinct classes (DNA replication inhibition or tubulin binding, A and B, respectively) depending on their mechanism of action. Control cell cultures, treated with the DMSO solvent alone, were also generated. Six biological replicates of the cell cultures were generated for each combination of compound and harvest time, with harvests occurring at 6 hours or 24 hours after the start of treatment. After processing of the cell extracts, the resulting cRNA samples were hybridized to HG_U133A Affymetrix chips[<xref ref-type="bibr" rid="B18">18</xref>,<xref ref-type="bibr" rid="B21">21</xref>], resulting in a total of 72 chip scans, which were submitted to the Gecko scan processing pipeline, and uploaded into the system.</p></sec><sec><title>The Gecko client user interface</title><p>Figure <xref ref-type="fig" rid="F4">4</xref> shows the Gecko client as seen by the user. The client user interface consists of a list of menu items (top), with an associated list of icons (shortcuts to menu items, immediately below), under which are three large adjustable window panes, with content as follows.</p><p>The left-hand window pane (Tree window) provides a tree representation of the data objects existing in Gecko; in the figure, it currently displays the Analysis Tree, which provides a full and permanent record of analysis operations and resulting datasets executed so far. This window can also display the Scan Tree, a hierarchical display of all scans in the system, by selection of the corresponding Scan Tree tab (upper left-hand corner).</p><p>The right-hand window pane of the client (the Browser window) contains forms for submitting parameters to the analysis tools, and also displays analysis results. Currently selected is an input form for performing supervised classification of the compound-treated samples, using a <italic>k</italic>-nearest neighbor classifier[<xref ref-type="bibr" rid="B12">12</xref>].</p><p>The bottom window pane of the client (the Properties window) displays the properties of the object currently selected in the Analysis Tree. Here, the experimental design for the selected object, the data matrix <bold>compound-panel.AGG</bold>, is currently visible.</p><p>The Analysis Tree contains nodes at three types of levels. Nodes at the highest, most general level are named Projects: in Figure <xref ref-type="fig" rid="F4">4</xref>, the Analysis Tree is opened under the Project <bold>Oncology_compound_response</bold>. Nodes at the next, lower level, named Analyses, enable classification under more specific themes: in Figure <xref ref-type="fig" rid="F4">4</xref>, the Analysis Tree is opened under the Analysis <bold>A498-series</bold>, which contains results specific to the A498 cell line assays. The nodes at all levels below Projects and Analyses contain the actual results of analysis operations, and are arranged in a recursive, parent-child hierarchy of arbitrary depth. Thus in Figure <xref ref-type="fig" rid="F4">4</xref>, under <bold>A498-series</bold>, five generations of results are displayed. Note that each analysis result has a specific data type, indicated by the extension of its name and by a color-coded icon. A total of 33 data types are currently defined in Gecko.</p></sec><sec><title>The analysis workflow for the A498 cell line data</title><p>The analysis workflow of the A498 cell line data is indicated in an expanded view of the Analysis Tree (Figure <xref ref-type="fig" rid="F5">5</xref>). The analysis was started by creating a single data matrix out of the 72 independent scans which together constitute all data for the A498 series. The data matrix was created by a copy-and-paste submission of a spreadsheet containing the list of scans to the <italic>Concatenate </italic>tool, which then automatically assembled and normalized the relevant scan data. This operation resulted in two objects, a scan reference file, <bold>compound_panel.GPPL </bold>(grey square icon), containing the constitutive list of scans, and the data matrix itself, <bold>compound_panel.AGG </bold>(orange square icon). Note that these two objects were automatically inserted below the analysis node <bold>A498-series</bold>, with <bold>compound_panel.AGG </bold>inserted as a child of <bold>compound_panel.GPPL</bold>.</p><p>It is important to emphasize that the data matrix <bold>compound-panel.AGG </bold>is physically stored on the server platform. This centrality insures that all users have simultaneous access to ongoing analyses, and if desired, that they can collaborate in real-time, even when working from very different geographical locations (Figure <xref ref-type="fig" rid="F1">1</xref>).</p><p>The data matrix <bold>compound_panel.AGG </bold>has dimensions 22283 rows &#x000d7; 72 columns, with each row corresponding to a different Affymetrix qualifier on the HG_U133 chip (here the term "qualifier" is synonymous with Affymetrix "probe set"), and each column to a specific experimental sample. The associated <italic>experimental design </italic>[[<xref ref-type="bibr" rid="B4">4</xref>], p. 93] [[<xref ref-type="bibr" rid="B5">5</xref>], p. 219] of the A498 series, is also saved in the Gecko database in association with <bold>compound_panel.AGG</bold>, and is displayed in the Properties window (bottom window in Figure <xref ref-type="fig" rid="F4">4</xref>). The experimental design was originally specified in the spreadsheet submitted to the <italic>Concatenate </italic>tool, but can also be modified (or newly created) at any later time. It contains four factors, labeled <italic>dose</italic>, <italic>time_hr, compound </italic>and <italic>moa</italic>, corresponding to compound doseage, harvest time, compound name and compound mechanism of action, respectively.</p><p>Based on a general experimental design, one can then automatically define in Gecko simpler two-factorial designs, by selection of the factors in the appropriate client interface. For instance, Figs. <xref ref-type="fig" rid="F6">6a</xref> and <xref ref-type="fig" rid="F6">6b</xref> display the two-factorial designs for <bold>compound_panel.AGG </bold>which result from the combinations (<italic>compound </italic>&#x000d7; <italic>time_hr</italic>) and (<italic>moa </italic>&#x000d7; <italic>time_hr</italic>), respectively. The number of replicates for every combination of levels is indicated in each cell of the tables. The factorial design (<italic>compound </italic>&#x000d7; <italic>time_hr</italic>) is of particular interest for finding genes with expression differentially regulated by the treatments with the different compounds, with or without concommittant time variation. In the A498 analysis workflow, this design was used to generate a two-way analysis of variance (ANOVA) [[<xref ref-type="bibr" rid="B5">5</xref>], p. 214] of <bold>compound_panel.AGG</bold>, resulting in the dataset <bold>compound-panel_compound_time_hr.ANOVA2 </bold>(Figure <xref ref-type="fig" rid="F5">5</xref>, purple triangle icon), which was again automatically inserted as a child of its parent dataset. The two-way ANOVA is conducted on a qualifier-by-qualifier basis, and results in a file contains 22283 rows, each row consisting of the P-values (and associated statistics) for the <italic>compound, time_hr </italic>and <italic>compound </italic>&#x000d7; <italic>time_hr </italic>effects for the corresponding qualifier.</p><p>Once created, <bold>compound-panel_compound_time_hr.ANOVA2 </bold>can be revisited for selection of statistically significant data using a generic utility called <italic>Get Stats</italic>. In particular, <italic>Get Stats </italic>internally computes receiver operating characteristics [[<xref ref-type="bibr" rid="B7">7</xref>], p. 48] for all the effects considered in the factorial design, and permits selection of significant qualifiers at a specified false-discovery rate (FDR)[<xref ref-type="bibr" rid="B8">8</xref>]. For instance, for a threshold FDR &#x02264; 0.05 used in conjunction with the <italic>compound </italic>effects, one finds that 517 qualifiers out of 22283 exhibit compound-related changes in expression. In the Analysis Tree, the data subset corresponding to these 517 qualifiers, <bold>compound-panel_compound_time_hr-517.ANOVA2</bold>, is automatically inserted as a child of the parent file. The operation parameters (effect used for selection and threshold FDR) which generated the subset are also saved, and are displayed in the Properties window for reference.</p><p>Following the ANOVA operations, the original data matrix, <bold>compound_panel.AGG</bold>, was then filtered to the rows corresponding to the 517 signifi-cant qualifiers contained in <bold>compound-panel_compound_time_hr-517.ANOVA2</bold>, in preparation for down-stream clustering and supervised classification operations. This step, implemented by the subsetting tool <italic>Reduce on Qlist</italic>, results in the filtered data matrix <bold>compound_panel-517.AGG</bold>.</p><p>Note that for all of the datasets discussed above, prior to each operation, a tentative output name was automatically created (typically by a concatenation of the input dataset name and of the name of the operation to be applied), and then presented to the user in a preview page. The tentative name can then be modified, if desired, before final submission.</p></sec><sec><title>Clustering and supervised classification of the A498 cell line data</title><p>Several additional analysis steps were performed on the A498 series data, illustrating the use of complementary unsupervised (clustering) methods, as well as a supervised classification approach. Starting from the filtered data matrix <bold>compound_panel-517.AGG </bold>(Figure <xref ref-type="fig" rid="F5">5</xref>), and after row standardization [[<xref ref-type="bibr" rid="B11">11</xref>], p. 8] (<bold>compound_panel-517RmedNR.dat</bold>), three clustering methods were first applied, resulting in i) a self-organized map[<xref ref-type="bibr" rid="B9">9</xref>] of the data with 1 &#x000d7; 64 cluster geometry (<bold>compound_panel-517_1 </bold>&#x000d7; <bold>64.SOM</bold>), ii) a hierarchical clustering using average linkage [[<xref ref-type="bibr" rid="B10">10</xref>], p. 318] (<bold>compound_panel-517.TREE</bold>), and iii), a principal component analysis (PCA) [[<xref ref-type="bibr" rid="B11">11</xref>], p. 23] (<bold>compound_panel-517.PCA</bold>).</p><p>Supervised classification of the samples was also performed, using the gene expression <italic>k</italic>-nearest-neighbor classifier[<xref ref-type="bibr" rid="B12">12</xref>] integrated into Gecko. The classification was done on the basis of mechanism of action of the compounds (excluding controls, and regrouping 6 hour and 24 hour samples), resulting in a two-class problem with class labels "DNA replication inhibition" and "tubulin binding". The <italic>Feature Selection </italic>tool was first used, to compute the misclassification error as a function of the number of features (qualifiers) retained in the dataset, using the Fisher interclass separation [[<xref ref-type="bibr" rid="B13">13</xref>], p. 135] as a feature selection criterion and with misclassification error computed using "leave-one-group-out" (LOGO) cross-validation [[<xref ref-type="bibr" rid="B13">13</xref>], p. 219]. In each step of the LOGO procedure, all instances corresponding to a given compound are simultaneously removed and cross-classified by the remaining instances in the training set. Applied to each compound in turn, this resulted in 5 separate cross-classifications, each applied to the 12 held-out samples, with a tally of all misclassifications errors applied at the very end. The results were saved in <bold>compound_panel-517RmedNR_feature_sel_SCAN.STAT</bold>. An explicit <italic>k</italic>-nearest-neighbor classification, using an optimal set of 60 qualifiers determined by the feature selection step was then performed. The final classification results, including an internally generated PCA representation of the data, were automatically saved in the data set <bold>compound_panel-517RmedNR_feature_sel_FILTER_60_moa.CVEC </bold>(pink circle icon with &#x000d7; pattern).</p></sec><sec><title>Visualization of analysis results</title><p>Gecko provides for flexible visualization of analysis results, with results either directly displayed in the client Browser window, or streamed to external visualization tools such as Spotfire[<xref ref-type="bibr" rid="B2">2</xref>]. In Figure <xref ref-type="fig" rid="F7">7</xref>, the receiver operating characteristic for the distribution of P-values according to <italic>compound </italic>effects in the two-way ANOVA (<bold>compound-panel_compound_time_hr.ANOVA2</bold>) is displayed in the Browser window. In Figure <xref ref-type="fig" rid="F8">8</xref>, after streaming to Spotfire, a PCA representation of data for the supervised classification <bold>compound_panel-517RmedNR_feature_sel_FILTER_60_moa.CVEC </bold>is displayed as a three-dimensional scatter plot.</p></sec></sec><sec><title>Conclusions</title><p>Constructed around the three organizing concepts of the Analysis Tree, the agglomeration syntax, and the pervasive use of experimental designs, Gecko has proven to be a robust analysis platform for a large and distributed scientific community. Gecko has allowed for flexible incorporation of new analysis methods over time, and has insured intelligible access to older, complex analyses, successfully answering the question of "where is my data?".</p><p>It should be emphasized that the analysis framework afforded by Gecko is general and not limited to gene expression data. Data can be uploaded from many other sources, and the analysis methods relevant to the new data types can also be incorporated as needed. Thus, methodologies for the analysis of protein-protein interaction data[<xref ref-type="bibr" rid="B22">22</xref>], or for the analysis of Gene Ontology, categorical data[<xref ref-type="bibr" rid="B23">23</xref>] have been integrated into Gecko in the past. It is now hoped that with its public release, many other uses will be found for this general analysis platform.</p></sec><sec><title>Availability and requirements</title><p>All components of the Gecko software, including source code, are being made available as a package under SourceForge.net[<xref ref-type="bibr" rid="B1">1</xref>]. The Gecko project's home page will provide information regarding release schedules and availability. Interested parties may also directly contact the corresponding author (JT) for information.</p><p>Installation of the complete platform will require manual intervention as well as execution of the automated builds provided in the package. Manual intervention is required for installation of the required external software libraries (Perl modules, GNU software, graphics software, etc) as well as for setting up the run-time Gecko infrastructure (web server, servlet engine, Oracle data base). The automated builds provide for compilation of the C++ and Java source code, for creation of required flat-file directories, and for the creation of the database tables.</p><p>Existing installations of the Gecko platform are on Sun Enterprise UNIX servers running SunOS 2.8. Transposition to other operating systems, such as Linux, will thus require some additional "tuning" of components during installation. It should also be noted that the Gecko numerical analysis programs can be used in a standalone fashion (i.e. by execution from the command line), without requiring a complete installation of the platform.</p></sec><sec><title>Authors' contributions</title><p>JT designed and implemented the early browser-based version of Gecko; he then focused on algorithm and tool development and implementation, alongside giving overall scientific direction for the design of the production version. AU designed and implemented the database. AM designed and built the Java servlets which process user requests, as well as implement many analysis tools and utilities. JC designed and built the client application. DX designed and implemented several statistical analysis algorithms. RN and MH have been involved in running, packaging and in creating automated builds of the Gecko platform. CB had a central role in promoting the Gecko platform and in scientific design input. SB initiated and oversaw development of the production version of Gecko, and was closely involved with the design of the earlier browser-based versions.</p></sec></body><back><ack><sec><title>Acknowledgments</title><p>The authors wish to thank Paul Giresi for scientific input and user feedback during development, Richard Goldman and Igor Krigman for their extensive programming contributions, Rainer Fuchs and Michael Rosenberg for support and scientific input during development, and Amanda Jackson, Teresa Garcia and Sergio Roman-Roman for scientific input and extensive user feedback in early design phases.</p></sec></ack><ref-list><ref id="B1"><citation citation-type="other"><article-title>Gecko open source release</article-title><year>2004</year><ext-link ext-link-type="uri" xlink:href="http://sourceforge.net/projects/geckoe"/></citation></ref><ref id="B2"><citation citation-type="other"><article-title>Spotfire, USA</article-title><source>212 Elm Street Somerville, Massachusetts, USA</source><ext-link ext-link-type="uri" xlink:href="http://www.spotfire.com/"/></citation></ref><ref id="B3"><citation citation-type="other"><article-title>Minimum information about a microarray experiment &#x02013; MIAME standards</article-title><source>MIAME 11 document</source><ext-link ext-link-type="uri" xlink:href="http://www.mged.org/Workgroups/MIAME/miame.html"/><comment>April 1, 2002</comment></citation></ref><ref id="B4"><citation citation-type="book"><person-group person-group-type="author"><name><surname>Fisher</surname><given-names>RA</given-names></name></person-group><source>The Design of Experiments</source><year>1971</year><publisher-name>New York: Hafner</publisher-name></citation></ref><ref id="B5"><citation citation-type="book"><person-group person-group-type="author"><name><surname>Keeping</surname><given-names>ES</given-names></name></person-group><source>Intoduction to Statistical Inference</source><year>1995</year><publisher-name>New York: Dover</publisher-name></citation></ref><ref id="B6"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Tusher</surname><given-names>VG</given-names></name><name><surname>Tibshirani</surname><given-names>R</given-names></name><name><surname>Chu</surname><given-names>G</given-names></name></person-group><article-title>Significance analysis of microarrays applied to the ionizing radiation response</article-title><source>Proc Natl Acad Sci USA</source><year>2001</year><volume>98</volume><fpage>5116</fpage><lpage>5121</lpage><pub-id pub-id-type="pmid">11309499</pub-id><pub-id pub-id-type="doi">10.1073/pnas.091062498</pub-id></citation></ref><ref id="B7"><citation citation-type="book"><person-group person-group-type="author"><name><surname>Duda</surname><given-names>RO</given-names></name><name><surname>Hart</surname><given-names>PE</given-names></name><name><surname>Stork</surname><given-names>DG</given-names></name></person-group><source>Pattern Classification</source><year>2001</year><publisher-name>New York: John Wiley</publisher-name></citation></ref><ref id="B8"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Reiner</surname><given-names>A</given-names></name><name><surname>Yekutieli</surname><given-names>D</given-names></name><name><surname>Benjamini</surname><given-names>Y</given-names></name></person-group><article-title>Identifying differentially expressed genes using false discovery rate controlling procedures</article-title><source>Bioinformatics</source><year>2003</year><volume>10</volume><fpage>1093</fpage></citation></ref><ref id="B9"><citation citation-type="book"><person-group person-group-type="author"><name><surname>Kohonen</surname><given-names>T</given-names></name></person-group><source>Self-Organizing Maps</source><year>1997</year><publisher-name>New York: Springer</publisher-name></citation></ref><ref id="B10"><citation citation-type="book"><person-group person-group-type="author"><name><surname>Ripley</surname><given-names>BD</given-names></name></person-group><source>Pattern Recognition and Neural Networks</source><year>1996</year><publisher-name>Cambridge (UK): Cambridge University Press</publisher-name></citation></ref><ref id="B11"><citation citation-type="book"><person-group person-group-type="author"><name><surname>Dillon</surname><given-names>WR</given-names></name><name><surname>Goldstein</surname><given-names>M</given-names></name></person-group><source>Multivariate Analysis</source><year>1984</year><publisher-name>New York: John Wiley</publisher-name></citation></ref><ref id="B12"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Theilhaber</surname><given-names>J</given-names></name><name><surname>Connolly</surname><given-names>T</given-names></name><name><surname>Roman-Roman</surname><given-names>S</given-names></name><name><surname>Bushnell</surname><given-names>S</given-names></name><name><surname>Jackson</surname><given-names>A</given-names></name><name><surname>Call</surname><given-names>K</given-names></name><name><surname>Garcia</surname><given-names>T</given-names></name><name><surname>Baron</surname><given-names>R</given-names></name></person-group><article-title>Finding Genes in the C2C12 Osteogenic Pathway by <italic>k</italic>-Nearest-Neighbor Classification of Expression Data</article-title><source>Genome Research</source><year>2002</year><volume>12</volume><fpage>165</fpage><lpage>176</lpage><pub-id pub-id-type="pmid">11779842</pub-id><pub-id pub-id-type="doi">10.1101/gr.182601</pub-id></citation></ref><ref id="B13"><citation citation-type="book"><person-group person-group-type="author"><name><surname>Fukunaga</surname><given-names>K</given-names></name></person-group><source>Introduction to Statistical Pattern Recognition</source><year>1990</year><edition>2</edition><publisher-name>New York: Academic Press</publisher-name></citation></ref><ref id="B14"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Durbin</surname><given-names>BP</given-names></name><name><surname>Hardin</surname><given-names>JS</given-names></name><name><surname>Hawkins</surname><given-names>DM</given-names></name><name><surname>Rocke</surname><given-names>DM</given-names></name></person-group><article-title>A variance-stabilizing transformation for gene-expression microarray data</article-title><source>In Proc 10th Int Conf on Intelligent Systems for Molecular Biology(ISMB 2002) Bioinformatics</source><year>2002</year><volume>18</volume><fpage>S105</fpage><lpage>S110</lpage></citation></ref><ref id="B15"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Eisen</surname><given-names>MB</given-names></name><name><surname>Spellman</surname><given-names>PT</given-names></name><name><surname>Brown</surname><given-names>PO</given-names></name><name><surname>Botstein</surname><given-names>D</given-names></name></person-group><article-title>Cluster analysis and display of genome-wide expression patterns</article-title><source>Proc Natl Acad Sci USA</source><year>1998</year><volume>95</volume><fpage>14863</fpage><lpage>14868</lpage><pub-id pub-id-type="pmid">9843981</pub-id><pub-id pub-id-type="doi">10.1073/pnas.95.25.14863</pub-id></citation></ref><ref id="B16"><citation citation-type="other"><article-title>Bioconductor: open source software for bioinformatics</article-title><ext-link ext-link-type="uri" xlink:href="http://www.bioconductor.org"/></citation></ref><ref id="B17"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Theilhaber</surname><given-names>J</given-names></name><name><surname>Bushnell</surname><given-names>S</given-names></name><name><surname>Jackson</surname><given-names>A</given-names></name><name><surname>Fuchs</surname><given-names>R</given-names></name></person-group><article-title>Bayesian estimation of fold-changes in the analysis of gene expression: the PFOLD algorithm</article-title><source>J Comput Biol</source><year>2001</year><volume>8</volume><fpage>585</fpage><lpage>614</lpage><pub-id pub-id-type="pmid">11747614</pub-id><pub-id pub-id-type="doi">10.1089/106652701753307502</pub-id></citation></ref><ref id="B18"><citation citation-type="other"><article-title>Affymetrix</article-title><source>Santa Clara, California, USA</source><comment>See <ext-link ext-link-type="uri" xlink:href="http://www.affymetrix.com/products/index.affx"/> for an overview of Affymetrix DNA chip technology</comment></citation></ref><ref id="B19"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Schena</surname><given-names>M</given-names></name><name><surname>Shalon</surname><given-names>D</given-names></name><name><surname>Davis</surname><given-names>RW</given-names></name><name><surname>Brown</surname><given-names>PO</given-names></name></person-group><article-title>Quantitative monitoring of gene expression patterns with a complementary DNA microarray</article-title><source>Science</source><year>1995</year><volume>270</volume><fpage>467</fpage><lpage>470</lpage><pub-id pub-id-type="pmid">7569999</pub-id></citation></ref><ref id="B20"><citation citation-type="other"><article-title>NCI60 cell line panel</article-title><source>Developmental Therapeutics Programs, NCI/NIH</source><year>2004</year><ext-link ext-link-type="uri" xlink:href="http://dtp.nci.nih.gov/index.html"/></citation></ref><ref id="B21"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Lockhart</surname><given-names>DJ</given-names></name><name><surname>Dong</surname><given-names>H</given-names></name><name><surname>Byrne</surname><given-names>MC</given-names></name><name><surname>Follettie</surname><given-names>MT</given-names></name><name><surname>Gallo</surname><given-names>MV</given-names></name><name><surname>Chee</surname><given-names>MS</given-names></name><name><surname>Mittmann</surname><given-names>M</given-names></name><name><surname>Wang</surname><given-names>C</given-names></name><name><surname>Kobayashi</surname><given-names>M</given-names></name><name><surname>Horton</surname><given-names>H</given-names></name><name><surname>Brown</surname><given-names>EL</given-names></name></person-group><article-title>Expression monitoring by hybridization to high-density oligonucleotide arrays</article-title><source>Nat Biotechnol</source><year>1996</year><volume>14</volume><fpage>1675</fpage><lpage>1680</lpage><pub-id pub-id-type="pmid">9634850</pub-id><pub-id pub-id-type="doi">10.1038/nbt1296-1675</pub-id></citation></ref><ref id="B22"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Schwikowski</surname><given-names>B</given-names></name><name><surname>Uetz</surname><given-names>P</given-names></name><name><surname>Fields</surname><given-names>S</given-names></name></person-group><article-title>A network of protein-protein interactions in yeast</article-title><source>Nat Biotechnol</source><year>2000</year><volume>18</volume><fpage>1257</fpage><lpage>61</lpage><pub-id pub-id-type="pmid">11101803</pub-id><pub-id pub-id-type="doi">10.1038/82360</pub-id></citation></ref><ref id="B23"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Hosack</surname><given-names>DA</given-names></name><name><surname>Dennis</surname><given-names>G</given-names><suffix>Jr</suffix></name><name><surname>Sherman</surname><given-names>BT</given-names></name><name><surname>Lane</surname><given-names>HC</given-names></name><name><surname>Lempicki</surname><given-names>RA</given-names></name></person-group><article-title>Identifying biological themes within lists of genes with EASE</article-title><source>Genome Biol</source><year>2003</year><volume>4</volume><fpage>R70</fpage><pub-id pub-id-type="pmid">14519205</pub-id><pub-id pub-id-type="doi">10.1186/gb-2003-4-9-r60</pub-id></citation></ref></ref-list><sec sec-type="display-objects"><title>Figures and Tables</title><fig position="float" id="F1"><label>Figure 1</label><caption><p><bold>Sketch of the functional organization of a Gecko installation</bold>, emphasizing its distributed aspects. Research groups in France, Germany and the United States (sites #1 through #3) submit Affymetrix scan data (3 dark lines) to a server based in Cambridge, United States. Users can conduct analyses on any part of the stored data, using a client application (small Gecko icons) which enables two-way communication with the server (two-way arrows).</p></caption><graphic xlink:href="1471-2105-5-195-1"/></fig><fig position="float" id="F2"><label>Figure 2</label><caption><p><bold>Overview of the Gecko software architecture</bold>, including the major components of the client and server. Note that the client allows for data streaming to other applications, such as Excel or Spotfire.</p></caption><graphic xlink:href="1471-2105-5-195-2"/></fig><fig position="float" id="F3"><label>Figure 3</label><caption><p><bold>Examples of the Gecko </bold><italic>agglomeration syntax</italic>. a) <italic>Concatenate</italic>: concatenation of a large number of scans (here arising from many samples, each profiled across three distinct chip designs) into a single data matrix; normalizations are computed on-the-fly; b) <italic>Cat Ratio</italic>: element-by-element ratios are computed for two data matrices, creating a new data matrix containing ratios and P-values; c) <italic>Combine on Columns</italic>: the columns of two data matrices are concatenated to create a larger data matrix; d) <italic>Reduce on Qlist </italic>and <italic>Reduce on Columns</italic>: a data matrix is subsetted on its rows (right-hand arrow) or on its columns (bottom arrow), respectively, to form reduced data matrices; e) <italic>Merge Replicates</italic>: replicates are merged by taking medians of intensities (with concomitant reestimation of noise terms); f) <italic>Join</italic>: two data matrices are joined using qualifiers (row indices) as the join key.</p></caption><graphic xlink:href="1471-2105-5-195-3"/></fig><fig position="float" id="F4"><label>Figure 4</label><caption><p><bold>The Gecko user interface</bold>, showing Analysis Tree (upper left-hand-side), Browser (upper right-hand-side) and Properties windows (bottom). The Analysis Tree is opened on the A498 cell line data analyses described in the text (top), as well as on another independent study (bottom). An input form for a <italic>k</italic>-nearest-neighbor classifier is displayed in the Browser window. The experimental design for <bold>compound_panel.AGG </bold>(the selected object) is displayed in the Properties window.</p></caption><graphic xlink:href="1471-2105-5-195-4"/></fig><fig position="float" id="F5"><label>Figure 5</label><caption><p><bold>Details of the analysis workflow for the A498 cell line data </bold>(this is an expanded view of the Analysis Tree shown in Figure 4).</p></caption><graphic xlink:href="1471-2105-5-195-5"/></fig><fig position="float" id="F6"><label>Figure 6</label><caption><p><bold>The two-factorial designs for compound_panel.AGG</bold>, resulting from the factor combinations a) (<italic>compound </italic>&#x000d7; <italic>time_hr</italic>) or b) (<italic>moa </italic>&#x000d7; <italic>time_hr</italic>). The number of replicates for every combination of levels is indicated in each cell of the tables. The pink cells in a) are flagged as reference cells for contrast calculations with all other cells in the corresponding column.</p></caption><graphic xlink:href="1471-2105-5-195-6"/></fig><fig position="float" id="F7"><label>Figure 7</label><caption><p><bold>Receiver operating characteristic for the selection of qualifiers according to <italic>compound </italic>effects </bold>in the two-way ANOVA data set <bold>compound-panel_compound_time_hr.ANOVA2</bold>, with plot generated in the Gecko Browser window. The number <italic>N</italic><sub><italic>f </italic></sub>(<italic>P</italic><sub>0</sub>) of qualifiers found at a P-value less than or equal to <italic>P</italic><sub>0 </sub>is plotted against <italic>P</italic><sub>0 </sub>(note the log/-log scale used in the plot). The red line shows the trend expected under the null hypothesis of no compound effects (credits: pgplot graphics package).</p></caption><graphic xlink:href="1471-2105-5-195-7"/></fig><fig position="float" id="F8"><label>Figure 8</label><caption><p><bold>Spotfire scatter plot for the three-dimensional principal component analysis of the training set </bold>used for supervised classification, in the data set <bold>compound_panel-517RmedNR_feature_sel_FILTER_60_moa.CVEC</bold>, generated after data streaming to Spotfire. Samples are color coded in accordance to mechanism of action of the compound treatment, as indicated in the plot.</p></caption><graphic xlink:href="1471-2105-5-195-8"/></fig></sec></back></article>



