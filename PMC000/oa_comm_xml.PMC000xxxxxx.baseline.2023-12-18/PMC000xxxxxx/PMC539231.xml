<!DOCTYPE article PUBLIC "-//NLM//DTD Journal Archiving and Interchange DTD v2.3 20070202//EN" "archivearticle.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink" article-type="product-review"><?properties open_access?><front><journal-meta><journal-id journal-id-type="nlm-ta">BMC Bioinformatics</journal-id><journal-title>BMC Bioinformatics</journal-title><issn pub-type="epub">1471-2105</issn><publisher><publisher-name>BioMed Central</publisher-name><publisher-loc>London</publisher-loc></publisher></journal-meta><article-meta><article-id pub-id-type="pmid">15585059</article-id><article-id pub-id-type="pmc">PMC539231</article-id><article-id pub-id-type="publisher-id">1471-2105-5-190</article-id><article-id pub-id-type="doi">10.1186/1471-2105-5-190</article-id><article-categories><subj-group subj-group-type="heading"><subject>Software</subject></subj-group></article-categories><title-group><article-title>A two-way interface between limited Systems Biology Markup Language and R</article-title></title-group><contrib-group><contrib id="A1" corresp="yes" contrib-type="author"><name><surname>Radivoyevitch</surname><given-names>Tomas</given-names></name><xref ref-type="aff" rid="I1">1</xref><email>radivot@hal.cwru.edu</email></contrib></contrib-group><aff id="I1"><label>1</label>Department of Epidemiology and Biostatistics, Case Western Reserve University, Cleveland, Ohio 44106 USA</aff><pub-date pub-type="collection"><year>2004</year></pub-date><pub-date pub-type="epub"><day>7</day><month>12</month><year>2004</year></pub-date><volume>5</volume><fpage>190</fpage><lpage>190</lpage><ext-link ext-link-type="uri" xlink:href="http://www.biomedcentral.com/1471-2105/5/190"/><history><date date-type="received"><day>3</day><month>6</month><year>2004</year></date><date date-type="accepted"><day>7</day><month>12</month><year>2004</year></date></history><copyright-statement>Copyright &#x000a9; 2004 Radivoyevitch; licensee BioMed Central Ltd.</copyright-statement><license license-type="open-access" xlink:href="http://creativecommons.org/licenses/by/2.0"><p>This is an Open Access article distributed under the terms of the Creative Commons Attribution License (<ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/licenses/by/2.0"/>), which permits unrestricted use, distribution, and reproduction in any medium, provided the original work is properly cited.</p></license><abstract><sec><title>Background</title><p>Systems Biology Markup Language (SBML) is gaining broad usage as a standard for representing dynamical systems as data structures. The open source statistical programming environment R is widely used by biostatisticians involved in microarray analyses. An interface between SBML and R does not exist, though one might be useful to R users interested in SBML, and SBML users interested in R.</p></sec><sec><title>Results</title><p>A model structure that parallels SBML to a limited degree is defined in R. An interface between this structure and SBML is provided through two function definitions: write.SBML() which maps this R model structure to SBML level 2, and read.SBML() which maps a limited range of SBML level 2 files back to R. A published model of purine metabolism is provided in this SBML-like format and used to test the interface. The model reproduces published time course responses before and after its mapping through SBML.</p></sec><sec><title>Conclusions</title><p>List infrastructure preexisting in R makes it well-suited for manipulating SBML models. Further developments of this SBML-R interface seem to be warranted.</p></sec></abstract></article-meta></front><body><sec><title>Background</title><p>Systems biology markup language (SBML) is a standard for representing dynamical systems of biological interest [<xref ref-type="bibr" rid="B1">1</xref>,<xref ref-type="bibr" rid="B2">2</xref>]. Interfaces between SBML and high level computational environments are currently being developed for Mathematica [<xref ref-type="bibr" rid="B3">3</xref>] and Matlab [<xref ref-type="bibr" rid="B4">4</xref>], but to the author's knowledge, no such efforts are being carried forth for R/S-plus. This brief paper presents the author's initial developments toward a two-way SBML-R interface. The interface is currently limited in the range of SBML input files that it can handle. For example, it only handles SBML level 2 and does not handle "Events" and "FunctionDefinitions." The interface can nevertheless be used for some models, examples [<xref ref-type="bibr" rid="B5">5</xref>,<xref ref-type="bibr" rid="B6">6</xref>] of which are included under "demo" in the SBMLR package [<xref ref-type="bibr" rid="B7">7</xref>]. This paper provides an explicit example of one approach to an SBML-R interface. It is assumed throughout that the reader is already quite familiar with both SBML [<xref ref-type="bibr" rid="B8">8</xref>] and R [<xref ref-type="bibr" rid="B9">9</xref>].</p></sec><sec><title>Implementation</title><p>The software exists completely in R. It is comprised of four functions and is currently being distributed as a developmental package called "SBMLR" through Bioconductor [<xref ref-type="bibr" rid="B10">10</xref>]. The software was written subject to two constraints: 1) models expressed in SBML-like R must be exchangeable with a range of SBML models; and 2) models must be amenable to simulation in R. The first subsection that follows defines an SBML-like R model structure, the second illustrates how it can be used in simulations, and the third describes its conversions into and out of SBML.</p><sec><title>An SBML-Like Model Structure in R</title><p>To facilitate mappings between SBML and R, an SBML-like list structure is defined in this subsection using the purine metabolism model of Curto et al. [<xref ref-type="bibr" rid="B6">6</xref>] as a specific example (Figure <xref ref-type="fig" rid="F1">1</xref>). In this figure and elsewhere, ellipses (...) indicate missing code not critical to current discussions; complete source codes are available through the SBMLR package [<xref ref-type="bibr" rid="B7">7</xref>]. The essential components of an SBML model, namely, its compartments, species and reactions, are all present in this R analog of an SBML model. In the model of Curto et al. [<xref ref-type="bibr" rid="B4">4</xref>], there is one compartment, be it the cell or the entire human body, and 18 species: 2 boundary conditions (bc = True) and 16 state variables (bc = False), each with an initial condition (ic) or value. Each reaction is a list that includes a reaction id, the names of species that are reactants (reacts), the names of species that are reaction rate modulators (mods), the names of species that are produced by the reaction (prods), parameter values (params), and the reaction rate law (law) function definition. In this framework, only state variables need be listed as products, boundary condition reactants can equivalently be listed as modulators, and missing terms (e.g. mods in reactions 1 and 37) are equivalent to a NULL assignment. The rate law function has as its input arguments two vectors, one carrying the concentrations of reactants and modulators (r), the other carrying reaction parameter values (p). If the body of the rate law function contains <italic>n </italic>statements, the first <italic>n</italic>-1 trivially convert input vector components into variables with the same names. The <italic>n</italic>th statement then contains the complete reaction rate law. It can occupy multiple lines, but it must be a single statement, i.e. it cannot depend on substitution variables temporarily defined in preceding statements.</p></sec><sec><title>SBML-like Model Execution in R</title><p>Model definition codes such as that given in Figure <xref ref-type="fig" rid="F1">1</xref>, when placed in a separate file (e.g. Curto.r), can be sourced into a parent script to become globally available for simulations. For example, the purine metabolism model of Curto et al. [<xref ref-type="bibr" rid="B6">6</xref>] can be simulated using the execution code shown in Figure <xref ref-type="fig" rid="F2">2</xref>.</p><p>This code simulates the response to a 10-fold increase in phosphoribosylpyrophosphate (PRPP) at time <italic>t </italic>= 0 and plots the responses of inosine monophosphate (IMP) and hypoxanthine (HX) as shown in Figure <xref ref-type="fig" rid="F3">3</xref>. Two functions called by this script are defined in the SBMLR package and shown in Figure <xref ref-type="fig" rid="F4">4</xref>. They are, getIncidenceMatrix(), which computes the incidence/stoichiometry matrix used by the second function, fderiv(), which computes state derivatives for integration by the function lsoda() of the "odesolve" package. In getIncidenceMatrix(), the incidence matrix is generated automatically using an <italic>i </italic>loop over the rows (i.e. state variables) and a <italic>j </italic>loop over the columns (i.e. reactions). If a state is a product of a reaction, the corresponding matrix element becomes a positive integer equal to its stoichiometry [factor() converts string names to factors so that summary() can count them], and similarly for reactants, though with negative numbers entering the matrix in this case (or possibly zero, if a reactant of a reaction happens to also be a product of the same reaction).</p><p>The function fderiv() creates the current species vector by overriding initial states with current states clipped to positive values, and by overriding any time varying boundary conditions defined by rules (SBML rules are not needed for the purine model, but are needed to implement other models [<xref ref-type="bibr" rid="B5">5</xref>]). The function fderiv() then computes the reaction rate flux vector (v) based on the current species vector (St) and multiplies it by the incidence matrix to produce the current state derivative vector (xp). The names of xp and v are reset at the end of each function call to override the problem of variables gaining new composite names from the names of their expression arguments.</p></sec><sec><title>A Two-Way Interface between SBML and R</title><p>Two functions comprise the SBML-R interface: write.SBML() converts SBML-like R models (e.g. Curto.r) into SBML models (e.g. Curto.xml), and read.SBML() converts SBML models (e.g. Curto.xml) into an SBML-like R model (e.g. CurtoX.r). A key component of these two interface functions is a locally defined recursive function named recurs(). This function converts arbitrary R expressions into arbitrary MathML expressions, and vice-versa; it is defined differently, locally, in each of the two functions. In write.SBML(), shown in Figure <xref ref-type="fig" rid="F5">5</xref>, recurs() initially takes as its input argument the last component of the body of the kinetic rate law function definition, which is the entire rate law expression (as mentioned above, rate laws involving multiple R statements are not supported). In R, expressions are LISP like in that they contain a first element, the operator, and the remaining elements, the arguments, any of which can be an expression. If the operator is the parentheses operator, the action taken is that of a unary identity operator, and we simply skip it and move on to its argument since parentheses are not needed in MathML. Each nested call to the function recurs() sends "&#x0003c;apply&#x0003e;" and the converted operator to the output file on its way in, and a matching "&#x0003c;/apply&#x0003e;" on its way out. Nested calling continues until all nodes of the expression tree are of class "name" or "numeric," i.e. when all found objects are leaves of the tree rather than "expressions" that require further parsing. Leaves are then sent to the output file bracketed by &#x0003c;ci&#x0003e; and &#x0003c;/ci&#x0003e;.</p><p>The second of the two SBML-R interface functions, read.SBML(), maps a limited range of SBML level 2 files (function definitions and events are not handled) into SBML-like R model files. Portions of read.SBML() are given in Figure <xref ref-type="fig" rid="F6">6</xref>. The main difference between this function, read.SBML(), and the previous function, write.SBML(), is that here, rather than using parse() to decompose the list-of-lists structure of the model defined in R, the SBML model is instead decomposed as an XML object using xmlTreeParse() of the XML package available to R [<xref ref-type="bibr" rid="B11">11</xref>]. In read.SBML(), the locally defined recursive function recurs() uses an overkill of parentheses to avoid operator precedence issues. This recursive function is passed a MathML reaction rate law which it parses recursively until the leaves of the tree (the "ci") are all found. During the recursion a corresponding R expression is built as a vector of character strings which, upon exit from the last of the recursive calls, is collapsed into a single string and sent to the output file as the last line of the current rate law function definition.</p></sec></sec><sec><title>Results</title><p>The function write.SBML() was applied to Curto.r to generate Curto.xml and the function read.SBML() was then applied to Curto.xml to generate CurtoX.r. Execution of the script given in Figure <xref ref-type="fig" rid="F2">2</xref> with line 4 of the execution code changed to act on CurtoX.r instead of Curto.r generated the same plots as before (Figure <xref ref-type="fig" rid="F3">3</xref>). This shows that the R model was successfully converted into an SBML file that can be reconverted back into a properly functioning R model. The intermediate file Curto.xml was successfully validated as an SBML level 2 file [<xref ref-type="bibr" rid="B12">12</xref>]. The SBML file could thus be imported into visualization packages such as JDesigner [<xref ref-type="bibr" rid="B13">13</xref>].</p></sec><sec><title>Discussion</title><p>If the model of Curto et al. [<xref ref-type="bibr" rid="B4">4</xref>] were implemented in R without any knowledge of SBML, a form that it might take is that given in Appendix B (Figure <xref ref-type="fig" rid="F7">7</xref>). Compared to its SBML-like counterparts, this code is more compact and easier to understand, e.g. the system's network connectivity is clearly visible. The disadvantage of such code is that it is not readily converted into SBML. Since the benefits of SBML are compelling, this disadvantage alone warrants the use of SBML-like model structures.</p><p>As SBML evolves to handle a broader range of dynamical systems, it will become more and more challenging for simulation packages to handle all possible SBML models. It is envisioned here that the development of this SBML-R interface will be driven by its users, and not by the model representation capabilities of SBML, i.e. it is expected that the users of this interface will be programmers who are capable of modifying it as their needs require.</p></sec><sec><title>Conclusions</title><p>Compared to Matlab, which may be better equipped than R to simulate arbitrarily complex dynamical systems, R has the advantage of list handling infrastructure in parse() and xmlTreeParse(), and it also has the advantage of indexing by names instead of numbers. A further advantage, though not exploited here, is that R is object-oriented; in future versions of this interface, a print() method might be defined for objects of class SBMLR (i.e. models) to generate more readable renderings of models in R. Another advantage of R over Matlab is that it provides access to a much broader collection of microarray analysis tools, e.g. see Bioconductor [<xref ref-type="bibr" rid="B10">10</xref>]. This aspect is important for those individuals who are interested in biochemical systems analyses of microarray data [<xref ref-type="bibr" rid="B14">14</xref>,<xref ref-type="bibr" rid="B15">15</xref>]. For statisticians already familiar with R, there are also the obvious economies of maintaining system familiarity. Finally, perhaps the biggest advantage of R over Matlab is that it is freely available. On balance, there seems to be ample motivation for further developments of this interface between SBML and R.</p></sec><sec><title>Availability and requirements</title><p>Project name: SBMLR</p><p>Project home page: <ext-link ext-link-type="uri" xlink:href="http://www.bioconductor.org/repository/devel/package/html/SBMLR.html"/></p><p>Operating system(s): Windows XP</p><p>Programming language: R 2.0</p><p>Other requirements: R packages: XML and ODESOLVE</p><p>License: GNU GPL</p><p>Any restrictions to use by non-academics: no restrictions</p></sec><sec><title>List of abbreviations</title><p>SBML = Systems Biology Markup Language; XML = extensible markup language; MathML = Mathematical Markup Language; ODE = ordinary differential equation.</p></sec><sec><title>Authors' contributions</title><p>TR is the sole contributor.</p></sec><sec><title>Appendix A</title><p>The SBMLR package is available through Bioconductor as a developmental package [<xref ref-type="bibr" rid="B7">7</xref>]. It has been developed and tested only under Windows XP. To install, do NOT unzip the file SBMLR.zip after downloading to a local directory, rather, within the R GUI, click <italic>packages </italic>and <italic>install from local zip</italic>. The XML package installs similarly [<xref ref-type="bibr" rid="B11">11</xref>]. Note that an error message from library(XML) can be resolved by copying the *.dll files of the XML package libs directory into the "C:\windows" directory. The ODESOLVE package must be installed before running simulations. This package is installed from the R GUI by clicking <italic>packages </italic>and <italic>install from CRAN</italic>.</p></sec><sec><title>Appendix B</title><p>The implementation of Curto et al.'s model shown in Figure <xref ref-type="fig" rid="F7">7</xref> is independent of any knowledge of SBML. It is included here to illustrate what comes "naturally" when implementing a model in R, see Discussion.</p></sec></body><back><ack><sec><title>Acknowledgements</title><p>This research was supported by the Biostatistics Core Facility of the Comprehensive Cancer Center of Case Western Reserve University and University Hospitals of Cleveland (P30 CA43703), by the American Cancer Society (IRG-91-022-09), and by the National Cancer Institute's Integrative Cancer Biology Program (P20 CA112963-01).</p></sec></ack><ref-list><ref id="B1"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Hucka</surname><given-names>M</given-names></name><name><surname>Finney</surname><given-names>A</given-names></name><name><surname>Sauro</surname><given-names>HM</given-names></name><name><surname>Bolouri</surname><given-names>H</given-names></name><name><surname>Doyle</surname><given-names>JC</given-names></name><name><surname>Kitano</surname><given-names>H</given-names></name><name><surname>Arkin</surname><given-names>AP</given-names></name><name><surname>Bornstein</surname><given-names>BJ</given-names></name><name><surname>Bray</surname><given-names>D</given-names></name><name><surname>Cornish-Bowden</surname><given-names>A</given-names></name><name><surname>Cuellar</surname><given-names>AA</given-names></name><name><surname>Dronov</surname><given-names>S</given-names></name><name><surname>Gilles</surname><given-names>ED</given-names></name><name><surname>Ginkel</surname><given-names>M</given-names></name><name><surname>Gor</surname><given-names>V</given-names></name><name><surname>Goryanin</surname><given-names>II</given-names></name><name><surname>Hedley</surname><given-names>WJ</given-names></name><name><surname>Hodgman</surname><given-names>TC</given-names></name><name><surname>Hofmeyr</surname><given-names>JH</given-names></name><name><surname>Hunter</surname><given-names>PJ</given-names></name><name><surname>Juty</surname><given-names>NS</given-names></name><name><surname>Kasberger</surname><given-names>JL</given-names></name><name><surname>Kremling</surname><given-names>A</given-names></name><name><surname>Kummer</surname><given-names>U</given-names></name><name><surname>Le Novere</surname><given-names>N</given-names></name><name><surname>Loew</surname><given-names>LM</given-names></name><name><surname>Lucio</surname><given-names>D</given-names></name><name><surname>Mendes</surname><given-names>P</given-names></name><name><surname>Minch</surname><given-names>E</given-names></name><name><surname>Mjolsness</surname><given-names>ED</given-names></name><name><surname>Nakayama</surname><given-names>Y</given-names></name><name><surname>Nelson</surname><given-names>MR</given-names></name><name><surname>Nielsen</surname><given-names>PF</given-names></name><name><surname>Sakurada</surname><given-names>T</given-names></name><name><surname>Schaff</surname><given-names>JC</given-names></name><name><surname>Shapiro</surname><given-names>BE</given-names></name><name><surname>Shimizu</surname><given-names>TS</given-names></name><name><surname>Spence</surname><given-names>HD</given-names></name><name><surname>Stelling</surname><given-names>J</given-names></name><name><surname>Takahashi</surname><given-names>K</given-names></name><name><surname>Tomita</surname><given-names>M</given-names></name><name><surname>Wagner</surname><given-names>J</given-names></name><name><surname>Wang</surname><given-names>J</given-names></name></person-group><article-title>The systems biology markup language (SBML): a medium for representation and exchange of biochemical network models</article-title><source>Bioinformatics</source><year>2003</year><volume>19</volume><fpage>524</fpage><lpage>531</lpage><pub-id pub-id-type="pmid">12611808</pub-id><pub-id pub-id-type="doi">10.1093/bioinformatics/btg015</pub-id></citation></ref><ref id="B2"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Finney</surname><given-names>A</given-names></name><name><surname>Hucka</surname><given-names>M</given-names></name></person-group><article-title>Systems biology markup language: Level 2 and beyond</article-title><source>Biochem Soc Trans</source><year>2003</year><volume>31</volume><fpage>1472</fpage><lpage>1473</lpage><pub-id pub-id-type="pmid">14641091</pub-id></citation></ref><ref id="B3"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Shapiro</surname><given-names>BE</given-names></name><name><surname>Hucka</surname><given-names>M</given-names></name><name><surname>Finney</surname><given-names>A</given-names></name><name><surname>Doyle</surname><given-names>J</given-names></name></person-group><article-title>MathSBML: a package for manipulating SBML-based biological models</article-title><source>Bioinformatics</source><year>2004</year><volume>20</volume><fpage>2829</fpage><lpage>2831</lpage><pub-id pub-id-type="pmid">15087311</pub-id><pub-id pub-id-type="doi">10.1093/bioinformatics/bth271</pub-id></citation></ref><ref id="B4"><citation citation-type="other"><person-group person-group-type="author"><name><surname>Keating</surname><given-names>SM</given-names></name></person-group><article-title>SBMLToolbox</article-title><ext-link ext-link-type="uri" xlink:href="http://sbml.org/software/sbmltoolbox/"/></citation></ref><ref id="B5"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Morrison</surname><given-names>PF</given-names></name><name><surname>Allegra</surname><given-names>CJ</given-names></name></person-group><article-title>Folate cycle kinetics in human breast cancer cells</article-title><source>J Biol Chem</source><year>1989</year><volume>264</volume><fpage>10552</fpage><lpage>10566</lpage><pub-id pub-id-type="pmid">2732237</pub-id></citation></ref><ref id="B6"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Curto</surname><given-names>R</given-names></name><name><surname>Voit</surname><given-names>EO</given-names></name><name><surname>Sorribas</surname><given-names>A</given-names></name><name><surname>Cascante</surname><given-names>M</given-names></name></person-group><article-title>Mathematical models of purine metabolism in man</article-title><source>Math Biosci</source><year>1998</year><volume>151</volume><fpage>1</fpage><lpage>49</lpage><pub-id pub-id-type="pmid">9664759</pub-id><pub-id pub-id-type="doi">10.1016/S0025-5564(98)10001-9</pub-id></citation></ref><ref id="B7"><citation citation-type="other"><article-title>SBMLR</article-title><ext-link ext-link-type="uri" xlink:href="http://www.bioconductor.org/repository/devel/package/html/SBMLR.html"/></citation></ref><ref id="B8"><citation citation-type="other"><article-title>Systems Biology Markup Language</article-title><ext-link ext-link-type="uri" xlink:href="http://sbml.org"/></citation></ref><ref id="B9"><citation citation-type="other"><article-title>The R Project for Statistical Computing</article-title><ext-link ext-link-type="uri" xlink:href="http://www.r-project.org/"/></citation></ref><ref id="B10"><citation citation-type="other"><article-title>Bioconductor</article-title><ext-link ext-link-type="uri" xlink:href="http://www.bioconductor.org/"/></citation></ref><ref id="B11"><citation citation-type="other"><article-title>XML</article-title><ext-link ext-link-type="uri" xlink:href="http://www.omegahat.org/RSXML/"/></citation></ref><ref id="B12"><citation citation-type="other"><article-title>SBML Online Tools</article-title><ext-link ext-link-type="uri" xlink:href="http://sbml.org/tools/htdocs/sbmltools.php"/></citation></ref><ref id="B13"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Sauro</surname><given-names>HM</given-names></name><name><surname>Hucka</surname><given-names>M</given-names></name><name><surname>Finney</surname><given-names>A</given-names></name><name><surname>Wellock</surname><given-names>C</given-names></name><name><surname>Bolouri</surname><given-names>H</given-names></name><name><surname>Doyle</surname><given-names>J</given-names></name><name><surname>Kitano</surname><given-names>H</given-names></name></person-group><article-title>Next generation simulation tools: the Systems Biology Workbench and BioSPICE integration</article-title><source>Omics</source><year>2003</year><volume>7</volume><fpage>355</fpage><lpage>372</lpage><pub-id pub-id-type="pmid">14683609</pub-id><pub-id pub-id-type="doi">10.1089/153623103322637670</pub-id></citation></ref><ref id="B14"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Radivoyevitch</surname><given-names>T</given-names></name></person-group><article-title>Sphingoid base metabolism in yeast: Mapping gene expression patterns into qualitative metabolite time course predictions</article-title><source>Comparative &#x00026; Functional Genomics</source><year>2001</year><volume>2</volume><fpage>289</fpage><lpage>294</lpage><pub-id pub-id-type="doi">10.1002/cfg.106</pub-id></citation></ref><ref id="B15"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Voit</surname><given-names>EO</given-names></name><name><surname>Radivoyevitch</surname><given-names>T</given-names></name></person-group><article-title>Biochemical systems analysis of genome-wide expression data</article-title><source>Bioinformatics</source><year>2000</year><volume>16</volume><fpage>1023</fpage><lpage>1037</lpage><pub-id pub-id-type="pmid">11159314</pub-id><pub-id pub-id-type="doi">10.1093/bioinformatics/16.11.1023</pub-id></citation></ref></ref-list><sec sec-type="display-objects"><title>Figures and Tables</title><fig position="float" id="F1"><label>Figure 1</label><caption><p>The model of Curto <italic>et al. </italic>implemented as an SBMLR structure</p></caption><graphic xlink:href="1471-2105-5-190-1"/></fig><fig position="float" id="F2"><label>Figure 2</label><caption><p>The purine metabolism model of Curto <italic>et al. </italic>represented in SBMLR Figure 1) simulated to respond to a 10-fold increase (5 &#x003bc;M to 50 &#x003bc;M) in phosphoribosylpyrophosphate (PRPP) at time <italic>t </italic>= 0</p></caption><graphic xlink:href="1471-2105-5-190-2"/></fig><fig position="float" id="F3"><label>Figure 3</label><caption><p>The purine metabolism model of Curto <italic>et al. </italic>responding to a 10-fold increase in phosphoribosylpyrophosphate (PRPP) at time <italic>t </italic>= 0 (see Figure 2). IMP is inosine monophosphate, HX is hypoxanthine, time is in minutes, and concentration is in &#x003bc;M.</p></caption><graphic xlink:href="1471-2105-5-190-3"/></fig><fig position="float" id="F4"><label>Figure 4</label><caption><p>R codes for the functions getIncidenceMatrix() and fderiv().</p></caption><graphic xlink:href="1471-2105-5-190-4"/></fig><fig position="float" id="F5"><label>Figure 5</label><caption><p>R code for the function write.SBML().</p></caption><graphic xlink:href="1471-2105-5-190-5"/></fig><fig position="float" id="F6"><label>Figure 6</label><caption><p>R code for the function read.SBML().</p></caption><graphic xlink:href="1471-2105-5-190-6"/></fig><fig position="float" id="F7"><label>Figure 7</label><caption><p>The purine metabolism model of Curto <italic>et al. </italic>implemented in "natural R".</p></caption><graphic xlink:href="1471-2105-5-190-7"/></fig></sec></back></article>



