<!DOCTYPE article PUBLIC "-//NLM//DTD Journal Archiving and Interchange DTD v2.3 20070202//EN" "archivearticle.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink" article-type="research-article"><?properties open_access?><front><journal-meta><journal-id journal-id-type="nlm-ta">BMC Bioinformatics</journal-id><journal-title>BMC Bioinformatics</journal-title><issn pub-type="epub">1471-2105</issn><publisher><publisher-name>BioMed Central</publisher-name><publisher-loc>London</publisher-loc></publisher></journal-meta><article-meta><article-id pub-id-type="pmid">15710037</article-id><article-id pub-id-type="pmc">PMC555464</article-id><article-id pub-id-type="publisher-id">1471-2105-6-30</article-id><article-id pub-id-type="doi">10.1186/1471-2105-6-30</article-id><article-categories><subj-group subj-group-type="heading"><subject>Research Article</subject></subj-group></article-categories><title-group><article-title>An ant colony optimisation algorithm for the 2D and 3D hydrophobic polar protein folding problem</article-title></title-group><contrib-group><contrib id="A1" contrib-type="author"><name><surname>Shmygelska</surname><given-names>Alena</given-names></name><xref ref-type="aff" rid="I1">1</xref><email>oshmygel@cs.ubc.ca</email></contrib><contrib id="A2" corresp="yes" contrib-type="author"><name><surname>Hoos</surname><given-names>Holger H</given-names></name><xref ref-type="aff" rid="I1">1</xref><email>hoos@cs.ubc.ca</email></contrib></contrib-group><aff id="I1"><label>1</label>Department of Computer Science, University of British Columbia, Vancouver, B.C., V6T 1Z4, Canada</aff><pub-date pub-type="collection"><year>2005</year></pub-date><pub-date pub-type="epub"><day>14</day><month>2</month><year>2005</year></pub-date><volume>6</volume><fpage>30</fpage><lpage>30</lpage><ext-link ext-link-type="uri" xlink:href="http://www.biomedcentral.com/1471-2105/6/30"/><history><date date-type="received"><day>16</day><month>7</month><year>2004</year></date><date date-type="accepted"><day>14</day><month>2</month><year>2005</year></date></history><copyright-statement>Copyright &#x000a9; 2005 Shmygelska and Hoos; licensee BioMed Central Ltd.</copyright-statement><license license-type="open-access" xlink:href="http://creativecommons.org/licenses/by/2.0"><p>This is an Open Access article distributed under the terms of the Creative Commons Attribution License (<ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/licenses/by/2.0"/>), which permits unrestricted use, distribution, and reproduction in any medium, provided the original work is properly cited.</p></license><abstract><sec><title>Background</title><p>The protein folding problem is a fundamental problems in computational molecular biology and biochemical physics. Various optimisation methods have been applied to formulations of the <italic>ab-initio </italic>folding problem that are based on reduced models of protein structure, including Monte Carlo methods, Evolutionary Algorithms, Tabu Search and hybrid approaches. In our work, we have introduced an ant colony optimisation (ACO) algorithm to address the non-deterministic polynomial-time hard (<italic>NP</italic>-hard) combinatorial problem of predicting a protein's conformation from its amino acid sequence under a widely studied, conceptually simple model &#x02013; the 2-dimensional (2D) and 3-dimensional (3D) hydrophobic-polar (HP) model.</p></sec><sec><title>Results</title><p>We present an improvement of our previous ACO algorithm for the 2D HP model and its extension to the 3D HP model. We show that this new algorithm, dubbed ACO-HPPFP-3, performs better than previous state-of-the-art algorithms on sequences whose native conformations do not contain structural nuclei (parts of the native fold that predominantly consist of local interactions) at the ends, but rather in the middle of the sequence, and that it generally finds a more diverse set of native conformations.</p></sec><sec><title>Conclusions</title><p>The application of ACO to this bioinformatics problem compares favourably with specialised, state-of-the-art methods for the 2D and 3D HP protein folding problem; our empirical results indicate that our rather simple ACO algorithm scales worse with sequence length but usually finds a more diverse ensemble of native states. Therefore the development of ACO algorithms for more complex and realistic models of protein structure holds significant promise.</p></sec></abstract></article-meta></front><body><sec><title>Background</title><p>Ant Colony Optimisation (ACO) is a population-based stochastic search method for solving a wide range of combinatorial optimisation problems. ACO is based on the concept of <italic>stigmergy </italic>&#x02013; indirect communication between members of a population through interaction with the environment. An example of stigmergy is the communication of ants during the foraging process: ants indirectly communicate with each other by depositing pheromone trails on the ground and thereby influencing the decision processes of other ants. This simple form of communication between individual ants gives rise to complex behaviours and capabilities of the colony as a whole.</p><p>From the computational point of view, ACO is an iterative construction search method in which a population of simple agents ('ants') repeatedly constructs candidate solutions to a given problem; this construction process is probabilistically guided by heuristic information on the given problem instance as well as by a shared memory containing experience gathered by the ants in previous iterations ('pheromone trails'). Following the seminal work by Dorigo <italic>et al. </italic>[<xref ref-type="bibr" rid="B1">1</xref>,<xref ref-type="bibr" rid="B2">2</xref>], ACO algorithms have been successfully applied to a broad range of hard combinatorial problems, including the traveling salesman problem, the graph colouring problem, the quadratic assignment problem and vehicle routing problems (see, <italic>e.g., </italic>[<xref ref-type="bibr" rid="B3">3</xref>-<xref ref-type="bibr" rid="B5">5</xref>]).</p><p>The research presented in this paper builds on an ACO algorithm first proposed in [<xref ref-type="bibr" rid="B6">6</xref>] (and later improved in [<xref ref-type="bibr" rid="B7">7</xref>]) for <italic>ab-initio </italic>protein folding under a widely studied abstract model &#x02013; the hydrophobic polar (HP) model. In particular, we extend our previous ACO algorithm to the 3D HP model and improve its performance by modifying the subsidiary local search procedure.</p><p>The protein folding problem is one of the most challenging problems in computational biology, molecular biology, biochemistry and physics. Even under simplified lattice models, the protein folding problem is non-deterministic polynomial-time hard (<italic>NP</italic>-hard) [<xref ref-type="bibr" rid="B8">8</xref>]. The <italic>ab-initio </italic>protein folding problem can be broken down into three sub-problems: 1) design of a model (with a desired level of accuracy); 2) definition of an energy function that can effectively discriminate between native and non-native states; and 3) design of a search algorithm that can efficiently find minimal-energy conformations. A number of search (or sampling) methods have been proposed in the literature to solve the protein folding problem, including Monte Carlo algorithms, Evolutionary Algorithms, Tabu Search and hybrid approaches. ACO, which has been very successfully applied to other combinatorial problems, appears to be a very attractive computational method for solving the protein folding problem, since it combines aspects of chain-growth and permutation-based search with ideas closely related to reinforcement learning. These concepts and ideas apply rather naturally to protein folding: By folding from multiple initial folding points, guided by the energy function and experience from previous iterations of the algorithm, an ensemble of promising, low-energy complete conformations is obtained. These conformations are further improved by a subsidiary local search procedure and then evaluated to update the accumulated pheromone values that are used to bias the generation of conformations in future iterations of the algorithm.</p><p>In this paper, we ask and address the following questions: Is ACO a competitive method for solving the <italic>ab-initio </italic>protein folding problem under the 2D and 3D HP models? How does its performance scale with sequence length? What is the role of the parameters of the ACO algorithm for the efficiency of the optimisation process? Which classes of structures (if any) are solved more efficiently by ACO than by any other known algorithms? Finally, it should be noted that our ACO algorithm for this problem is based on very simple design choices, in particular with respect to the solution components reinforced in the pheromone matrix and of the subsidiary local search procedure. We discuss which of the many design choices underlying our algorithm should be reconsidered in order to achieve further performance improvements.</p><sec><title>The hydrophobic polar model</title><p>Due to the complexity of the protein folding problem, simplified models such as Dill's hydrophobic-polar (HP) model have become one of the major tools for studying protein structure [<xref ref-type="bibr" rid="B9">9</xref>]. The HP model is based on the observation that the hydrophobic force is the main force determining the unique native conformation (and hence the functional state) of small globular proteins [<xref ref-type="bibr" rid="B9">9</xref>,<xref ref-type="bibr" rid="B10">10</xref>].</p><p>In the HP model, the primary amino acid sequence of a protein (which can be represented as a string over a twenty-letter alphabet) is abstracted to a sequence of hydrophobic (H) and polar (P) residues that is represented as a string over the letters H and P. The conformations of such an HP sequence are restricted to self-avoiding walks on a lattice. For the 2D HP model, a 2-dimensional square lattice is typically used, and the 3D HP model is generally based on a 3-dimensional cubic lattice. An example of a protein conformation under the 2D HP model is shown in Figure <xref ref-type="fig" rid="F1">1</xref>. The energy of a conformation is defined as the number of topological contacts between hydrophobic amino acids that are not neighbours in the given sequence. More specifically, a conformation <italic>c </italic>with exactly <italic>n </italic>such H-H contacts has energy <italic>E</italic>(<italic>c</italic>) = <italic>n</italic>&#x000b7;(-1); for example, the 2D HP conformation shown in Figure <xref ref-type="fig" rid="F1">1</xref> has energy -9.</p><p>The HP Protein Folding Problem can be formally defined as follows: Given an HP sequence <italic>s </italic>= <italic>s</italic><sub>1 </sub><italic>s</italic><sub>2</sub>...<italic>s</italic><sub><italic>n</italic></sub>, find an energy-minimising conformation of <italic>s</italic>, <italic>i.e., </italic>find <italic>c</italic>* &#x02208; <italic>C</italic>(<italic>s</italic>) such that <italic>E</italic>(<italic>c</italic>*) = min{<italic>E</italic>(<italic>c</italic>) | <italic>c </italic>&#x02208; <italic>C</italic>}, where <italic>C</italic>(<italic>s</italic>) is the set of all valid conformations for <italic>s</italic>. It has been proved recently that this problem and several variations of it are <italic>NP</italic>-hard [<xref ref-type="bibr" rid="B8">8</xref>].</p></sec><sec><title>Existing 2D and 3D HP protein folding algorithms</title><p>A number of well-known heuristic optimisation methods have been applied to the 2D and 3D HP Protein Folding Problem, including Evolutionary Algorithms (EAs) [<xref ref-type="bibr" rid="B11">11</xref>-<xref ref-type="bibr" rid="B15">15</xref>] and Monte Carlo (MC) algorithms [<xref ref-type="bibr" rid="B16">16</xref>-<xref ref-type="bibr" rid="B22">22</xref>]. The latter have been found to be particularly robust and effective for finding high-quality solutions to the HP Protein Folding Problem [<xref ref-type="bibr" rid="B18">18</xref>].</p><p>Besides general optimisation methods, there are other heuristic methods that rely on specific heuristics that are based on intuitions or assumptions about the folding process, such as co-operativity of folding or the existence of a hydrophobic core. Co-operativity is believed to arise from local conformational choices that result in a globally optimal state without exhaustive search [<xref ref-type="bibr" rid="B23">23</xref>]. Among these methods are the hydrophobic zipper method (HZ) [<xref ref-type="bibr" rid="B23">23</xref>], the contact interactions method (CI) [<xref ref-type="bibr" rid="B24">24</xref>], the core-directed chain growth method (CG) [<xref ref-type="bibr" rid="B25">25</xref>], and the constraint-based hydrophobic core construction method (CHCC) [<xref ref-type="bibr" rid="B26">26</xref>].</p><p>The hydrophobic zipper (HZ) strategy developed by Dill <italic>et al. </italic>is based on the hypothesis that once a hydrophobic contact is formed it cannot be broken, and other contacts are formed in accordance with already folded parts of the chain (co-operativity of folding) [<xref ref-type="bibr" rid="B23">23</xref>]. The contact interactions (CI) algorithm by Toma and Toma [<xref ref-type="bibr" rid="B24">24</xref>] combines the idea of HZ with a Monte Carlo search procedure that assigns different conformational freedom to the different residues in the chain, and thus allows previously formed contacts to be modified according to their computed mobilities. The core-directed chain growth method (CG) by Beutler and Dill [<xref ref-type="bibr" rid="B25">25</xref>] biases construction towards finding a good hydrophobic core by using a specifically designed heuristic function and by approximating the hydrophobic core with a square (in 2D) or a cube (in 3D). The constraint-based hydrophobic core construction method (CHCC) by Yue and Dill [<xref ref-type="bibr" rid="B26">26</xref>] is complete, <italic>i.e., </italic>always guaranteed to find a global optimum; it attempts to find the hydrophobic core with the minimal possible surface area by systematically introducing geometric constraints and by pruning branches of a conformational search tree. A similar, but more efficient complete constraint satisfaction search method has been proposed by Backofen <italic>et al. </italic>[<xref ref-type="bibr" rid="B27">27</xref>] for the more complex face-centred cubic lattice.</p><p>An early application of Evolutionary Algorithms to protein structure prediction was presented by Unger and Moult [<xref ref-type="bibr" rid="B14">14</xref>,<xref ref-type="bibr" rid="B15">15</xref>]. Their non-standard EA incorporates characteristics of Monte Carlo methods. Currently among the best known algorithms for the HP Protein Folding problem are various Monte Carlo algorithms, including the 'pruned-enriched Rosenbluth method' (PERM) of Grassberger <italic>et al. </italic>[<xref ref-type="bibr" rid="B16">16</xref>,<xref ref-type="bibr" rid="B18">18</xref>]. PERM is a biased chain growth algorithm that evaluates partial conformations and employs pruning and enrichment strategies to explore promising partial solutions.</p><p>Other methods for solving protein folding problems include the dynamic Monte Carlo algorithm by Ramakrishnan <italic>et al. </italic>[<xref ref-type="bibr" rid="B21">21</xref>], which introduced long-range moves involving disconnection of the chain, and the evolutionary Monte Carlo (EMC) algorithm by Liang and Wong [<xref ref-type="bibr" rid="B19">19</xref>], which works with a population of individuals that each perform Monte Carlo optimisation; a variant of EMC also reinforces certain secondary structures (alpha-helices and beta-sheets).</p><p>Finally, Chikenji <italic>et al. </italic>introduced the multi-self-overlap ensemble (MSOE) Monte Carlo method [<xref ref-type="bibr" rid="B17">17</xref>], which considers overlapping chain configurations.</p><p>Other Monte Carlo methods that have been particularly useful in off-lattice protein folding include generalised ensemble methods, such as umbrella sampling [<xref ref-type="bibr" rid="B28">28</xref>] (with replica exchange sampling [<xref ref-type="bibr" rid="B29">29</xref>,<xref ref-type="bibr" rid="B30">30</xref>] being the most common variant) and multi-canonical (entropic) sampling [<xref ref-type="bibr" rid="B30">30</xref>,<xref ref-type="bibr" rid="B31">31</xref>]. Replica exchange Monte Carlo (parallel tempering) has also been applied to the off-lattice HP model [<xref ref-type="bibr" rid="B32">32</xref>].</p><p>Currently, when applied to the square and cubic lattice HP model, none of these algorithms appears to completely dominate the others in terms of solution quality and run-time.</p></sec><sec><title>Our ACO algorithm for the 2D and 3D HP protein folding problem</title><p>In previous work, we have applied ACO to the 2D HP Protein Folding Problem [<xref ref-type="bibr" rid="B6">6</xref>,<xref ref-type="bibr" rid="B7">7</xref>]; in the following, we briefly summarise the main features of our ACO algorithm and the improvements introduced in this work. Details on our ACO framework and the new ACO-HPPFP-3 algorithm developed in the context of this work are given in the 'Methods' section.</p><p>As usual, the ants in our ACO algorithm iteratively undergo three phases: the <italic>construction phase </italic>&#x02013; during which each ant constructs a candidate solution by sequentially growing a conformation of the given HP sequence, starting from a folding point that is chosen uniformly at random among all sequence positions; the <italic>local search phase </italic>&#x02013; when ants further optimise protein conformations folded during the construction phase; and the <italic>pheromone update phase </italic>&#x02013; when ants update the pheromone matrix (representing the collective global memory of the colony) based on the energies of the conformations obtained after the construction and the local search phases. A general outline of ACO is shown in Figure <xref ref-type="fig" rid="F2">2</xref>.</p><p>The solution components used during the construction process, the local search phase and the pheromone update are local structure motifs (or relative folding directions) <italic>straight </italic>(S), <italic>left </italic>(L), <italic>right </italic>(R) in 2D, and <italic>straight </italic>(S), <italic>left </italic>(L), <italic>right </italic>(R), <italic>up </italic>(U), <italic>down </italic>(D) in 3D, which for each amino acid indicate its position on the 2D or 3D lattice relative to its direct predecessors in the given sequence (see Figure <xref ref-type="fig" rid="F3">3</xref>). In 3D, the relative folding directions are defined as in [<xref ref-type="bibr" rid="B33">33</xref>]: A local coordinate system is associated with every sequence position, such that <italic>S </italic>corresponds to the direction of the <italic>x </italic>axis, <italic>L </italic>to the direction of the <italic>y </italic>axis, and <italic>U </italic>to the direction of the <italic>z </italic>axis. Each local motif corresponds to a relative rotation of this coordinate system (for the forward construction: S = no rotation, L = 90&#x000b0; counter-clockwise around the <italic>z </italic>axis, R = 90&#x000b0; clockwise around the <italic>z </italic>axis, U = 90&#x000b0; clockwise around the <italic>y </italic>axis, D = 90&#x000b0; counter-clockwise around the <italic>y </italic>axis).</p><p>Since conformations are rotationally invariant, the position of the first two amino acids can be fixed without loss of generality. Hence, we represent candidate conformations for a protein sequence of length <italic>n </italic>by a sequence of local structure motifs of length <italic>n </italic>- 2. For example, the conformation of Sequence S1-1 shown in Figure <xref ref-type="fig" rid="F1">1</xref> corresponds to the motif sequence LSLLRRLRLLSLRRLLSL.</p><p>During the construction phase, ants fold a protein from an initial folding point by probabilistically adding one amino acid at a time based on the two sources of information: pheromone matrix values <italic>&#x003c4; </italic>(which represent previous search experience and reinforce certain structural motifs) and heuristic function values <italic>&#x003b7; </italic>(which reflect current energy of the considered structural motif); details of this process are given in the 'Methods' section. The relative importance of <italic>&#x003c4; </italic>and <italic>&#x003b7; </italic>is determined by parameters <italic>&#x003b1; </italic>and <italic>&#x003b2;</italic>, respectively, whose settings are detailed in the 'Discussion' section. Similar to other ACO algorithms known from the literature, our algorithm for the HP Protein Folding Problem incorporates a local search phase that takes the initially built protein conformation and attempts to optimise its energy further, using probabilistic long-range moves that are described in detail in the 'Methods' section.</p><p>Finally, the pheromone update procedure is based on two mechanisms: Uniform pheromone evaporation is modelled by decreasing all pheromone levels by a constant factor <italic>&#x003c1; </italic>(where 0 &#x0003c;<italic>&#x003c1; </italic>&#x02264; 1), and pheromone reinforcement is achieved by increasing the pheromone levels associated with the local folding motifs used in a fraction of the best conformations (in terms of energy values) obtained during the preceding construction and local search phase. Furthermore, to prevent search stagnation when all of the pheromone is accumulated on very few structural motifs, we introduce an additional renormalisation mechanism for the pheromone levels (controlled by a parameter <italic>&#x003b8; </italic>where 0 &#x02264; <italic>&#x003b8; </italic>&#x0003c; 1; details are given in the 'Methods' section).</p><p>Different from our previous ACO algorithms for the HP Protein Folding Problem, our new algorithm, ACO-HPPFP-3, supports the 3D HP cubic lattice model in addition to the 2D HP square lattice model. Furthermore, it uses a different iterative improvement strategy, a modified long-range move operator and a less restrictive termination criterion in its local search phase. ACO-HPPFP-3 was used in all ACO experiments described in the following.</p></sec></sec><sec><title>Results</title><p>To compare ACO-HPPFP-3 with algorithms for the 2D and 3D HP Protein Folding Problem described in the literature, we tested it on a number of standard benchmark instances as well as on two newly created data sets, one of which was obtained by randomly generating amino acid sequences with hydrophobicity value characteristic of globular proteins, while the other consists of biological sequences that were translated into HP strings using a standard hydrophobicity scale. (These new data sets will be described in more detail later in this section.)</p><sec><title>Results for standard benchmark instances</title><p>The 21 standard benchmark instances for 2D- and 3D-HP protein folding shown in Table <xref ref-type="table" rid="T1">1</xref> have been widely used in the literature [<xref ref-type="bibr" rid="B6">6</xref>,<xref ref-type="bibr" rid="B12">12</xref>,<xref ref-type="bibr" rid="B14">14</xref>-<xref ref-type="bibr" rid="B17">17</xref>,<xref ref-type="bibr" rid="B19">19</xref>,<xref ref-type="bibr" rid="B25">25</xref>]. Experiments on these standard benchmark instances were conducted by performing a number of independent runs for each problem instance (in 2D: 500 runs for sequence length <italic>n </italic>&#x02264; 50, 100 runs for 50 &#x0003c;<italic>n </italic>&#x02264; 64, and 20 runs for <italic>n &#x0003e;</italic>64; in 3D: 100 runs for each sequence). Unless explicitly indicated otherwise, we used the following parameter settings for all experiments: <italic>&#x003b1;</italic>: = 1, <italic>&#x003b2;</italic>: = 2, <italic>&#x003c1;</italic>: = 0.8 and <italic>&#x003b8;</italic>: = 0.05. Furthermore, all pheromone values were initialised to 1/3 in 2D and to 1/5 in 3D, and a population of 100 ants was used, 50% of which were allowed to perform local search. The local search procedure was terminated when no improvement in energy had been obtained after between 1 000 (for <italic>n </italic>&#x02264; 50) and 10 000 (for <italic>n </italic>&#x0003e; 50) scans through the protein sequence. We used an elitist pheromone updating scheme in which only the best 1% of all ants was allowed to perform pheromone updates. The probability <inline-graphic xlink:href="1471-2105-6-30-i2.gif"/> of keeping the previous direction when feasible during the long-range mutation move was set to 0.5 (see 'Methods' section). These settings were determined in a series of experiments in which we studied the influence of different parameter settings and will be further discussed later. All experiments were performed on PCs with 2.4 GHz Pentium IV CPUs, 256 Kb cache and 1 MB RAM, running Redhat Linux (our reference machine), and run-time was measured in terms of CPU time.</p><p>Most studies of EA and MC methods in the literature, including [<xref ref-type="bibr" rid="B12">12</xref>,<xref ref-type="bibr" rid="B14">14</xref>,<xref ref-type="bibr" rid="B15">15</xref>,<xref ref-type="bibr" rid="B19">19</xref>], report the number of valid conformations scanned during the search. This makes a performance comparison difficult, since run-time spent for backtracking and the checking of partial or infeasible conformations, which may vary substantially between different algorithms, is not accounted for. We therefore compared ACO to the best-performing algorithm from the literature for which performance data in terms of CPU time is available &#x02013; PERM [<xref ref-type="bibr" rid="B18">18</xref>] (we used the most recent implementation, which was kindly provided by P. Grassberger). We note that the most efficient PERM variant for the HP Protein Folding Problem uses an additional penalty of 0.2 for H-P contacts [<xref ref-type="bibr" rid="B34">34</xref>]. Since this corresponds to an energy function different from that of the standard HP model underlying our ACO algorithm as well as other algorithms developed in literature, we used the best performing variant of PERM [<xref ref-type="bibr" rid="B18">18</xref>] based on the standard energy function in our experiments. It may be noted that the chain growth process in PERM can start from the <italic>N</italic>- or <italic>C</italic>-terminus of the given HP sequence, and in many cases, this results in substantial differences in the performance of the algorithm. To capture this effect, we always ran PERM in both directions, and in addition to the respective average run-times, <italic>t</italic><sub>1 </sub>and <italic>t</italic><sub>2</sub>, we report the expected time for solving a given problem instance when performing both runs concurrently, <italic>t</italic><sub><italic>exp </italic></sub>= 2&#x000b7;(1/<italic>t</italic><sub>1 </sub>+ 1/<italic>t</italic><sub>2</sub>)<sup>-1</sup>. For all runs of PERM, the following parameter settings were used: inverse temperature <italic>&#x003b3;</italic>: = 26 and <italic>q</italic>: = 0.2.</p><p>The results obtained on standard 2D benchmark instances (see Table <xref ref-type="table" rid="T2">2</xref>) indicate that ACO-HPPFP-3 is competitive with the EA and MC methods described in the literature; it works very well on sequences of sizes up to 64 amino acids and produces high quality suboptimal configurations for the longest sequences considered here (85 and 100 amino acids). On average, ACO requires less CPU time than PERM for finding best known conformations for Sequence S1-8; but PERM performs better for Sequences S1-6 and S1-7 as well as for the longer sequences of 85 to 100 residues (Sequence S1-9 to S1-11).</p><p>Sequence S1-8 has a very symmetrical optimal state (see Figure <xref ref-type="fig" rid="F4">4</xref>), which &#x02013; as argued in [<xref ref-type="bibr" rid="B18">18</xref>] &#x02013; would be difficult to find for any chain growing algorithm. All algorithms from the literature which we are aware of have problems folding this sequence; ACO-HPPFP-3, on the other hand, is able to handle this instance quite well, since a number of ants folding from different starting points in conjunction with a local search procedure that involves large-scale mutations originating from different sequence positions can produce good partial folds for various parts of the chain. In comparison with other algorithms for the 2D HP Protein Folding Problem considered here (EA, EMC, MSOE), ACO-HPPFP-3 generally shows very good performance on standard benchmark instances.</p><p>In case of the 3D HP Protein Folding Problem (see Table <xref ref-type="table" rid="T3">3</xref>), the majority of algorithms for which we were able to find performance results in the literature use heuristics that are highly specialised for this problem. Unlike HZ, CG and CI, ACO-HPPFP-3 finds optimal (or best known) solution qualities for all sequences. However, PERM (when folding from the <italic>N</italic>-terminus) and CHCC consistently outperform ACO-HPPFP-3 on these standard 3D HP benchmark instances, and CG reaches best known solution qualities substantially faster in many cases. We note that for Sequence S2-3 and S2-7, PERM'S performance is greatly dependent on the folding direction.</p></sec><sec><title>Result for new biological and random data sets</title><p>To thoroughly test the performance of ACO-HPPFP-3, we created two new data sets of random and biological sequences of length &#x02248; 30 and &#x02248; 50 amino acids (ten sequences for each length; for details, see <xref ref-type="supplementary-material" rid="S1">additional data file 1</xref>). Random sequences were generated based on the observation that most globular proteins have a fairly uniform amino acid profile, and the percent of hydrophobic residues of majority of globular proteins falls in the range of 40&#x02013;50% [<xref ref-type="bibr" rid="B35">35</xref>]. Thus, the probability of generating character <italic>H </italic>at each position of a sequence was chosen to be 0.45, and in the remaining cases (<italic>i.e., </italic>with probability 0.55), we generated a P.</p><p>For the biological test-sets, ten sequences were taken from the PDBSELECT data set with homology &#x0003c; 25% from the Protein Data Bank (PDB) in order to obtain a non-redundant representative set of proteins. These protein sequences were translated into HP strings using the hydrophobicity scale classification of RASMOL [<xref ref-type="bibr" rid="B36">36</xref>], according to which the following amino acids were considered hydrophobic: <italic>Ala</italic>, <italic>Leu</italic>, <italic>Val</italic>, <italic>Ile</italic>, <italic>Pro</italic>, <italic>Phe</italic>, <italic>Met</italic>, <italic>Trp</italic>, <italic>Gly </italic>and <italic>Tyr</italic>. Non-standard amino acid symbols, such as X and Z, were skipped in this translation.</p><p>Figures <xref ref-type="fig" rid="F5">5</xref> and <xref ref-type="fig" rid="F6">6</xref> illustrate the performance of ACO-HPPFP-3 <italic>vs </italic>PERM in terms of mean CPU time over 10 runs per instance and algorithm; for practical reasons, each run was restricted to 1 CPU hour on our reference machine, and the lowest energies obtained in these runs (listed in <xref ref-type="supplementary-material" rid="S1">additional data file 1</xref>) are not necessarily optimal.</p><p>As can be seen from these results, in 2D, ACO-HPPFP-3 performs roughly comparably to PERM (PERM'S <italic>t</italic><sub><italic>exp </italic></sub>was calculated as described in the previous subsection): ACO-HPPFP-3 reaches the same energies as PERM, but on some instances, particularly of length 50, requires more run-time. In 3D, ACO-HPPFP-3 generally requires a comparable amount of run-time on sequences of length 30 and outperforms PERM on one random sequences of length 30, but performs noticeably worse on sequences of length 50 and in some cases does not reach the same energy. We also generated longer sequences of length 75; for these, ACO-HPPFP-3 failed to reach the minimal energy values obtained by PERM in a number of cases. The run-times for both algorithms are reported in detail in <xref ref-type="supplementary-material" rid="S1">Additional file 1</xref>; we note that on some sequences, the performance of PERM depends significantly on the direction of folding. Interestingly, there is no significant difference in performance between the biological and random test-sets for either PERM or ACO-HPPFP-3.</p><p>In summary, the performance of ACO-HPPFP-3 is comparable with that of PERM (the best known algorithm for the 2D and 3D HP Protein Folding Problem) on biological and random sequences of length 30&#x02013;50, but worse on longer sequences. This scaling effect is significantly more pronounced in 3D than in 2D. We note that neither ACO-HPPFP-3 nor PERM were optimised for short sequences (<italic>n </italic>&#x02264; 30), but by using parameter settings different from the ones specified earlier, the performance of both algorithms can be significantly improved in this case.</p></sec><sec><title>Characteristic performance differences between ACO and PERM</title><p>To further investigate the conditions under which ACO performs well compared to PERM, we visually examined native conformations found by both algorithms, paying special attention to conformations for which one of the two algorithms does not perform well (see Figures <xref ref-type="fig" rid="F7">7</xref> and <xref ref-type="fig" rid="F9">9</xref>). Based on our observations, we hypothesised that PERM usually performs well on sequences that have a structural nucleus in the native conformation at one of the ends of the sequence (particularly the end from which PERM starts folding the sequence); on the other hand, it has trouble folding sequences whose native conformations have structural nuclei in the middle of the sequence. In comparison, ACO is not significantly affected by the location of the structural nucleus (or multiple nuclei) in the sequence, since it uses construction from different folding points as well as the long-range mutation moves in local search, which can initiate refolding from arbitrary sequence positions. Here, we use the term 'structural nucleus' to refer to a predominantly locally folded part of the chain that can be relatively easily folded sequentially based on local sequence information [<xref ref-type="bibr" rid="B37">37</xref>]. For most sequences considered in this study, we observed a single structural nucleus, which is not surprising, given their relatively short length; however, it is generally believed that longer sequences have multiple folding nuclei [<xref ref-type="bibr" rid="B37">37</xref>].</p><p>The left side of Figure <xref ref-type="fig" rid="F7">7</xref> shows an example of a relatively short biological sequence (B50-7, 45 amino acids) with a unique native hydrophobic core in the 2D HP model. (This is rare for HP sequences, which usually have a high ground state and hydrophobic core degeneracy: According to our observations, of the 11 standard benchmark instances in 2D, only Sequences S1-1, S1-3, S1-4 have a unique hydrophobic core; in 3D, none of the sequences studied here have a unique hydrophobic core.) This sequence has no structural nuclei at its ends; instead, the two ends interact with each other. ACO-HPPFP-3 outperforms PERM by a factor of 2 on this sequence in terms of CPU time: using a cut-off time of 1 CPU hour per run, PERM found the optimum with energy -17 in an average run-time of 284.06 CPU seconds (<italic>t</italic><sub>1 </sub>= 271 sec, <italic>t</italic><sub>2 </sub>= 299 sec), while using the same cut-off time and machine, ACO-HPPFP-3 found the optimum in an average run-time of 130 CPU seconds.</p><p>We also designed two additional sequences, D-1 and D-2, of length 50 and 60, respectively, that have a unique native state in which both ends of the sequence interact with each other (see Figure <xref ref-type="fig" rid="F8">8</xref>). Sequence D-1 also has a structural nucleus near its <italic>C</italic>-terminus. When testing the performance of PERM and ACO-HPPFP-3 on these sequences, we found that on D-1, ACO-HPPFP-3 requires a mean run-time of 236 CPU seconds, compared to <italic>t</italic><sub>1 </sub>= 3 795, <italic>t</italic><sub>2 </sub>= 1, <italic>t</italic><sub><italic>exp </italic></sub>= 2 CPU seconds for PERM (values are based on 100 successful runs). When this sequence was reversed, PERM started folding the sequence from the structural nucleus, and its mean run-time dropped to 1 CPU second. A result similar to that for sequence B50-7 was obtained for Sequence D-2, which has no structural nuclei at the ends, but a native state in which the ends interact with each other. Here, ACO-HPPFP-3 was found to require a mean run-time of 951 CPU seconds (again, mean run-times were obtained from 100 successful runs), compared to <italic>t</italic><sub>1 </sub>= 9 257, <italic>t</italic><sub>2 </sub>= 19 356, <italic>t</italic><sub><italic>exp </italic></sub>= 12 525 CPU seconds for PERM; as expected, in this case, reversing the folding order of the sequence did not cause a decrease in PERM'S run-time.</p><p>We also analysed native conformations of sequences on which PERM outperforms ACO and observed that the end from which PERM starts folding is relatively compact and forms a structural nucleus in the resulting conformation.</p><p>An example of a conformation with the structural nucleus at the beginning of the sequence (near the <italic>N</italic>-terminus, <italic>i.e., </italic>residue 1) is shown in the right panel of Figure <xref ref-type="fig" rid="F7">7</xref>. For this biological sequence (B50-5, 53 amino acids), PERM finds an optimal conformation with an energy of -22 in <italic>t</italic><sub>1 </sub>= 5, <italic>t</italic><sub>2 </sub>= 118, <italic>t</italic><sub><italic>exp </italic></sub>= 9 CPU seconds, while the average run-time for ACO-HPPFP-3 is 820 CPU seconds. Our ACO algorithm generally performs worse than PERM on sequences that have structural nuclei at the ends, because it tends to spend substantial amounts of time compacting local regions in the interior of the sequence, while PERM folds more systematically from one end. These observations also hold in 3D, as seen from two random sequences folded in 3D (see Figure <xref ref-type="fig" rid="F9">9</xref>).</p><p>To further investigate our hypothesis, we studied differences between the distributions of native conformations found by ACO-HPPFP-3 and PERM, respectively. For this purpose, we introduced the notion of <italic>relative H-H contact </italic>order, which captures arrangement of H residues in the core of the folded protein, and thus determines the topology of the conformation (the closely related concept of contact order was first defined in [<xref ref-type="bibr" rid="B38">38</xref>]). Relative H-H contact order is defined as follows:</p><p><inline-graphic xlink:href="1471-2105-6-30-i3.gif"/></p><p>where <italic>l </italic>is the number of H-H contacts, <italic>n </italic>is the number of H residues in the sequence, and <italic>i </italic>and <italic>j </italic>are interacting H residues that are not neighbours in the chain. Intuitively, <italic>CO</italic><sub><italic>H-H </italic></sub>specifies the average sequence separation between H-H residues in contact per H in the sequence.</p><p>Figure <xref ref-type="fig" rid="F10">10</xref> shows cumulative frequency distributions of relative H-H contact order values for sets of native conformations of a 2D (the left panel) and 3D (the right panel) standard benchmark instance, respectively, found by ACO-HPPFP-3 and PERM over 500 independent runs, each of which was terminated as soon as a native conformation had been found. These results show that the ACO algorithm finds a set of native conformations with a wider range of H-H contact order values than PERM; in particular, ACO-HPPFP-3 finds conformations with high relative H-H contact oder as compared to PERM (more distant parts of the chain interact; for example, relative <italic>CO</italic><sub><italic>H-H </italic></sub>= 0.324 for Sequence S1-7 in 2D and relative <italic>CO</italic><sub><italic>H-H </italic></sub>= 0.75 for Sequence S2-5 in 3D are not found by PERM; similar results were obtained for other sequences), which further supports our hypothesis that both, in 2D and 3D, PERM is biased toward a more restricted set of native conformations. We performed analogous experiments for the case where PERM is allowed to keep certain statistics from one run to another as in [<xref ref-type="bibr" rid="B18">18</xref>] (runs are no longer independent) and found no significant differences in the set of conformations obtained (data not shown).</p><p>To further examine the topological differences between ensembles of native conformations found by the two algorithms, we also looked at the hydrophobic solvent accessible area (defined as <italic>SA</italic><sub><italic>H-H</italic></sub>: = &#x02211;<sub><italic>h</italic></sub><italic>E</italic><sub><italic>h</italic></sub>, where <italic>E</italic><sub><italic>h </italic></sub>is the number of unoccupied lattice sites around H residue <italic>h</italic>), the number of H-H contacts, and the H-H contact order as a function of the length of the sequence prefix (starting from the <italic>N</italic>-terminus of the sequence &#x02013; where PERM starts folding). In this analysis, we calculated the properties of interest mentioned above for the native conformations found in 100 independent runs by ACO-HPPFP-3 and PERM, and plotted the mean values of the respective quantities as functions of the sequence prefix length (see Figures <xref ref-type="fig" rid="F11">11</xref>, <xref ref-type="fig" rid="F12">12</xref> and <xref ref-type="fig" rid="F13">13</xref>).</p><p>As seen in Figure <xref ref-type="fig" rid="F11">11</xref>, ACO-HPPFP-3 is less greedy than PERM, both in 2D (left side) and in 3D (right side), and it tends to leave more lattice sites around H residues accessible for future contacts with other H residues that appear later in the chain. This is also reflected in the mean number of H-H contacts formed when folding prefixes of increasing length; ACO-HPPFP-3 tends to form fewer H-H contacts than PERM for short and medium size prefixes (see Figure <xref ref-type="fig" rid="F12">12</xref>). By examining the dependence of absolute H-H contact order (defined as <inline-graphic xlink:href="1471-2105-6-30-i4.gif"/>, the average sequence separation per H-contact) on prefix length, we furthermore observed that different from PERM, ACO-HPPFP-3 realises the bulk of its local H-H interactions in the middle of the given sequence (see Figure <xref ref-type="fig" rid="F13">13</xref>). This further confirms that ACO is capable of finding native conformations with structural folding nuclei that are not located at or near the end of a given protein sequence. The results illustrated in Figures <xref ref-type="fig" rid="F11">11</xref>, <xref ref-type="fig" rid="F12">12</xref> and <xref ref-type="fig" rid="F13">13</xref> are typical for all 2D and 3D HP instances we studied.</p></sec></sec><sec><title>Discussion</title><p>Although conceptually rather simple, our ACO algorithm is based on a number of distinct components and mechanisms. A natural question to ask is whether and to which extent each of these contributes to the performance reported in the previous section. A closely related questions concerns the impact of parameter settings on the performance of ACO-HPPFP-3; further details concerning parameters can be found in the 'Methods' section. To address these questions, we conducted several series of experiments. In this context, we primarily used three standard test sequences: Sequence S1-7 of length 60 and Sequence S1-8 of length 64 (long sequences) in 2D, as well as Sequence S2-5 of length 48 in 3D (all standard benchmark sequences for 3D are 48 amino acids in length); these sequences were chosen because the CPU time required to find the best known solutions was sufficiently small to perform a large number of runs (100&#x02013;200 per instance).</p><p>Following the methodology of Hoos and St&#x000fc;tzle [<xref ref-type="bibr" rid="B39">39</xref>], we measured run-time distributions (RTDs) of our ACO algorithm, which represent the (empirical) probability distribution over the run-time required to reach (or exceed) a given solution quality; the solution qualities used here are the known optima or best known energies for the respective sequences.</p><sec><title>Pheromone values and heuristic information</title><p>Two important components of any ACO algorithm are the heuristic function, which indicates the desirability of using particular solution components during the construction phase, and the pheromone values, which represent information learned over multiple iterations of the algorithm. Three parameters control the influence of the pheromone information versus heuristic information on the construction of candidate solutions: the relative weight of the pheromone information, <italic>&#x003b1;</italic>; the relative weight of the heuristic information, <italic>&#x003b2;</italic>; and the pheromone persistence, <italic>&#x003c1; </italic>(see also 'Methods' section).</p><p>In the first experiment, we investigated the impact of pheromone (<italic>&#x003b1;</italic>) and heuristic information (<italic>&#x003b2;</italic>), and their relative importance for the performance of our ACO algorithm. As can be seen from the results shown in Figure <xref ref-type="fig" rid="F14">14</xref>, both the pheromone values and the heuristic information are important in 2D and 3D; when ignoring either of them (<italic>&#x003b1;</italic>: = 0 or <italic>&#x003b2;</italic>: = 0, respectively), the algorithm performs worse, particularly for longer 2D sequences (<italic>n </italic>&#x0003e; 50; for short 2D sequences with <italic>n </italic>&#x02264; 50, the pheromone matrix does not appear to play a significant role, since sequences are generally easily solved by the subsidiary local search procedure alone). The optimal settings for <italic>&#x003b1; </italic>and <italic>&#x003b2; </italic>for most problem instances seem to be around <italic>&#x003b1; </italic>= 1 and <italic>&#x003b2; </italic>= 2, as shown in Figure <xref ref-type="fig" rid="F14">14</xref>. It should be noted that in 3D, pheromone information appears to be less important than in 2D, which suggests that the specific solution components used in our algorithms are somewhat less meaningful in 3D.</p><p>The goal of the next experiment was to further explore the role of experience accumulated over previous iterations in the form of pheromone values. To this end, we varied the pheromone persistence, <italic>&#x003c1;</italic>, while keeping other parameters constant. The results shown in Figure <xref ref-type="fig" rid="F15">15</xref> show that in 2D, it is important to utilise past experience (<italic>i.e., </italic>to choose <italic>&#x003c1; </italic>&#x0003e; 0), but also to weaken its impact over time (<italic>i.e., </italic>to use <italic>&#x003c1; </italic>&#x0003c; 1). At the same time, closer examination revealed that for <italic>&#x003c1; </italic>&#x0003e; 0, attrition, <italic>i.e., </italic>the construction of inextensible partial conformations, is a major problem, which is a result of the accumulation of pheromone from multiple conformations. This is why the backtracking mechanism described in the 'Methods' section is extremely important for the performance of our algorithm in 2D. In 3D, for the previously stated reasons and because of the fact that the attrition problem is much less severe, the impact of the persistence parameter is generally smaller than in 2D.</p></sec><sec><title>Ant colony size and length of local search phase</title><p>During the initial empirical evaluation of our algorithm, we observed that ant colony size (<italic>i.e., </italic>the number of ants used in each iteration) and the duration of local search (expressed as a number of non-improving search steps we are willing to consider before terminating the local search procedure) are correlated and significantly affect its performance. To further investigate this phenomenon, we conducted additional experiments in which we fixed the ant colony size and varied the maximal number of non-improving steps during local search, and vice versa. In this series of experiments, different colony sizes were considered, from a single ant up to a population of 5 000 ants, and the number of non-improving steps in local search was varied from 100 to 10 000. The results, shown in Figure <xref ref-type="fig" rid="F16">16</xref>, indicate that there is an optimal colony size of about 100 ants for both, 2D and 3D; ACO-HPPFP-3 is quite robust with respect to colony size, but performance decreases for very small or very large colony sizes. Intuitively, this is the case because the use of a population of ants provides diversification to the search process, which enables it to explore different regions of the underlying search space; very small populations provide insufficient diversification, and the search stagnates easily, while for very large populations, the additional time required for running the search phases for each ant on the same sequential machine is not amortised any longer by increased efficiency of the overall search process.</p><p>Our results also indicate that the performance of ACO-HPPFP-3 is more sensitive to the number of non-improving steps than to ant colony size. The optimal value for the maximum number of non-improving steps tolerated (per ant) before the local search phase terminates was found to be around 1 000 for short 2D sequences (<italic>n </italic>&#x02264; 50) and around 10 000 for long 2D sequences (<italic>n </italic>&#x0003e; 50); the latter value also appeared to be optimal for all 3D sequences considered here. This observation follows the intuition that more degrees of freedom, as present for longer sequences and in higher dimensions, require more time for local optimisation, since for any conformation, improving neighbours tend to be rarer and hence harder to find.</p></sec><sec><title>Selectivity and persistence of local search</title><p>As described in the 'Methods' section, our ACO algorithm uses selective local search, <italic>i.e., </italic>local search is only performed on a certain fraction of the lowest energy conformations. We observed that ACO-HPPFP-3 is fairly robust with respect to the fraction of conformations to which local search is applied; good performance was obtained for local search selectivity values between 5% and 50%, but performance was found to deteriorate when local search is performed by all ants. Intuitively, similar to colony size, local search selectivity has an impact on search diversification. If too few ants perform local search, insufficient diversification is achieved, which typically leads to premature stagnation of the search process. On the other hand, if local search is performed by too many ants, the resulting substantial overhead in run-time can no longer be amortised by increased search efficiency.</p><p>Similarly to selective local search, pheromone update was performed only by a certain fraction of so-called 'elitist ants' whose solution quality after the local search phase is highest within the population. As in the case of local search selectivity, ACO-HPPFP-3 shows robustly high performance for elitist fractions between 1% and 50% (results are not shown here), but performance deteriorates markedly when all ants in the colony are allowed to update the pheromone matrix.</p><p>In a final experiment, we studied the impact of the persistence of local search, <italic>i.e., </italic>of the probability <inline-graphic xlink:href="1471-2105-6-30-i2.gif"/> of retaining (feasible) previous relative directions during long-range mutation moves. As can be seen in Figure <xref ref-type="fig" rid="F17">17</xref>, good performance is generally obtained for <inline-graphic xlink:href="1471-2105-6-30-i2.gif"/> values between 0.3 and 0.7. Both extreme cases, <inline-graphic xlink:href="1471-2105-6-30-i2.gif"/> = 0, which corresponds to an extremely H-contact greedy mutation operator, and <inline-graphic xlink:href="1471-2105-6-30-i2.gif"/> = 1, in which refolding always follows previous directions when feasible, result in a substantial decrease in performance. When <inline-graphic xlink:href="1471-2105-6-30-i2.gif"/> = 0, the decrease of performance in 3D is smaller than in 2D, because there is no severe attrition as in 2D, where greedy placement of H residues leads to early formation of very compact partial conformations, which often cannot be extended into valid complete conformations. The performance decrease for high <inline-graphic xlink:href="1471-2105-6-30-i2.gif"/> values is due to insufficient ability of the chain to fold into a new conformation that accommodates well the local change in structure which triggered the refolding.</p></sec></sec><sec><title>Conclusions</title><p>In this work, we have shown that ant colony optimisation (ACO) can be applied in a rather straight-forward way to the 2D and 3D HP Protein Folding Problems. Even though our ACO-HPPFP-3 algorithm is based on very simple structure components (single relative directions) and a simple subsidiary local search procedure (iterative first improvement), it performs fairly well compared to other algorithms and specialised heuristics on the benchmark instances considered here, particularly in 2D. The only non-specialised algorithm that typically performs better than our ACO algorithm, both in 2D and 3D, is PERM. We observed that, particularly in 3D, the run-time required by ACO-HPPFP-3 for finding minimum (or best known) energy conformations scales worse with sequence length than PERM. However, our results show that our ACO algorithm finds a different ensemble of native conformations compared to PERM, and has less difficulty folding sequences whose native states contain structural nuclei located in the middle rather than at the ends of a given sequence, as well as sequences with structures in which the ends interact. We found that two major components of ACO-HPPFP-3 &#x02013; the pheromone values, which capture experience accumulated over multiple iterations of the search process and from multiple conformations, as well as the heuristic information that provides myopic guidance to the folding process &#x02013; play a significant role for longer 2D sequences and, to a lesser extent, for 3D sequences, which suggests that in 3D, it may be preferable to associate pheromone values with more complex solution components.</p><p>We also found that the subsidiary local search procedure is crucial for the performance of the algorithm; in particular, to ensure that high-quality conformations are obtained, it is very important to allow the local search procedure to run sufficiently long. In an earlier version of our algorithm [<xref ref-type="bibr" rid="B7">7</xref>], we used substantially more stringent termination criteria, which forced us to additionally use non-greedy local search (probabilistic iterative improvement, which accepts worsening steps) in addition to the greedy local search procedure used here. The results presented in this study indicate that by using a new and simpler local search procedure, ACO-HPPFP-3 achieves better performance; this is probably due to the fact that the new local search procedure is based on a type of long-range move that leads to a larger effective search neighbourhood.</p><p>We have shown that all components of our ACO algorithms contribute to its performance. In particular, its performance is affected by the following components and parameters (listed in the order of decreasing impact): pheromone values, termination criterion for local search, persistence of long-range moves, ant colony size, pheromone persistence, heuristic function, selectivity of local search, and selectivity of pheromone update (<italic>i.e., </italic>fraction of elitist ants).</p><p>Because of its ability to find more balanced ensembles of minimum (or close to minimum) energy conformations, our new ACO algorithm can greatly facilitate investigations of the topology and location of structural nuclei, which we plan to undertake in future work. Finally, while HP protein folding problems are of considerable interest because of their conceptual simplicity, ultimately, most applications of protein folding algorithms require the use of more realistic models of protein structure. Since it does not rely on heuristics and properties that are specific to the HP model and yet performs very well on this restrictive, but not entirely unrealistic abstract model, we believe that relatively straight-forward extensions of our ACO algorithm to more complex and realistic models of protein structure hold significant promise.</p></sec><sec sec-type="methods"><title>Methods</title><p>Our new ACO algorithm, ACO-HPPFP-3, iterates construction, local search, and pheromone update phases until a termination condition is satisfied; in the context of this work, we mostly terminated the algorithm upon reaching a given energy threshold. In the following, we describe the three search phases in detail.</p><sec><title>Construction phase, pheromone and heuristic values</title><p>During the construction phase of ACO-HPPFP-3, each ant first determines a starting point within the given protein sequence; this is done by uniform random choice. From this starting point, the sequence is folded in both directions, adding one residue at a time. Each ant performs probabilistic chain-growth construction of the protein conformation, where in every step, the structure is extended either to the left or to the right, such that the ratio of unfolded residues at each end of the protein remains (roughly) unchanged.</p><p>Here, we assume that folding is performed in 3D (the 2D case is handled analogously by considering three relative directions {<italic>S, L, R</italic>} instead of five {<italic>S, L, R, U, D</italic>}, see also [<xref ref-type="bibr" rid="B6">6</xref>]). The relative directions in which the conformation is extended in each construction step are determined probabilistically based on a heuristic function <italic>&#x003b7;</italic><sub><italic>i</italic>,<italic>d </italic></sub>and pheromone values <italic>&#x003c4;</italic><sub><italic>i</italic>,<italic>d</italic></sub>, according to the formula:</p><p><inline-graphic xlink:href="1471-2105-6-30-i5.gif"/></p><p>The pheromone values <italic>&#x003c4;</italic><sub><italic>i</italic>,<italic>d </italic></sub>indicate the desirability of using the local structure motif with relative direction <italic>d </italic>&#x02208; {<italic>S, L, R, U, D</italic>} at sequence position <italic>i</italic>. Initially, all <italic>&#x003c4;</italic><sub><italic>i</italic>,<italic>d </italic></sub>are equal, such that local structure motifs are chosen in an unbiased way; but throughout the search process, the pheromone values are updated to bias folding towards the use of local motifs that occur in low-energy structures (the updating mechanism will be described in more detail later). The heuristic values <italic>&#x003b7;</italic><sub><italic>i</italic>,<italic>d </italic></sub>are based on the energy function <italic>E</italic>. They are defined according to the Boltzman distribution as <italic>&#x003b7;</italic><sub><italic>i</italic>,<italic>d</italic></sub>: = <inline-graphic xlink:href="1471-2105-6-30-i6.gif"/>, where <italic>&#x003b3; </italic>is a parameter called the inverse temperature (as in [<xref ref-type="bibr" rid="B18">18</xref>]), and <italic>h</italic><sub><italic>i</italic>,<italic>d </italic></sub>is the number of new H-H contacts achieved by placing amino acid <italic>i </italic>at the position specified by direction <italic>d</italic>.</p><p>During construction, it may happen that the chain cannot be extended without running into itself. This situation is called <italic>attrition</italic>, and our algorithm overcomes it as follows: First, starting at the end at which attrition occurred, half of the sequence that has been folded up to this point is unfolded. Then, this segment of the chain is refolded; the first residue (<italic>i.e., </italic>the last one that was unfolded) is placed such that its relative direction differs from what it had been when attrition occurred, while all of the subsequent residues are folded in a feasible direction that is chosen uniformly at random. This backtracking mechanism is particularly important for longer protein sequences in 2D, where infeasible conformations are frequently encountered during the construction phase.</p></sec><sec><title>Local search</title><p>The local search phase is based on a long-range mutation move that has been designed to avoid infeasible conformations. It also has a number of important advantages over the more commonly used point mutation moves or Monte Carlo moves (<italic>i.e., </italic>the end, crankshaft and corner moves [<xref ref-type="bibr" rid="B40">40</xref>]): It is easy to implement; it decreases the number of infeasible conformations encountered, even when the protein is very compact (at high densities); it considers a larger neighbourhood that subsumes the single point mutation neighbourhood; and it has some validity in terms of the physical processes taking place during the protein folding process. Similar attempts have been previously undertaken, but these involved disconnection of the chain [<xref ref-type="bibr" rid="B21">21</xref>].</p><p>From studies of protein folding dynamics, it is known that proteins display a broad range of motions that range from localised motions to slow large-scale movements [<xref ref-type="bibr" rid="B37">37</xref>]. Inspired by this complex process, we designed a long-range mutation move that starts by selecting a residue whose relative direction is randomly mutated and then adapts the rest of the chain by probabilistically changing relative directions starting from this initial position [<xref ref-type="bibr" rid="B7">7</xref>]. During this adaptation, for each residue, with a probability <inline-graphic xlink:href="1471-2105-6-30-i2.gif"/> (0 &#x02264; <inline-graphic xlink:href="1471-2105-6-30-i2.gif"/> &#x02264; 1) its previous relative direction, if it is still feasible, is left unchanged, and otherwise (<italic>i.e., </italic>with probability 1 - <inline-graphic xlink:href="1471-2105-6-30-i2.gif"/>, or if the previous direction has become infeasible), a different relative direction is chosen, where the probability for each direction <italic>d </italic>is proportional to the corresponding heuristic value <italic>&#x003b7;</italic><sub><italic>i</italic>,<italic>d</italic></sub>. Formally, this can be written as follows:</p><p><inline-graphic xlink:href="1471-2105-6-30-i7.gif"/></p><p>where <italic>P</italic>[<italic>d</italic><sub><italic>i </italic></sub>: = <inline-graphic xlink:href="1471-2105-6-30-i8.gif"/>] is the probability of choosing direction <inline-graphic xlink:href="1471-2105-6-30-i8.gif"/> as the relative direction <italic>d</italic><sub><italic>i </italic></sub>at sequence position <italic>i</italic>. Unlike in our previous implementation [<xref ref-type="bibr" rid="B7">7</xref>], the local search phase of our new ACO algorithm is a simple iterative first improvement procedure that is based on this long-range mutation move. The outline of this local search procedure is shown in Figure <xref ref-type="fig" rid="F18">18</xref>. Iterative first improvement accepts a new conformation generated via long-range mutation only if the solution quality of a new conformation <italic>c</italic>' improves over the current solution quality (energy) of <italic>c. </italic>This search process is greedy in the sense that it does not allow worsening steps, and it is terminated when no improving steps have been found after a specific number of scans through the chain (this number is a parameter of the algorithm). Since this local search procedure has a relatively high time-complexity, in each iteration of ACO-HPPFP-3 it is only applied to a certain fraction of the highest-quality conformations constructed by the ants in the preceding construction phase.</p></sec><sec><title>Update of the pheromone values</title><p>After each construction and local search phase pheromones are updated according to</p><p><italic>&#x003c4;</italic><sub><italic>i</italic>,<italic>d</italic></sub>:= <italic>&#x003c1;</italic>&#x000b7;<italic>&#x003c4;</italic><sub><italic>i</italic>,<italic>d</italic></sub>, &#x000a0;&#x000a0;&#x000a0; (4)</p><p>where 0 &#x0003c;<italic>&#x003c1; </italic>&#x02264; 1 is the pheromone persistence, a parameter that determines how much of the information gathered in previous iterations is retained. Subsequently, selected ants with low-energy conformations update the pheromone values according to</p><p><italic>&#x003c4;</italic><sub><italic>i</italic>,<italic>d</italic></sub>:= <italic>&#x003c4;</italic><sub><italic>i</italic>,<italic>d </italic></sub>+ &#x00394;<sub><italic>i</italic>,<italic>d</italic>,<italic>c</italic></sub>, &#x000a0;&#x000a0;&#x000a0; (5)</p><p>where &#x00394;<sub><italic>i</italic>,<italic>d</italic>,<italic>c </italic></sub>is the relative solution quality of the given ant's candidate conformation <italic>c </italic>if that conformation contains local structure motif <italic>d </italic>at sequence position <italic>i</italic>, and zero otherwise.</p><p>As a further mechanism for preventing search stagnation, we use an additional renormalisation of the pheromone values that is conceptually similar to the method used in <italic>MAX - MIN</italic> Ant System [<xref ref-type="bibr" rid="B41">41</xref>]: After the standard pheromone updates according to Equations 3 and 4, all <italic>&#x003c4; </italic>values are normalised such that &#x02211;<sub><italic>d</italic>&#x02208;{<italic>S</italic>,<italic>L</italic>,<italic>R</italic>,<italic>U</italic>,<italic>D</italic>} </sub><italic>&#x003c4;</italic><sub><italic>i</italic>,<italic>d </italic></sub>= 1 for every residue <italic>i</italic>; additionally, whenever for a given sequence position <italic>i </italic>the minimal normalised pheromone value (min<sub><italic>d</italic>&#x02208;{<italic>S</italic>,<italic>L</italic>,<italic>R</italic>,<italic>U</italic>,<italic>D</italic>} </sub><italic>&#x003c4;</italic><sub><italic>i</italic>,<italic>d</italic></sub>)/(&#x02211;<sub><italic>d</italic>&#x02208;{<italic>S</italic>,<italic>L</italic>,<italic>R</italic>,<italic>U</italic>,<italic>Dr</italic>} </sub><italic>&#x003c4;</italic><sub><italic>i</italic>,<italic>d</italic></sub>) falls below a threshold <italic>&#x003b8; </italic>(which is a parameter of the algorithm), the minimal <italic>&#x003c4;</italic><sub><italic>i</italic>,<italic>d </italic></sub>value is set to <italic>&#x003b8;</italic>, while the maximal <italic>&#x003c4;</italic><sub><italic>i</italic>,<italic>d </italic></sub>value is decreased by <italic>&#x003b8; </italic>- min<sub><italic>d</italic>&#x02208;{<italic>S</italic>,<italic>L</italic>,<italic>R</italic>,<italic>U</italic>,<italic>D</italic>} </sub><italic>&#x003c4;</italic><sub><italic>i</italic>,<italic>d</italic></sub>. (If there is more than one minimal <italic>&#x003c4;</italic><sub><italic>i</italic>,<italic>d </italic></sub>value, all of these are increased to <italic>&#x003b8;</italic>, and if there is more than one maximal <italic>&#x003c4;</italic><sub><italic>i</italic>,<italic>d </italic></sub>value, one of them is chosen uniformly at random.) This guarantees that the probability of selecting an arbitrary local structure motif for the corresponding sequence position does not become arbitrarily small, and hence ensures the probabilistic approximate completeness of our algorithm (see [<xref ref-type="bibr" rid="B42">42</xref>]).</p></sec><sec><title>Implementation details and availability</title><p>ACO-HPPFP-3 has been implemented in C++ and compiled using gcc (version 3.3.3) for the Linux operating system; a Linux executable is available from <ext-link ext-link-type="uri" xlink:href="http://www.cs.ubc.ca/labs/beta/Projects/ACO-HPPFP"/>.</p></sec></sec><sec><title>Authors' contributions</title><p>Both authors contributed to the development of ideas, design of experiments, analysis and interpretation of results, and the writing of the paper. AS implemented the proposed method and performed the computational experiments.</p></sec><sec sec-type="supplementary-material"><title>Supplementary Material</title><supplementary-material content-type="local-data" id="S1"><caption><title>Additional File 1</title><p><bold>Additional information on biological and randomly generated HP sequences. </bold>This file (in .pdf format) contains tables providing additional information on our new test sets of biological and randomly generated HP sequences and the results from our computational experiment with ACO and PERM.</p></caption><media xlink:href="1471-2105-6-30-S1.pdf" mimetype="application" mime-subtype="pdf"><caption><p>Click here for file</p></caption></media></supplementary-material></sec></body><back><ack><sec><title>Acknowledgements</title><p>This work has been supported by an NSERC Postgraduate Scholarship (PGS-A) held by AS and by HH's NSERC Individual Research Grant #238788. We thank Peter Grassberger for kindly providing us with his implementation of PERM and for very useful feedback on earlier versions of this paper. We also thank the anonymous reviewers for helpful suggestions.</p></sec></ack><ref-list><ref id="B1"><citation citation-type="other"><person-group person-group-type="author"><name><surname>Dorigo</surname><given-names>M</given-names></name><name><surname>Maniezzo</surname><given-names>V</given-names></name><name><surname>Colorni</surname><given-names>A</given-names></name></person-group><article-title>Positive feedback as a search strategy</article-title><source>Tech rep, 91-016, Dip Elettronica, Politecnico di Milano, Italy</source><year>1991</year></citation></ref><ref id="B2"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Dorigo</surname><given-names>M</given-names></name><name><surname>Maniezzo</surname><given-names>V</given-names></name><name><surname>Colorni</surname><given-names>A</given-names></name></person-group><article-title>The Ant System: Optimization by a colony of cooperating agents</article-title><source>IEEE Transactions on Systems, Man, and Cybernetics-Part B</source><year>1996</year><volume>26</volume><fpage>29</fpage><lpage>41</lpage><pub-id pub-id-type="doi">10.1109/3477.484436</pub-id></citation></ref><ref id="B3"><citation citation-type="book"><person-group person-group-type="author"><name><surname>Dorigo</surname><given-names>M</given-names></name><name><surname>Di Caro</surname><given-names>G</given-names></name></person-group><person-group person-group-type="editor"><name><surname>Corne D, Dorigo M, Glover F</surname></name></person-group><article-title>New Ideas in Optimization</article-title><source>New Ideas in Optimization</source><year>1999</year><publisher-name>McGraw-Hill</publisher-name></citation></ref><ref id="B4"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Dorigo</surname><given-names>M</given-names></name><name><surname>Di Caro</surname><given-names>G</given-names></name><name><surname>Gambardella</surname><given-names>LM</given-names></name></person-group><article-title>Ant Algorithms for Discrete Optimization</article-title><source>Artificial Life</source><year>1999</year><volume>5</volume><fpage>137</fpage><lpage>172</lpage><pub-id pub-id-type="pmid">10633574</pub-id><pub-id pub-id-type="doi">10.1162/106454699568728</pub-id></citation></ref><ref id="B5"><citation citation-type="book"><person-group person-group-type="author"><name><surname>Dorigo</surname><given-names>M</given-names></name><name><surname>St&#x000fc;tzle</surname><given-names>T</given-names></name></person-group><source>Ant Colony Optimization</source><year>2004</year><publisher-name>The MIT Press</publisher-name></citation></ref><ref id="B6"><citation citation-type="book"><person-group person-group-type="author"><name><surname>Shmygelska</surname><given-names>A</given-names></name><name><surname>Hernandez</surname><given-names>R</given-names></name><name><surname>Hoos</surname><given-names>HH</given-names></name></person-group><article-title>An Ant Colony Optimization Algorithm for the 2D HP Protein Folding Problem</article-title><source>Proc of the 3rd Intl Workshop on Ant Algorithms, ANTS LNCS 2463</source><year>2002</year><publisher-name>Springer Verlag</publisher-name><fpage>40</fpage><lpage>52</lpage></citation></ref><ref id="B7"><citation citation-type="book"><person-group person-group-type="author"><name><surname>Shmygelska</surname><given-names>A</given-names></name><name><surname>Hoos</surname><given-names>HH</given-names></name></person-group><article-title>An Improved Ant Colony Optimisation Algorithm for the 2D HP Protein Folding Problem</article-title><source>Proc of the 16th Canadian Conference on Artificial Intelligence, LNCS 2671</source><year>2003</year><publisher-name>Springer Verlag</publisher-name><fpage>400</fpage><lpage>17</lpage></citation></ref><ref id="B8"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Unger</surname><given-names>R</given-names></name><name><surname>Moult</surname><given-names>J</given-names></name></person-group><article-title>Finding the lowest Free-Energy Conformation of a protein is an NP-hard problem &#x02013; Proof and Implications</article-title><source>Bull Math Biol</source><year>1993</year><volume>55</volume><fpage>1183</fpage><lpage>1198</lpage><pub-id pub-id-type="pmid">8281131</pub-id></citation></ref><ref id="B9"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Lau</surname><given-names>KF</given-names></name><name><surname>Dill</surname><given-names>KA</given-names></name></person-group><article-title>lattice statistical mechanics model of the conformation and sequence space of proteins</article-title><source>Macromolecules</source><year>1989</year><volume>22</volume><fpage>3986</fpage><lpage>3997</lpage><pub-id pub-id-type="doi">10.1021/ma00200a030</pub-id></citation></ref><ref id="B10"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Richards</surname><given-names>FM</given-names></name></person-group><article-title>Areas, volumes, packing, and protein structures</article-title><source>Annu Rev Biophys Bioeng</source><year>1977</year><volume>6</volume><fpage>151</fpage><lpage>176</lpage><pub-id pub-id-type="pmid">326146</pub-id><pub-id pub-id-type="doi">10.1146/annurev.bb.06.060177.001055</pub-id></citation></ref><ref id="B11"><citation citation-type="book"><person-group person-group-type="author"><name><surname>Krasnogor</surname><given-names>N</given-names></name><name><surname>Pelta</surname><given-names>D</given-names></name><name><surname>Lopez</surname><given-names>PM</given-names></name><name><surname>Mocciola</surname><given-names>P</given-names></name><name><surname>de la Canal</surname><given-names>E</given-names></name></person-group><person-group person-group-type="editor"><name><surname>Alpaydin C</surname></name></person-group><article-title>Genetic algorithms for the protein folding problem: a critical view</article-title><source>Proc of Engineering of Intelligent Systems</source><year>1998</year><publisher-name>ICSC Academic Press</publisher-name><fpage>353</fpage><lpage>360</lpage></citation></ref><ref id="B12"><citation citation-type="other"><person-group person-group-type="author"><name><surname>Krasnogor</surname><given-names>N</given-names></name><name><surname>Hart</surname><given-names>WE</given-names></name><name><surname>Smith</surname><given-names>J</given-names></name><name><surname>Pelta</surname><given-names>DA</given-names></name></person-group><article-title>Protein structure prediction with evolutionary algorithms</article-title><source>Proc of the Genetic and Evolutionary Computation conference</source><year>1999</year><fpage>1596</fpage><lpage>1601</lpage></citation></ref><ref id="B13"><citation citation-type="book"><person-group person-group-type="author"><name><surname>Patton</surname><given-names>AWP</given-names></name><name><surname>Goldman</surname><given-names>E</given-names></name></person-group><article-title>A standard GA approach to native protein conformation prediction</article-title><source>Proc of the 6th Intl Conf Genetic Algorithms</source><year>1995</year><publisher-name>Morgan Kaufmann Publishers</publisher-name><fpage>574</fpage><lpage>581</lpage></citation></ref><ref id="B14"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Unger</surname><given-names>R</given-names></name><name><surname>Moult</surname><given-names>J</given-names></name></person-group><article-title>Genetic algorithms for protein folding simulations</article-title><source>J of Mol Biol</source><year>1993</year><volume>231</volume><fpage>75</fpage><lpage>81</lpage><pub-id pub-id-type="pmid">8496967</pub-id><pub-id pub-id-type="doi">10.1006/jmbi.1993.1258</pub-id></citation></ref><ref id="B15"><citation citation-type="book"><person-group person-group-type="author"><name><surname>Unger</surname><given-names>R</given-names></name><name><surname>Moult</surname><given-names>J</given-names></name></person-group><article-title>A genetic algorithm for three dimensional protein folding simulations</article-title><source>Proc of the 5th Intl Conf on Genetic Algorithms</source><year>1993</year><publisher-name>Morgan Kaufmann Publishers</publisher-name><fpage>581</fpage><lpage>588</lpage></citation></ref><ref id="B16"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Bastolla</surname><given-names>U</given-names></name><name><surname>Fravenkron</surname><given-names>H</given-names></name><name><surname>Gestner</surname><given-names>E</given-names></name><name><surname>Grassberger</surname><given-names>P</given-names></name><name><surname>Nadler</surname><given-names>W</given-names></name></person-group><article-title>Testing a New Monte Carlo algorithm for the protein folding problem</article-title><source>Proteins</source><year>1998</year><volume>32</volume><fpage>52</fpage><lpage>66</lpage><pub-id pub-id-type="pmid">9672042</pub-id></citation></ref><ref id="B17"><citation citation-type="other"><person-group person-group-type="author"><name><surname>Chikenji</surname><given-names>G</given-names></name><name><surname>Kikuchi</surname><given-names>M</given-names></name><name><surname>Iba</surname><given-names>Y</given-names></name></person-group><article-title>Multi-Self-Overlap Ensemble for protein folding: ground state search and thermodynamics</article-title><source>Condensed Materials Archive</source><year>1999</year><fpage>27</fpage></citation></ref><ref id="B18"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Hsu</surname><given-names>HP</given-names></name><name><surname>Mehra</surname><given-names>V</given-names></name><name><surname>Nadler</surname><given-names>W</given-names></name><name><surname>Grassberger</surname><given-names>P</given-names></name></person-group><article-title>Growth Algorithm for Lattice Heteropolymers at Low Temperatures</article-title><source>J Chem Phys</source><year>2003</year><volume>118</volume><fpage>444</fpage><lpage>51</lpage><pub-id pub-id-type="doi">10.1063/1.1522710</pub-id></citation></ref><ref id="B19"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Liang</surname><given-names>F</given-names></name><name><surname>Wong</surname><given-names>WH</given-names></name></person-group><article-title>Evolutionary Monte Carlo for protein folding simulations</article-title><source>J Chem Phys</source><year>2001</year><volume>115</volume><fpage>3374</fpage><lpage>3380</lpage><pub-id pub-id-type="doi">10.1063/1.1387478</pub-id></citation></ref><ref id="B20"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>O'Toole</surname><given-names>EM</given-names></name><name><surname>Panagiotopoulos</surname><given-names>AZ</given-names></name></person-group><article-title>Monte Carlo simulation of folding transitions of simple model proteins using a chain growth algorithm</article-title><source>J Chem Phys</source><year>1992</year><volume>97</volume><fpage>8644</fpage><lpage>8652</lpage><pub-id pub-id-type="doi">10.1063/1.463383</pub-id></citation></ref><ref id="B21"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Ramakrishnan</surname><given-names>R</given-names></name><name><surname>Ramachandran</surname><given-names>B</given-names></name><name><surname>Pekny</surname><given-names>JF</given-names></name></person-group><article-title>A dynamic Monte Carlo algorithm for exploration of dense conformational spaces in heteropolymers</article-title><source>J Chem Phys</source><year>1997</year><volume>106</volume><fpage>2418</fpage><lpage>2424</lpage><pub-id pub-id-type="doi">10.1063/1.473791</pub-id></citation></ref><ref id="B22"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Sali</surname><given-names>A</given-names></name><name><surname>Shakhnovich</surname><given-names>E</given-names></name><name><surname>Karplus</surname><given-names>M</given-names></name></person-group><article-title>How does a protein fold?</article-title><source>Nature</source><year>1994</year><volume>369</volume><fpage>248</fpage><lpage>251</lpage><pub-id pub-id-type="pmid">7710478</pub-id><pub-id pub-id-type="doi">10.1038/369248a0</pub-id></citation></ref><ref id="B23"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Dill</surname><given-names>KA</given-names></name><name><surname>Fiebig</surname><given-names>KM</given-names></name><name><surname>Chan</surname><given-names>HS</given-names></name></person-group><article-title>Cooperativity in Protein-Folding Kinetics</article-title><source>Proc Natl Acad Sci USA</source><year>1993</year><volume>90</volume><fpage>1942</fpage><lpage>1946</lpage><pub-id pub-id-type="pmid">7680482</pub-id></citation></ref><ref id="B24"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Toma</surname><given-names>L</given-names></name><name><surname>Toma</surname><given-names>S</given-names></name></person-group><article-title>Contact interactions method: A new algorithm for protein folding simulations</article-title><source>Protein Sci</source><year>1996</year><volume>5</volume><fpage>147</fpage><lpage>153</lpage><pub-id pub-id-type="pmid">8771207</pub-id></citation></ref><ref id="B25"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Beutler</surname><given-names>T</given-names></name><name><surname>Dill</surname><given-names>K</given-names></name></person-group><article-title>A fast conformational search strategy for finding low energy structures of model proteins</article-title><source>Protein Sci</source><year>1996</year><volume>5</volume><fpage>2037</fpage><lpage>2043</lpage><pub-id pub-id-type="pmid">8897604</pub-id></citation></ref><ref id="B26"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Yue</surname><given-names>K</given-names></name><name><surname>Dill</surname><given-names>KA</given-names></name></person-group><article-title>Forces of Tertiary Structural Organization in Globular Proteins</article-title><source>Proc Natl Acad Sci USA</source><year>1995</year><volume>92</volume><fpage>146</fpage><lpage>150</lpage><pub-id pub-id-type="pmid">7816806</pub-id></citation></ref><ref id="B27"><citation citation-type="other"><person-group person-group-type="author"><name><surname>Backofen</surname><given-names>R</given-names></name><name><surname>Will</surname><given-names>S</given-names></name></person-group><article-title>A Constraint-Based Approach to Structure Prediction for Simplified Protein Models that Outperforms Other Existing Methods</article-title><source>Proc XIX Intl Conf on Logic Programming</source><year>2003</year><fpage>49</fpage><lpage>71</lpage></citation></ref><ref id="B28"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Torrie</surname><given-names>GM</given-names></name><name><surname>Valleau</surname><given-names>JP</given-names></name></person-group><article-title>Nonphysical sampling distributions in MC free energy estimation: Umbrella sampling</article-title><source>J Comput Phys</source><year>1977</year><volume>23</volume><fpage>187</fpage><lpage>199</lpage><pub-id pub-id-type="doi">10.1016/0021-9991(77)90121-8</pub-id></citation></ref><ref id="B29"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Gront</surname><given-names>D</given-names></name><name><surname>Kolinski</surname><given-names>A</given-names></name><name><surname>Skolnick</surname><given-names>J</given-names></name></person-group><article-title>Comparison of three Monte Carlo conformational search strategies for a proteinlike homopolymer model: Folding thermodynamics and identification of low-energy structures</article-title><source>J Chem Phys</source><year>2000</year><volume>113</volume><fpage>5065</fpage><lpage>5071</lpage><pub-id pub-id-type="doi">10.1063/1.1289533</pub-id></citation></ref><ref id="B30"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Mitsutake</surname><given-names>A</given-names></name><name><surname>Sugita</surname><given-names>Y</given-names></name><name><surname>Okamoto</surname><given-names>Y</given-names></name></person-group><article-title>Replica-exchange multicanonical and multicanonical replica-exchange Monte Carlo simulations of peptides. I. Formulation and benchmark test</article-title><source>J Chem Phys</source><year>2003</year><volume>118</volume><fpage>6664</fpage><lpage>6675</lpage><pub-id pub-id-type="doi">10.1063/1.1555847</pub-id></citation></ref><ref id="B31"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Berg</surname><given-names>BA</given-names></name><name><surname>Neuhaus</surname><given-names>T</given-names></name></person-group><article-title>Multicanonical ensemble: A new approach to simulate first-order phase transitions</article-title><source>Phys Rev Lett</source><year>1992</year><volume>68</volume><fpage>9</fpage><lpage>12</lpage><pub-id pub-id-type="pmid">10045099</pub-id><pub-id pub-id-type="doi">10.1103/PhysRevLett.68.9</pub-id></citation></ref><ref id="B32"><citation citation-type="book"><person-group person-group-type="author"><name><surname>Irb&#x000e4;ck</surname><given-names>A</given-names></name></person-group><person-group person-group-type="editor"><name><surname>Grassberger P, Barkema GT, Nadler W,</surname></name></person-group><article-title>Dynamic-parameter algorithms for protein folding</article-title><source>Monte Carlo Approach to Biopolymers and Protein Folding</source><year>1998</year><publisher-name>World Scientific, Singapore</publisher-name><fpage>98</fpage><lpage>109</lpage></citation></ref><ref id="B33"><citation citation-type="other"><person-group person-group-type="author"><name><surname>Backofen</surname><given-names>R</given-names></name><name><surname>Will</surname><given-names>S</given-names></name><name><surname>Clote</surname><given-names>P</given-names></name></person-group><article-title>Algorithmic approach to quantifying the hydrophobic force contribution in protein folding</article-title><source>Proc of the 5th Pacific Symposium on Biocomputing</source><year>2000</year><fpage>92</fpage><lpage>103</lpage></citation></ref><ref id="B34"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Hsu</surname><given-names>HP</given-names></name><name><surname>Mehra</surname><given-names>V</given-names></name><name><surname>Nadler</surname><given-names>W</given-names></name><name><surname>Grassberger</surname><given-names>P</given-names></name></person-group><article-title>Growth-based Optimisation Algorithm for Lattice Heteropolymers</article-title><source>Phys Rev E</source><year>2003</year><volume>68</volume><fpage>021113-1</fpage><lpage>021113-4</lpage></citation></ref><ref id="B35"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Nandi</surname><given-names>T</given-names></name><name><surname>B-Rao</surname><given-names>C</given-names></name><name><surname>Ramachandran</surname><given-names>S</given-names></name></person-group><article-title>Comparative Genomics using Data Mining tools</article-title><source>J Bioscience</source><year>2002</year><volume>27</volume><fpage>15</fpage><lpage>25</lpage></citation></ref><ref id="B36"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Sayle</surname><given-names>R</given-names></name><name><surname>Milner-White</surname><given-names>EJ</given-names></name></person-group><article-title>RASMOL &#x02013; Biomolecular Graphics for All</article-title><source>Trends Biochem Sci</source><year>1995</year><volume>20</volume><fpage>374</fpage><lpage>376</lpage><pub-id pub-id-type="pmid">7482707</pub-id><pub-id pub-id-type="doi">10.1016/S0968-0004(00)89080-5</pub-id></citation></ref><ref id="B37"><citation citation-type="book"><person-group person-group-type="author"><name><surname>Creighton</surname><given-names>TE</given-names></name></person-group><source>Protein Folding</source><year>1992</year><publisher-name>W H Freeman and Company</publisher-name></citation></ref><ref id="B38"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Plaxco</surname><given-names>KW</given-names></name><name><surname>Simons</surname><given-names>KT</given-names></name><name><surname>Baker</surname><given-names>D</given-names></name></person-group><article-title>Contact order, transition state placement and the refolding rates of single domainproteins</article-title><source>J Mol Biol</source><year>1998</year><volume>277</volume><fpage>985</fpage><lpage>994</lpage><pub-id pub-id-type="pmid">9545386</pub-id><pub-id pub-id-type="doi">10.1006/jmbi.1998.1645</pub-id></citation></ref><ref id="B39"><citation citation-type="book"><person-group person-group-type="author"><name><surname>Hoos</surname><given-names>HH</given-names></name><name><surname>St&#x000fc;tzle</surname><given-names>T</given-names></name></person-group><article-title>On the empirical evaluation of Las Vegas algorithms</article-title><source>Proc of the 14th Conference on Uncertainty in Artificial Intelligence</source><year>1998</year><publisher-name>Morgan Kaufmann Publishers</publisher-name><fpage>238</fpage><lpage>245</lpage></citation></ref><ref id="B40"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Sali</surname><given-names>A</given-names></name><name><surname>Shakhnovich</surname><given-names>E</given-names></name><name><surname>Karplus</surname><given-names>M</given-names></name></person-group><article-title>Kinetics of protein folding &#x02013; A lattice model study of the requirements for folding tothe native state</article-title><source>J Mol Biol</source><year>1994</year><volume>235</volume><fpage>1614</fpage><lpage>1636</lpage><pub-id pub-id-type="pmid">8107095</pub-id><pub-id pub-id-type="doi">10.1006/jmbi.1994.1110</pub-id></citation></ref><ref id="B41"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>St&#x000fc;tzle</surname><given-names>T</given-names></name><name><surname>Hoos</surname><given-names>HH</given-names></name></person-group><article-title>MAX-MIN Ant System</article-title><source>Future Generation Computer Systems</source><year>2000</year><volume>16</volume><fpage>889</fpage><lpage>914</lpage><pub-id pub-id-type="doi">10.1016/S0167-739X(00)00043-1</pub-id></citation></ref><ref id="B42"><citation citation-type="book"><person-group person-group-type="author"><name><surname>Hoos</surname><given-names>HH</given-names></name><name><surname>St&#x000fc;tzle</surname><given-names>T</given-names></name></person-group><source>Stochastic Local Search: Foundations and Applications</source><year>2004</year><publisher-name>Morgan Kaufmann Publishers / Elsevier</publisher-name></citation></ref><ref id="B43"><citation citation-type="book"><person-group person-group-type="author"><name><surname>Parkes</surname><given-names>A</given-names></name><name><surname>Walser</surname><given-names>JP</given-names></name></person-group><article-title>Tuning Local Search for Satisfiability Testing</article-title><source>Proc of the Applications of Artificial Intelligence Conf</source><year>1996</year><publisher-name>MIT Press</publisher-name><fpage>356</fpage><lpage>362</lpage></citation></ref><ref id="B44"><citation citation-type="other"><article-title>HP Benchmarks</article-title><ext-link ext-link-type="uri" xlink:href="http://www.cs.sandia.gov/tech_reports/compbio/tortilla-hp-benchmarks.html"/></citation></ref><ref id="B45"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Konig</surname><given-names>R</given-names></name><name><surname>Dandekar</surname><given-names>T</given-names></name></person-group><article-title>Improving Genetic Algorithms for Protein Folding simulations by systematic crossover</article-title><source>Biosystems</source><year>1999</year><volume>50</volume><fpage>17</fpage><lpage>25</lpage><pub-id pub-id-type="pmid">10235648</pub-id><pub-id pub-id-type="doi">10.1016/S0303-2647(98)00090-2</pub-id></citation></ref></ref-list><sec sec-type="display-objects"><title>Figures and Tables</title><fig position="float" id="F1"><label>Figure 1</label><caption><p><bold>A sample protein conformation in the 2D HP model</bold>. The underlying protein sequence (Sequence S1-1 from Table 1)is HPHPPHHPHPPHPHHPPHPH; black circles represent hydrophobic amino acids, while white circles symbolise polar amino acids. The dotted lines represents the H-H contacts underlying the energy calculation. The energy of this conformation is -9, which is optimal for the given sequence.</p></caption><graphic xlink:href="1471-2105-6-30-1"/></fig><fig position="float" id="F2"><label>Figure 2</label><caption><p><bold>ACO outline</bold>. Generic outline of Ant Colony Optimisation (for static combinatorial problems).</p></caption><graphic xlink:href="1471-2105-6-30-2"/></fig><fig position="float" id="F3"><label>Figure 3</label><caption><p><bold>Local structure motifs</bold>. The local structure motifs which form the solution components underlying the construction and local search phases of our ACO algorithm in 3D.</p></caption><graphic xlink:href="1471-2105-6-30-3"/></fig><fig position="float" id="F4"><label>Figure 4</label><caption><p><bold>The 2D native state of the standard Sequence S1-8</bold>. The native conformation of Sequence S1-8 from Table 1 (64 amino acids; energy -42), found by ACO-HPPFP-3 in an average CPU time of 1.5 hours and by PERM in <italic>t</italic><sub>1 </sub>= <italic>t</italic><sub>2 </sub>= <italic>t</italic><sub><italic>exp </italic></sub>= 78 hours.</p></caption><graphic xlink:href="1471-2105-6-30-5"/></fig><fig position="float" id="F5"><label>Figure 5</label><caption><p><bold>Performance comparison of ACO-HPPFP-3 and PERM on biological and random instances in 2D</bold>. Mean CPU time (natural log transformed) required by ACO-HPPFP-3 <italic>vs </italic>PERM for reaching the best solution quality, as observed over 10 runs with a cut-off time of 1 CPU hour for sequences of length 30 and 50 in 2D. The left and right plots show the results for the biological and random test-sets, respectively. Performance results for instances of size 30 are indicated by circles, while stars mark results for instances of size 50. The dashed lines indicate the band within which performance differences are not statistically significant. Mean run-times were obtained from 10 runs per instance and algorithm, and we only show data points for the runs where the best known solution quality was reached at least in some runs out of 10 by both algorithms (when unsuccessful runs were present, the expected time was calculated as in [43]); results for both successful and unsuccessful runs are given in the <xref ref-type="supplementary-material" rid="S1">Additional file 1</xref>.</p></caption><graphic xlink:href="1471-2105-6-30-6"/></fig><fig position="float" id="F6"><label>Figure 6</label><caption><p><bold>Performance comparison of ACO-HPPFP-3 and PERM on biological and random instances in 3D</bold>. Mean CPU time (natural log transformed) required by ACO-HPPFP-3 <italic>vs </italic>PERM for reaching the best solution quality, as observed over 10 runs with a cut-off time of 1 CPU hour for sequences of length 30 and 50 in 3D. The left and right plots show the results for the biological and random test-sets, respectively. Performance results for instances of size 30 are indicated by circles, while stars mark results for instances of size 50. Mean run-times were obtained from 10 runs per instance and algorithm, and we only show data points for the runs where the best known solution quality was reached at least in some runs out of 10 by both algorithms (when unsuccessful runs were present, the expected time was calculated as in [43]); results for both successful and unsuccessful runs are given in the <xref ref-type="supplementary-material" rid="S1">Additional file 1</xref>.</p></caption><graphic xlink:href="1471-2105-6-30-7"/></fig><fig position="float" id="F7"><label>Figure 7</label><caption><p><bold>Illustration and comparison of difficult structures for PERM and ACO-HPPFP-3 in 2D</bold>. Left side: Lowest energy conformation of a biological sequence (B50-7, 45 amino acids, energy -17) that is harder for PERM (<italic>t</italic><sub>1 </sub>= 271, <italic>t</italic><sub>2 </sub>= 299, <italic>t</italic><sub><italic>exp </italic></sub>= 284 CPU seconds) than for ACO-HPPFP-3 (<italic>t</italic><sub><italic>exp </italic></sub>= 130 CPU seconds; cut-off time 1 CPU hour). Right side: Lowest energy conformation of a biological sequence (B50-5, 53 amino acids, energy -22) that is much harder for ACO-HPPFP-3 than for PERM; within a cut-off time of 1 CPU hour, both ACO-HPPFP-3 and PERM reached this energy in 10 out of 10 runs in <italic>t</italic><sub><italic>avg </italic></sub>= 820 and <italic>t</italic><sub>1 </sub>= 5, <italic>t</italic><sub>2 </sub>= 118, <italic>t</italic><sub><italic>exp </italic></sub>= 9 CPU seconds on average, respectively.</p></caption><graphic xlink:href="1471-2105-6-30-8"/></fig><fig position="float" id="F8"><label>Figure 8</label><caption><p><bold>Performance of ACO-HPPFP-3 and PERM on designed sequences in 2D HP</bold>. Left side: Unique minimal energy conformation of a designed sequence, D-1 (length 50, energy -19); ACO-HPPFP-3 reaches this conformation much faster than PERM when folding from the left end (mean run-time over 100 successful runs for ACO-HPPFP-3: 236 CPU seconds, compared to <italic>t</italic><sub>1 </sub>= 3 795, <italic>t</italic><sub>2 </sub>= 1, <italic>t</italic><sub><italic>exp </italic></sub>= 2 CPU seconds for PERM). Right side: Unique native conformation of another designed sequence, D-2 (length 60, energy -17); ACO-HPPFP-3 finds this conformation much faster than PERM folding from either end (mean run-time over 100 successful runs for ACO-HPPFP-3: 951 CPU seconds, compared to <italic>t</italic><sub>1 </sub>= 9 257, <italic>t</italic><sub>2 </sub>= 19 356, <italic>t</italic><sub><italic>exp </italic></sub>= 12 524 CPU seconds for PERM).</p></caption><graphic xlink:href="1471-2105-6-30-9"/></fig><fig position="float" id="F9"><label>Figure 9</label><caption><p><bold>Illustration and comparison of difficult structures for PERM and ACO-HPPFP-3 in 3D</bold>. Left side: Lowest energy conformation of random sequence R50-9 (50 amino acids, energy -30), which is harder for PERM when folding from the left end than for ACO-HPPFP-3; with a cut-off time of 1 CPU hour, ACO-HPPFP-3 reached this energy in 10 out of 10 runs with <italic>t</italic><sub><italic>exp </italic></sub>= 1000 CPU seconds, while PERM failed to find a conformation with this energy in 7 out of 10 runs when folding from the left end (<italic>t</italic><sub>1 </sub>= 9 892, <italic>t</italic><sub>2 </sub>= 2, <italic>t</italic><sub><italic>exp </italic></sub>= 3 CPU seconds). Right side: Lowest energy conformation of random sequence R50-7 (50 amino acids, energy -38), which is much harder for ACO-HPPFP-3 than for PERM; with a cut-off time of 1 CPU hour, PERM reached this energy in two out of 10 runs when folding from the left and in 10 of 10 runs when folding from the right end in <italic>t</italic><sub>1 </sub>= 15 322, <italic>t</italic><sub>2 </sub>= 46, <italic>t</italic><sub><italic>exp </italic></sub>= 92 CPU seconds, while the lowest energy reached by ACO-HPPFP-3 over ten runs was -37.</p></caption><graphic xlink:href="1471-2105-6-30-10"/></fig><fig position="float" id="F10"><label>Figure 10</label><caption><p><bold>Comparison of distributions of H-H contact order of native structures found by ACO-HPPFP-3 and PERM in 2D and 3D</bold>. Distributions of H-H contact order for 500 conformations of Sequence S1-7 from Table 1 (60 amino acids) in 2D (left side) and Sequence S1-5 from Table 1 (48 amino acids) in 3D (right side) found by ACO-HPPFP-3 and PERM.</p></caption><graphic xlink:href="1471-2105-6-30-11"/></fig><fig position="float" id="F11"><label>Figure 11</label><caption><p><bold>Plot of mean hydrophobic solvent accessible area, ACO-HPPFP-3 <italic>vs </italic>PERM in 2D and 3D</bold>. Mean hydrophobic solvent accessible area as a function of prefix length for a biological sequence (B50-4, 50 amino acids) in 2D (left side) and Sequence S2-6 from Table 1 (48 amino acids) in 3D. Crosses and circles represent mean values for an ensemble of 100 native structures found by ACO-HPPFP-3 and PERM, respectively.</p></caption><graphic xlink:href="1471-2105-6-30-12"/></fig><fig position="float" id="F12"><label>Figure 12</label><caption><p><bold>Plot of mean number of H-H contacts, ACO-HPPFP-3 <italic>vs </italic>PERM in 2D and 3D</bold>. Mean number of H-H contacts as a function of prefix length for a biological sequence (B50-4, 50 amino acids) in 2D (left side) and Sequence S2-6 from Table 1 (48 amino acids) in 3D. Crosses and circles represent mean values for an ensemble of 100 native structures found by ACO-HPPFP-3 and PERM, respectively.</p></caption><graphic xlink:href="1471-2105-6-30-13"/></fig><fig position="float" id="F13"><label>Figure 13</label><caption><p><bold>Plot of mean H-H contact order, ACO-HPPFP-3 <italic>vs </italic>PERM in 2D and 3D</bold>. Mean H-H contact order as a function of prefix length for a biological sequence (B50-4, 50 amino acids) in 2D (left side) and Sequence S2-6 from Table 1 (48 amino acids) in 3D. Crosses and circles represent mean values for an ensemble of 100 native structures found by ACO-HPPFP-3 and PERM, respectively.</p></caption><graphic xlink:href="1471-2105-6-30-14"/></fig><fig position="float" id="F14"><label>Figure 14</label><caption><p><bold>Impact of parameter settings on ACO-HPPFP-3 performance in 2D and 3D: relative weights of pheromone and heuristic information</bold>. Effect of the relative weights of pheromone information, <italic>&#x003b1;</italic>, and heuristic information, <italic>&#x003b2;</italic>, on the average CPU time required for obtaining minimal energy conformations of Sequence S1-8 in 2D (length 64, left side) and Sequence S2-5 in 3D (length 48, right side).</p></caption><graphic xlink:href="1471-2105-6-30-15"/></fig><fig position="float" id="F15"><label>Figure 15</label><caption><p><bold>Impact of parameter settings on ACO-HPPFP-3 performance in 2D and 3D: pheromone persistence</bold>. Effect of the pheromone persistence parameter, <italic>&#x003c1;</italic>, on the average CPU time required for obtaining minimal energy conformations of Sequence S1-8 in 2D (length 64, left side) and Sequence S2-5 in 3D (length 48, right side).</p></caption><graphic xlink:href="1471-2105-6-30-16"/></fig><fig position="float" id="F16"><label>Figure 16</label><caption><p><bold>Parameter settings influence on ACO-HPPFP-3 performance in 2D and 3D: ant colony size and maximum number of non-improving local search steps</bold>. Mean CPU time required for finding minimum energy conformations of Sequence S1-7 in 2D (length 60, left side) and Sequence S2-5 in 3D (length 48, right side), as a function of ant colony size and the maximum number of non-improving local search steps.</p></caption><graphic xlink:href="1471-2105-6-30-17"/></fig><fig position="float" id="F17"><label>Figure 17</label><caption><p><bold>Parameter settings influence on ACO-HPPFP-3 performance in 2D and 3D: probability of retaining previous directions in local search</bold>. Mean CPU time required for finding minimum energy conformations of Sequence S1-8 in 2D (length 64, left side) and Sequence S2-5 in 3D (length 48, right side), as a function of the probability of retaining previous directions (<inline-graphic xlink:href="1471-2105-6-30-i2.gif"/>) during long-range mutation moves.</p></caption><graphic xlink:href="1471-2105-6-30-18"/></fig><fig position="float" id="F18"><label>Figure 18</label><caption><p><bold>Outline of the subsidiary local search procedure</bold>. The iterative first improvement local search procedure that is performed by selected ants after the construction phase.</p></caption><graphic xlink:href="1471-2105-6-30-4"/></fig><table-wrap position="float" id="T1"><label>Table 1</label><caption><p>2D and 3D HP standard benchmark instances. Benchmark instances for the 2D and 3D HP Protein Folding Problem used in this study with optimal or best known energy values <italic>E</italic>*. Most instances for 2D and 3D HP can also be found in [44]; Sequence S1-9 (2D) is taken from [45], and the last two instances (2D) are from [21]. <italic>H</italic><sub><italic>i </italic></sub>and <italic>P</italic><sub><italic>i </italic></sub>indicate a string of <italic>i </italic>consecutive H's and P's, respectively; likewise, (<italic>s</italic>)<sub><italic>i </italic></sub>indicates an <italic>i</italic>-fold repetition of string <italic>s</italic>.</p></caption><table frame="hsides" rules="groups"><thead><tr><td align="left">ID</td><td align="center">Length</td><td align="center"><italic>E</italic>*</td><td align="left">Protein Sequence</td></tr></thead><tbody><tr><td align="center" colspan="4"><italic>2D HP</italic></td></tr><tr><td colspan="4"><hr></hr></td></tr><tr><td align="left">S1-1</td><td align="center">20</td><td align="center"><italic>-9</italic></td><td align="left"><italic>(HP)</italic><sub>2</sub><italic>PH</italic><sub>2</sub><italic>PHP</italic><sub>2</sub><italic>HPH</italic><sub>2</sub><italic>P</italic><sub>2</sub><italic>HPH</italic></td></tr><tr><td align="left">S1-2</td><td align="center">24</td><td align="center"><italic>-9</italic></td><td align="left"><italic>H</italic><sub>2</sub>(<italic>P</italic><sub>2</sub><italic>H</italic>)<sub>7</sub><italic>H</italic></td></tr><tr><td align="left">S1-3</td><td align="center">25</td><td align="center">-8</td><td align="left"><italic>P</italic><sub>2</sub><italic>HP</italic><sub>2</sub>(<italic>H</italic><sub>2</sub><italic>P</italic><sub>4</sub>)<sub>3</sub><italic>H</italic><sub>2</sub></td></tr><tr><td align="left">S1-4</td><td align="center">36</td><td align="center">-14</td><td align="left"><italic>P</italic><sub>3</sub><italic>H</italic><sub>2</sub><italic>P</italic><sub>2</sub><italic>H</italic><sub>2</sub><italic>P</italic><sub>5</sub><italic>H</italic><sub>7</sub><italic>P</italic><sub>2</sub><italic>H</italic><sub>2</sub><italic>P</italic><sub>4</sub><italic>H</italic><sub>2</sub><italic>P</italic><sub>2</sub><italic>HP</italic><sub>2</sub></td></tr><tr><td align="left">S1-5</td><td align="center">48</td><td align="center">-23</td><td align="left"><italic>P</italic><sub>2</sub><italic>H</italic>(<italic>P</italic><sub>2</sub><italic>H</italic><sub>2</sub>)<sub>2</sub><italic>P</italic><sub>5</sub><italic>H</italic><sub>10</sub><italic>P</italic><sub>6</sub>(<italic>H</italic><sub>2</sub><italic>P</italic><sub>2</sub>)<sub>2</sub><italic>HP</italic><sub>2</sub><italic>H</italic><sub>5</sub></td></tr><tr><td align="left">S1-6</td><td align="center">50</td><td align="center">-21</td><td align="left"><italic>H</italic><sub>2</sub>(<italic>PH</italic>)<sub>3</sub><italic>PH</italic><sub>4</sub><italic>PH</italic>(<italic>P</italic><sub>3</sub><italic>H</italic>)<sub>2</sub><italic>P</italic><sub>4</sub><italic>H</italic>(<italic>P</italic><sub>3</sub><italic>H</italic>)<sub>2</sub><italic>PHPH</italic><sub>4</sub>(<italic>HP</italic>)<sub>3</sub><italic>H</italic><sub>2</sub></td></tr><tr><td align="left">S1-7</td><td align="center">60</td><td align="center">-36</td><td align="left"><italic>P</italic><sub>2</sub><italic>H</italic><sub>3</sub><italic>PH</italic><sub>8</sub><italic>P</italic><sub>3</sub><italic>H</italic><sub>10</sub><italic>PHP</italic><sub>3</sub><italic>H</italic><sub>12</sub><italic>P</italic><sub>4</sub><italic>H</italic><sub>6</sub><italic>PH</italic><sub>2</sub><italic>PHP</italic></td></tr><tr><td align="left">S1-8</td><td align="center">64</td><td align="center">-42</td><td align="left"><italic>H</italic><sub>12</sub>(<italic>PH</italic>)<sub>2</sub>(<italic>P</italic><sub>2</sub><italic>H</italic><sub>2</sub>)<sub>2</sub><italic>P</italic><sub>2</sub><italic>HP</italic><sub>2</sub><italic>H</italic><sub>2</sub><italic>PPH</italic><sub>2</sub><italic>P</italic><sub>2</sub><italic>HP</italic><sub>2</sub>(<italic>H</italic><sub>2</sub><italic>P</italic><sub>2</sub>)<sub>2</sub>(<italic>HP</italic>)<sub>2</sub><italic>H</italic><sub>12</sub></td></tr><tr><td align="left">S1-9</td><td align="center">85</td><td align="center">-53</td><td align="left"><italic>H</italic><sub>4</sub><italic>P</italic><sub>4</sub><italic>H</italic><sub>12</sub><italic>P</italic><sub>6</sub>(<italic>H</italic><sub>12</sub><italic>P</italic><sub>3</sub>)<sub>3</sub><italic>HP</italic><sub>2</sub>(<italic>H</italic><sub>2</sub><italic>P</italic><sub>2</sub>)<sub>2</sub><italic>HPH</italic></td></tr><tr><td align="left">S1-10</td><td align="center">100</td><td align="center">-50</td><td align="left"><italic>P</italic><sub>3</sub><italic>H</italic><sub>2</sub><italic>P</italic><sub>2</sub><italic>H</italic><sub>4</sub><italic>P</italic><sub>2</sub><italic>H</italic><sub>3</sub>(<italic>PH</italic><sub>2</sub>)<sub>2</sub><italic>PH</italic><sub>4</sub><italic>P</italic><sub>8</sub><italic>H</italic><sub>6</sub><italic>P</italic><sub>2</sub><italic>H</italic><sub>6</sub><italic>P</italic><sub>9</sub><italic>HPH</italic><sub>2</sub><italic>PH</italic><sub>11</sub><italic>P</italic><sub>2</sub><italic>H</italic><sub>3</sub><italic>PH</italic><sub>2</sub><italic>PHP</italic><sub>2</sub><italic>HPH</italic><sub>3</sub><italic>P</italic><sub>6</sub><italic>H</italic><sub>3</sub></td></tr><tr><td align="left">S1-11</td><td align="center">100</td><td align="center">-48</td><td align="left"><italic>P</italic><sub>6</sub><italic>HPH</italic><sub>2</sub><italic>P</italic><sub>5</sub><italic>H</italic><sub>3</sub><italic>PH</italic><sub>5</sub><italic>PH</italic><sub>2</sub><italic>P</italic><sub>4</sub><italic>H</italic><sub>2</sub><italic>P</italic><sub>2</sub><italic>H</italic><sub>2</sub><italic>PH</italic><sub>5</sub><italic>PH</italic><sub>10</sub><italic>PH</italic><sub>2</sub><italic>PH</italic><sub>7</sub><italic>p</italic><sub>11</sub><italic>H</italic><sub>7</sub><italic>P</italic><sub>2</sub><italic>HPH</italic><sub>3</sub><italic>P</italic><sub>6</sub><italic>HPH</italic><sub>2</sub></td></tr><tr><td colspan="4"><hr></hr></td></tr><tr><td align="center" colspan="4"><italic>3D HP</italic></td></tr><tr><td colspan="4"><hr></hr></td></tr><tr><td align="left">S2-1</td><td align="center">48</td><td align="center">-32</td><td align="left"><italic>HPH</italic><sub>2</sub><italic>P</italic><sub>2</sub><italic>H</italic><sub>4</sub><italic>PH</italic><sub>3</sub><italic>P</italic><sub>2</sub><italic>H</italic><sub>2</sub><italic>P</italic><sub>2</sub><italic>HPH</italic><sub>2</sub><italic>PHPH</italic><sub>2</sub><italic>P</italic><sub>2</sub><italic>H</italic><sub>2</sub><italic>P</italic><sub>3</sub><italic>HP</italic><sub>8</sub><italic>H</italic><sub>2</sub></td></tr><tr><td align="left">S2-2</td><td align="center">48</td><td align="center">-34</td><td align="left"><italic>H</italic><sub>4</sub><italic>PH</italic><sub>2</sub><italic>PH</italic><sub>5</sub><italic>P</italic><sub>2</sub><italic>HP</italic><sub>2</sub><italic>H</italic><sub>2</sub><italic>P</italic><sub>2</sub><italic>HP</italic><sub>6</sub><italic>HP</italic><sub>2</sub><italic>HP</italic><sub>3</sub><italic>HP</italic><sub>2</sub><italic>H</italic><sub>2</sub><italic>P</italic><sub>2</sub><italic>H</italic><sub>3</sub><italic>PH</italic></td></tr><tr><td align="left">S2-3</td><td align="center">48</td><td align="center">-34</td><td align="left"><italic>PHPH</italic><sub>2</sub><italic>PH</italic><sub>6</sub><italic>P</italic><sub>2</sub><italic>HPHP</italic><sub>2</sub><italic>HPH</italic><sub>2</sub>(<italic>PH</italic>)<sub>2</sub><italic>P</italic><sub>3</sub><italic>H</italic>(<italic>P</italic><sub>2</sub><italic>H</italic><sub>2</sub>)<sub>2</sub><italic>P</italic><sub>2</sub><italic>H</italic><sub><italic>P</italic></sub><italic>HP</italic><sub>2</sub><italic>HP</italic></td></tr><tr><td align="left">S2-4</td><td align="center">48</td><td align="center">-33</td><td align="left"><italic>PHPH</italic><sub>2</sub><italic>P</italic><sub>2</sub><italic>HPH</italic><sub>3</sub><italic>P</italic><sub>2</sub><italic>H</italic><sub>2</sub><italic>PH</italic><sub>2</sub><italic>P</italic><sub>3</sub><italic>H</italic><sub>5</sub><italic>P</italic><sub>2</sub><italic>HPH</italic><sub>2</sub>(<italic>PH</italic>)<sub>2</sub><italic>P</italic><sub>4</sub><italic>HP</italic><sub>2</sub>(<italic>HP</italic>)<sub>2</sub></td></tr><tr><td align="left">S2-5</td><td align="center">48</td><td align="center">-32</td><td align="left"><italic>P</italic><sub>2</sub><italic>HP</italic><sub>3</sub><italic>HPH</italic><sub>4</sub><italic>P</italic><sub>2</sub><italic>H</italic><sub>4</sub><italic>PH</italic><sub>2</sub><italic>PH</italic><sub>3</sub><italic>P</italic><sub>2</sub>(<italic>HP</italic>)<sub>2</sub><italic>HP</italic><sub>2</sub><italic>HP</italic><sub>6</sub><italic>H</italic><sub>2</sub><italic>PH</italic><sub>2</sub><italic>PH</italic></td></tr><tr><td align="left">S2-6</td><td align="center">48</td><td align="center">-32</td><td align="left"><italic>H</italic><sub>3</sub><italic>P</italic><sub>3</sub><italic>H</italic><sub>2</sub><italic>PH</italic>(<italic>PH</italic><sub>2</sub>)<sub>3</sub><italic>PHP</italic><sub>7</sub><italic>HPHP</italic><sub>2</sub><italic>HP</italic><sub>3</sub><italic>HP</italic><sub>2</sub><italic>H</italic><sub>6</sub><italic>PH</italic></td></tr><tr><td align="left">S2-7</td><td align="center">48</td><td align="center">-32</td><td align="left"><italic>PHP</italic><sub>4</sub><italic>HPH</italic><sub>3</sub><italic>PHPH</italic><sub>4</sub><italic>PH</italic><sub>2</sub><italic>PH</italic><sub>2</sub><italic>P</italic><sub>3</sub><italic>HPHP</italic><sub>3</sub><italic>H</italic><sub>3</sub>(<italic>P</italic><sub>2</sub><italic>H</italic><sub>2</sub>)<sub>2</sub><italic>P</italic><sub>3</sub><italic>H</italic></td></tr><tr><td align="left">S2-8</td><td align="center">48</td><td align="center">-31</td><td align="left"><italic>PH</italic><sub>2</sub><italic>PH</italic><sub>3</sub><italic>PH</italic><sub>4</sub><italic>P</italic><sub>2</sub><italic>H</italic><sub>3</sub><italic>P</italic><sub>6</sub><italic>HPH</italic><sub>2</sub><italic>P</italic><sub>2</sub><italic>H</italic><sub>2</sub><italic>PHP</italic><sub>3</sub><italic>H</italic><sub>2</sub>(<italic>PH</italic>)<sub>2</sub><italic>PH</italic><sub>2</sub><italic>P</italic><sub>3</sub></td></tr><tr><td align="left">S2-9</td><td align="center">48</td><td align="center">-34</td><td align="left">(<italic>PH</italic>)<sub>2</sub><italic>P</italic><sub>4</sub>(<italic>HP</italic>)<sub>2</sub><italic>HP</italic><sub>2</sub><italic>HPH</italic><sub>6</sub><italic>P</italic><sub>2</sub><italic>H</italic><sub>3</sub><italic>PHP</italic><sub>2</sub><italic>HPH</italic><sub>2</sub><italic>P</italic><sub>2</sub><italic>HPH</italic><sub>3</sub>P<sub>4</sub><italic>H</italic></td></tr><tr><td align="left">S2-10</td><td align="center">48</td><td align="center">-33</td><td align="left"><italic>PH</italic><sub>2</sub><italic>P</italic><sub>6</sub><italic>H</italic><sub>2</sub><italic>P</italic><sub>3</sub><italic>H</italic><sub>3</sub><italic>PHP</italic><sub>2</sub><italic>HPH</italic><sub>2</sub>(<italic>P</italic><sub>2</sub><italic>H</italic>)<sub>2</sub><italic>P</italic><sub>2</sub><italic>H</italic><sub>2</sub><italic>P</italic><sub>2</sub><italic>H</italic><sub>7</sub><italic>P</italic><sub>2</sub><italic>H</italic><sub>2</sub></td></tr></tbody></table></table-wrap><table-wrap position="float" id="T2"><label>Table 2</label><caption><p>Performance comparison of various algorithms for the 2D HP Protein Folding Problem. Comparison of the solution quality obtained in 2D by the evolutionary algorithm of Unger and Moult (EA) [14], the evolutionary Monte Carlo algorithm of Liang and Wong (EMC) [19], the multi-self-overlap ensemble algorithm of Chickenji <italic>et al. </italic>(MSOE) [17], the pruned-enriched Rosenbluth method (PERM) and ACO-HPPFP-3. For EA and EMC, the reported energy values are the lowest among five independent runs, and the values in parentheses are the numbers of valid conformations scanned before the lowest energy values were found. Missing entries indicate cases where the respective method has not been tested on a given instance. The CPU times reported in parentheses for MSOE have been determined on a 500 MHz CPU, and those for PERM and ACO-HPPFP-3 are based on 100 &#x02013; 200 runs per instance on our reference 2.4 GHz Pentium IV machine. The energy values shown in bold face correspond to currently best known solution qualities.</p></caption><table frame="hsides" rules="groups"><thead><tr><td align="left">ID</td><td align="left"><italic>E</italic></td><td align="left">GA</td><td align="left">EMC</td><td align="left">MSOE</td><td align="left">PERM <italic>t</italic><sub>1</sub></td><td align="left">PERM <italic>t</italic><sub>2</sub></td><td align="left">PERM <italic>t</italic><sub><italic>exp</italic></sub></td><td align="left">ACO</td></tr></thead><tbody><tr><td align="left">S1-1</td><td align="left"><bold>-9</bold></td><td align="left"><bold>-9 </bold>(30 492)</td><td align="left"><bold>-9 </bold>(9 374)</td><td></td><td align="left"><bold>-9 </bold>(&#x0003c; 1 sec)</td><td align="left"><bold>-9 </bold>(&#x0003c; 1 sec)</td><td align="left"><bold>-9 </bold>(&#x0003c; 1 sec)</td><td align="left"><bold>-9 </bold>(&#x0003c; 1 sec)</td></tr><tr><td align="left">S1-2</td><td align="left"><bold>-9</bold></td><td align="left"><bold>-9 </bold>(30 491)</td><td align="left"><bold>-9 </bold>(6 929)</td><td></td><td align="left"><bold>-9 </bold>(&#x0003c; 1 sec)</td><td align="left"><bold>-9 </bold>(&#x0003c; 1 sec)</td><td align="left"><bold>-9 </bold>(&#x0003c; 1 sec)</td><td align="left"><bold>-9 </bold>(&#x0003c; 1 sec)</td></tr><tr><td align="left">S1-3</td><td align="left"><bold>-8</bold></td><td align="left"><bold>-8 </bold>(20 400)</td><td align="left"><bold>-8 </bold>(7 202)</td><td></td><td align="left"><bold>-8 </bold>(6 sec)</td><td align="left"><bold>-8 </bold>(&#x0003c; 1 sec)</td><td align="left"><bold>-8 </bold>(2 sec)</td><td align="left"><bold>-8 </bold>(&#x0003c; 1 sec)</td></tr><tr><td align="left">S1-4</td><td align="left"><bold>-14</bold></td><td align="left"><bold>-14 </bold>(301 339)</td><td align="left"><bold>-14 </bold>(12 447)</td><td></td><td align="left"><bold>-14 </bold>(&#x0003c; 1 sec)</td><td align="left"><bold>-14 </bold>(&#x0003c; 1 sec)</td><td align="left"><bold>-14 </bold>(&#x0003c; 1 sec)</td><td align="left"><bold>-14 </bold>(4 sec)</td></tr><tr><td align="left">S1-5</td><td align="left"><bold>-23</bold></td><td align="left"><bold>-23 </bold>(126 547)</td><td align="left"><bold>-23 </bold>(165 791)</td><td></td><td align="left"><bold>-23 </bold>(3 min)</td><td align="left"><bold>-23 </bold>(&#x0003c; 1 sec)</td><td align="left"><bold>-23 </bold>(2 sec)</td><td align="left"><bold>-23 </bold>(1 min)</td></tr><tr><td align="left">S1-6</td><td align="left"><bold>-21</bold></td><td align="left"><bold>-21 </bold>(592 887)</td><td align="left"><bold>-21 </bold>(74 613)</td><td></td><td align="left"><bold>-21 </bold>(3 sec)</td><td align="left"><bold>-21 </bold>(3 sec)</td><td align="left"><bold>-21 </bold>(3 sec)</td><td align="left"><bold>-21 </bold>(15 sec)</td></tr><tr><td align="left">S1-7</td><td align="left"><bold>-36</bold></td><td align="left">-34 (208 781)</td><td align="left">-35 (203 729)</td><td></td><td align="left"><bold>-36 </bold>(7 sec)</td><td align="left"><bold>-36 </bold>(3 sec)</td><td align="left"><bold>-36 </bold>(4 sec)</td><td align="left"><bold>-36 </bold>(20 min)</td></tr><tr><td align="left">S1-8</td><td align="left"><bold>-42</bold></td><td align="left">-37 (187 393)</td><td align="left">-39 (564 809)</td><td align="left">-39</td><td align="left">-42 (78 hrs)</td><td align="left">-42 (78 hrs)</td><td align="left">-42 (78 hrs)</td><td align="left"><bold>-42 </bold>(1.5 hrs)</td></tr><tr><td align="left">S1-9</td><td align="left"><bold>-53</bold></td><td></td><td align="left">-52 (44 029)</td><td></td><td align="left"><bold>-53 </bold>(64 sec)</td><td align="left"><bold>-53 </bold>(60 sec)</td><td align="left"><bold>-53 </bold>(1 min)</td><td align="left"><bold>-53 </bold>(20% of runs 1 days)</td></tr><tr><td align="left">S1-10</td><td align="left"><bold>-50</bold></td><td></td><td></td><td align="left"><bold>-50 </bold>(50 hrs)</td><td align="left"><bold>-50 </bold>(50% of runs 1 hrs)</td><td align="left"><bold>-50 </bold>(20 min)</td><td align="left"><bold>-50</bold></td><td align="left">-49 (12 hrs)</td></tr><tr><td align="left">S1-11</td><td align="left"><bold>-48</bold></td><td></td><td></td><td align="left">-47</td><td align="left"><bold>-48 </bold>(9 min)</td><td align="left"><bold>-48 </bold>(7 min)</td><td align="left"><bold>-48 </bold>(8 min)</td><td align="left">-47 (10 hrs)</td></tr></tbody></table></table-wrap><table-wrap position="float" id="T3"><label>Table 3</label><caption><p>Performance comparison of various algorithms for the 3D HP Protein Folding Problem. Comparison of the solution quality obtained in 3D by the hydrophobic zipper (HZ) algorithm [23], the constraint-based hydrophobic core construction method (CHCC) [26], the core-directed chain growth algorithm (CG) [25], the contact interactions (CI) algorithm [24], the pruned-enriched Rosenbluth method (PERM) and ACO-HPPFP-3. For CI, only the best energies obtained are shown. For HZ, CHCC and CG, the reported CPU times are taken from [25]; these are the expected times for finding optimal solutions on a Sparc 1 workstation. In the case of HZ, the reported CPU times are based on an extrapolation from the measured times required for finding suboptimal conformations with the energy values listed here. The CPU times for PERM and ACO-HPPFP-3 were determined on our reference 2.4 GHz Pentium IV machine based on 50 &#x02013; 100 runs per instance. The energy values shown in bold face correspond to currently best known solution qualities.</p></caption><table frame="hsides" rules="groups"><thead><tr><td align="left">ID</td><td align="left"><italic>E</italic></td><td align="left">HZ</td><td align="left">CHCC</td><td align="left">CG</td><td align="left">CI</td><td align="left">PERM <italic>t</italic><sub>1</sub></td><td align="left">PERM <italic>t</italic><sub>2</sub></td><td align="left">PERM <italic>t</italic><sub><italic>exp</italic></sub></td><td align="left">ACO</td></tr></thead><tbody><tr><td align="left">S2-1</td><td align="left"><bold>-32</bold></td><td align="left">-31(4 hrs)</td><td align="left"><bold>-32 </bold>(30 min)</td><td align="left"><bold>-32 </bold>(9.4 min)</td><td align="left"><bold>-32</bold></td><td align="left"><bold>-32 </bold>(0.1 min)</td><td align="left"><bold>-32 </bold>(0.5 min)</td><td align="left"><bold>-32 </bold>(0.2 min)</td><td align="left"><bold>-32 </bold>(30 min)</td></tr><tr><td align="left">S2-2</td><td align="left"><bold>-34</bold></td><td align="left">-32 (18 hrs)</td><td align="left"><bold>-34 </bold>(2.3 min)</td><td align="left"><bold>-34 </bold>(35 min)</td><td align="left">-33</td><td align="left"><bold>-34 </bold>(0.3 min)</td><td align="left"><bold>-34 </bold>(48 min)</td><td align="left"><bold>-34 </bold>(0.6 min)</td><td align="left"><bold>-34 </bold>(420 min)</td></tr><tr><td align="left">S2-3</td><td align="left"><bold>-34</bold></td><td align="left">-31 (23 hrs)</td><td align="left"><bold>-34 </bold>(30 min)</td><td align="left"><bold>-34 </bold>(62 min)</td><td align="left">-32</td><td align="left"><bold>-34 </bold>(0.1 min)</td><td align="left"><bold>-34 </bold>(4 days)</td><td align="left"><bold>-34 </bold>(0.2 min)</td><td align="left"><bold>-34 </bold>(120 min)</td></tr><tr><td align="left">S2-4</td><td align="left"><bold>-33</bold></td><td align="left">-30 (19 days)</td><td align="left"><bold>-33 </bold>(71 min)</td><td align="left"><bold>-33 </bold>(29 min)</td><td align="left">-32</td><td align="left"><bold>-33 </bold>(2 min)</td><td align="left"><bold>-33 </bold>(4 min)</td><td align="left"><bold>-33 </bold>(3 min)</td><td align="left"><bold>-33 </bold>(300 min)</td></tr><tr><td align="left">S2-5</td><td align="left"><bold>-32</bold></td><td align="left">-30 (1.3 days)</td><td align="left"><bold>-32 </bold>(32 min)</td><td align="left"><bold>-32 </bold>(12 min)</td><td align="left"><bold>-32</bold></td><td align="left"><bold>-32 </bold>(0.5 min)</td><td align="left"><bold>-32 </bold>(19 min)</td><td align="left"><bold>-32 </bold>(1 min)</td><td align="left"><bold>-32 </bold>(15 min)</td></tr><tr><td align="left">S2-6</td><td align="left"><bold>-32</bold></td><td align="left">-29 (2.1 days)</td><td align="left"><bold>-32 </bold>(80 min)</td><td align="left"><bold>-32 </bold>(460 min)</td><td align="left">-30</td><td align="left"><bold>-32 </bold>(0.5 min)</td><td align="left"><bold>-32 </bold>(0.1 min)</td><td align="left"><bold>-32 </bold>(0.2 min)</td><td align="left"><bold>-32 </bold>(720 min)</td></tr><tr><td align="left">S2-7</td><td align="left"><bold>-32</bold></td><td align="left">-29 (2.5 days)</td><td align="left"><bold>-32 </bold>(110 min)</td><td align="left"><bold>-32 </bold>(64 min)</td><td align="left">-30</td><td align="left"><bold>-32 </bold>(0.5 min)</td><td align="left"><bold>-32 </bold>(2 days)</td><td align="left"><bold>-32 </bold>(1 min)</td><td align="left"><bold>-32 </bold>(720 min)</td></tr><tr><td align="left">S2-8</td><td align="left"><bold>-31</bold></td><td align="left">-29 (4 hrs)</td><td align="left"><bold>-31 </bold>(530 min)</td><td align="left"><bold>-31 </bold>(38 min)</td><td align="left">-30</td><td align="left"><bold>-31 </bold>(0.3 min)</td><td align="left"><bold>-31 </bold>(8 min)</td><td align="left"><bold>-31 </bold>(0.6 min)</td><td align="left"><bold>-31 </bold>(120 min)</td></tr><tr><td align="left">S2-9</td><td align="left"><bold>-34</bold></td><td align="left">-31(4.5 hrs)</td><td align="left"><bold>-34 </bold>(8.3 min)</td><td align="left">-33</td><td align="left">-32</td><td align="left"><bold>-34 </bold>(5 min)</td><td align="left"><bold>-34 </bold>(10 min)</td><td align="left"><bold>-34 </bold>(7 min)</td><td align="left"><bold>-34 </bold>(450 min)</td></tr><tr><td align="left">S2-10</td><td align="left"><bold>-33</bold></td><td align="left"><bold>-33 </bold>(1.1 hr)</td><td align="left"><bold>-33 </bold>(4.8 min)</td><td align="left"><bold>-33</bold>(1.1 min)</td><td align="left">-32</td><td align="left"><bold>-33 </bold>(0.01 min)</td><td align="left"><bold>-33 </bold>(0.01 min)</td><td align="left"><bold>-33 </bold>(0.01 min)</td><td align="left"><bold>-33 </bold>(60 min)</td></tr></tbody></table></table-wrap></sec></back></article>



