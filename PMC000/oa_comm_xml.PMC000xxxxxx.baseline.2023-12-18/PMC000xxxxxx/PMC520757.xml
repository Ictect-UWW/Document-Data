<!DOCTYPE article PUBLIC "-//NLM//DTD Journal Archiving and Interchange DTD v2.3 20070202//EN" "archivearticle.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink" article-type="product-review"><?properties open_access?><front><journal-meta><journal-id journal-id-type="nlm-ta">BMC Bioinformatics</journal-id><journal-title>BMC Bioinformatics</journal-title><issn pub-type="epub">1471-2105</issn><publisher><publisher-name>BioMed Central</publisher-name><publisher-loc>London</publisher-loc></publisher></journal-meta><article-meta><article-id pub-id-type="pmid">15357879</article-id><article-id pub-id-type="pmc">PMC520757</article-id><article-id pub-id-type="publisher-id">1471-2105-5-128</article-id><article-id pub-id-type="doi">10.1186/1471-2105-5-128</article-id><article-categories><subj-group subj-group-type="heading"><subject>Software</subject></subj-group></article-categories><title-group><article-title>DIALIGN P: Fast pair-wise and multiple sequence alignment using parallel processors</article-title></title-group><contrib-group><contrib id="A1" contrib-type="author"><name><surname>Schmollinger</surname><given-names>Martin</given-names></name><xref ref-type="aff" rid="I1">1</xref><email>Martin.Schmollinger@fh-furtwangen.de</email></contrib><contrib id="A2" contrib-type="author"><name><surname>Nieselt</surname><given-names>Kay</given-names></name><xref ref-type="aff" rid="I2">2</xref><email>nieselt@informatik.uni-tuebingen.de</email></contrib><contrib id="A3" contrib-type="author"><name><surname>Kaufmann</surname><given-names>Michael</given-names></name><xref ref-type="aff" rid="I1">1</xref><email>mk@informatik.uni-tuebingen.de</email></contrib><contrib id="A4" corresp="yes" contrib-type="author"><name><surname>Morgenstern</surname><given-names>Burkhard</given-names></name><xref ref-type="aff" rid="I3">3</xref><email>bmorgen@gwdg.de</email></contrib></contrib-group><aff id="I1"><label>1</label>Wilhelm-Schickard-Institut fur Informatik, Sand 14, 72076 T&#x000fc;bingen, Germany</aff><aff id="I2"><label>2</label>Center for Bioinformatics T&#x000fc;bingen, Sand 14, 72076 T&#x000fc;bingen, Germany</aff><aff id="I3"><label>3</label>University of G&#x000f6;ttingen, Institute of Microbiology and Genetics, Goldschmidtstr. 1, 37077 G&#x000f6;ttingen, Germany</aff><pub-date pub-type="collection"><year>2004</year></pub-date><pub-date pub-type="epub"><day>9</day><month>9</month><year>2004</year></pub-date><volume>5</volume><fpage>128</fpage><lpage>128</lpage><ext-link ext-link-type="uri" xlink:href="http://www.biomedcentral.com/1471-2105/5/128"/><history><date date-type="received"><day>23</day><month>3</month><year>2004</year></date><date date-type="accepted"><day>9</day><month>9</month><year>2004</year></date></history><copyright-statement>Copyright &#x000a9; 2004 Schmollinger et al; licensee BioMed Central Ltd.</copyright-statement><license license-type="open-access" xlink:href="http://creativecommons.org/licenses/by/2.0"><p>This is an open-access article distributed under the terms of the Creative Commons Attribution License (<ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/licenses/by/2.0"/>), which permits unrestricted use, distribution, and reproduction in any medium, provided the original work is properly cited.</p></license><abstract><sec><title>Background</title><p>Parallel computing is frequently used to speed up computationally expensive tasks in Bioinformatics.</p></sec><sec><title>Results</title><p>Herein, a parallel version of the multi-alignment program DIALIGN is introduced. We propose two ways of dividing the program into independent sub-routines that can be run on different processors: (<italic>a</italic>) pair-wise sequence alignments that are used as a first step to multiple alignment account for most of the CPU time in DIALIGN. Since alignments of different sequence pairs are completely independent of each other, they can be distributed to multiple processors without any effect on the resulting output alignments. (<italic>b</italic>) For alignments of large genomic sequences, we use a heuristics by splitting up sequences into sub-sequences based on a previously introduced <italic>anchored alignment </italic>procedure. For our test sequences, this combined approach reduces the program running time of DIALIGN by up to 97%.</p></sec><sec><title>Conclusions</title><p>By distributing sub-routines to multiple processors, the running time of DIALIGN can be crucially improved. With these improvements, it is possible to apply the program in large-scale genomics and proteomics projects that were previously beyond its scope.</p></sec></abstract></article-meta></front><body><sec><title>Background</title><p>Multiple sequence alignment continues to be an active field of research in Computational Biology and a number of novel approaches have been developed during the last years, see [<xref ref-type="bibr" rid="B1">1</xref>] for an overview on multi-alignment algorithms and [<xref ref-type="bibr" rid="B2">2</xref>,<xref ref-type="bibr" rid="B3">3</xref>] for systematic evaluation of the commonly used software tools. Until some years ago, research on sequence alignment was mainly concerned with aligning proteins or single genes. During the last few years, however, comparison of genomic sequences became a crucial tool for uncovering functional elements such as genes or regulatory sites. Consequently, the focus of alignment research shifted to large genomic sequences [<xref ref-type="bibr" rid="B4">4</xref>,<xref ref-type="bibr" rid="B5">5</xref>]. Alignment of sequences in the order of hundreds of kilobases or megabases is computationally demanding. Some extremely efficient tools have been developed that are able to align entire chromosomes or genomes [<xref ref-type="bibr" rid="B6">6</xref>,<xref ref-type="bibr" rid="B7">7</xref>]. These approaches, however, work best on closely related species; they are unable to compare sequences with larger evolutionary distances.</p><p>DIALIGN [<xref ref-type="bibr" rid="B8">8</xref>] is a versatile tool for pair-wise and multiple alignment of nucleic acid and protein sequences. It combines global and local alignment features and is therefore particularly useful to align distantly related sequences sets sharing isolated local homologies. In a number of recent research projects DIALIGN has been used to align syntenic genomic sequences; some new program options have been implemented for this purpose [<xref ref-type="bibr" rid="B9">9</xref>]. Recent applications of DIALIGN in comparative genomics include detection of regulatory elements by multiple alignment [<xref ref-type="bibr" rid="B10">10</xref>-<xref ref-type="bibr" rid="B14">14</xref>], phylogenetic studies [<xref ref-type="bibr" rid="B15">15</xref>,<xref ref-type="bibr" rid="B16">16</xref>] and identification of signature sequences to detect pathogenic viruses as part of the US biodefense program [<xref ref-type="bibr" rid="B17">17</xref>]. An independent study by Pollard <italic>et al</italic>. evaluated the capability of alignment programs to detect conserved non-coding sites in genomic sequences. These authors conclude that <italic>DIALIGN can produce alignments with high coverage and sensitivity, as well as specificity to detect constrained sites </italic>[<xref ref-type="bibr" rid="B3">3</xref>].</p><p>Though DIALIGN produces alignments of high quality, it is slower than alternative multi-alignment programs. Especially if large genomic sequences are to be aligned DIALIGN is far more time-consuming than the above mentioned specialized programs for genomic alignment. A recently introduced <italic>anchored alignment </italic>option [<xref ref-type="bibr" rid="B18">18</xref>] can be used to speed-up the program, but even with this improvement DIALIGN is still slower than alternative software tools. Parallel computing has been used by various researchers in order to improve the running time of computationally expensive alignment procedures, see for example [<xref ref-type="bibr" rid="B19">19</xref>-<xref ref-type="bibr" rid="B21">21</xref>]. Herein, we introduce a parallel version of DIALIGN. We apply two different strategies to distribute sub-routines to multiple processors. In our test examples, the running time of DIALIGN could be reduced by up to 94.5 % for multiple protein alignment and by up to 97.5 % for alignment of large genomic sequences.</p></sec><sec><title>Implementation</title><sec><title>Parallel multiple alignment</title><p>For multiple alignment, the DIALIGN algorithm works as follows: in a first step, all respective optimal pair-wise alignments are carried out. This means that, for each pair of input sequences, a <italic>chain </italic>of local <italic>fragment alignments </italic>with maximum total <italic>weight score </italic>is identified. A <italic>fragment </italic>or <italic>fragment alignment </italic>is defined as an un-gapped local pair-wise alignment, and the <italic>weight score </italic>of such a fragment is calculated based on a P-value i.e. on the probability of its random occurrence, see [<xref ref-type="bibr" rid="B8">8</xref>] for a detailed explanation of this approach. The chaining algorithm that identifies a fragment chain with maximum total weigth is described in [<xref ref-type="bibr" rid="B22">22</xref>].</p><p>For a set of <italic>N </italic>input sequences, <italic>N </italic>&#x000d7; (<italic>N </italic>- 1)/2 pair-wise alignments are to be calculated; fragments contained in these pair-wise alignments are then used to build up a multiple alignment in greedy fashion. If the maximum sequence length is bounded by some constant, the time-complexity of this algorithm as a function of the number <italic>N </italic>of sequences is as follows: Performing all pair-wise alignments takes <italic>O</italic>(<italic>N</italic><sup>2</sup>) time. During the greedy procedure, <italic>O</italic>(<italic>N</italic>) independent fragments can be included into the multiple alignment; additional fragments would be either inconsistent or already contained in the existing multiple alignment. Accepting a single fragment takes <italic>O</italic>(<italic>N</italic><sup>2</sup>) time since for each accepted fragment, so-called <italic>consistency </italic>frontiers are to be updated. These frontiers are used to decide if subsequent fragments are consistent with previously accepted fragments. Thus, the worst-case time complexity of our multi-alignment algorithm is <italic>O</italic>(<italic>N</italic><sup>3</sup>). Test runs with real data show, however, that the real time-complexity is something between quadratic and cubic, see [<xref ref-type="bibr" rid="B23">23</xref>] for a detailed analysis of the complexity and running time of our algorithm.</p><p>The current version of DIALIGN uses an efficient algorithm to update the consistency frontiers. This means that, although performing all pair-wise alignments has a lower theoretical time complexity than processing the fragments from these alignments in the greedy algorithm, for realistic data sets most of the CPU time is spent on the pair-wise alignments. For example, for a set of 20 protein sequences with an average length of 367 amino acid residues, as much as 97.4 % of the CPU time is used to perform the 20 &#x000d7; 19/2 = 190 pair-wise alignments. However, the <italic>relative </italic>proportion of CPU time used for pair-wise alignments <italic>decreases </italic>with the number of input sequences, as can be expected from the above theoretical considerations.</p><p>The pair-wise alignments that are calculated as the first step of the multi-alignment procedure are completely independent of each other. Thus, it is obvious that the total program running time can be crucially reduced by running these procedures on parallel processors. Here, an important point is to distribute the work load evenly to the different processors in order to minimize the total program running time. To this end, our algorithm first estimates the running time for each pair-wise alignment as a function of the sequence length. As outlined in [<xref ref-type="bibr" rid="B22">22</xref>], the running time of DIALIGN for pair-wise alignment is proportional to the product of the sequence lengths. Based on this estimate, the algorithm distributes the <italic>N </italic>&#x000d7; (<italic>N </italic>- 1)/2 pair-wise alignments to the available processors in order to balance the work load. Here, we are using a greedy algorithm to find a satisfactory work-load distribution in reasonable time: we first assign a processor to the pair-wise alignment with the longest expected running time, then assign a processor to the second-largest pairwise alignment etc.</p></sec><sec><title>Alignment of large genomic sequences</title><p>The quadratic time complexity of the original DI ALIGN algorithm for pair-wise alignment is clearly not efficient enough to align large genomic sequences. To improve the running time of DIALIGN for long sequences, an <italic>anchored alignment </italic>procedure has recently been implemented [<xref ref-type="bibr" rid="B18">18</xref>,<xref ref-type="bibr" rid="B24">24</xref>]. For our parallel approach, we use the fast local alignment tool <italic>CHAOS </italic>to identify a <italic>chain </italic>of high-scoring local alignments for each pair of input sequences <ext-link ext-link-type="uri" xlink:href="http://www.stanford.edu/~brudno/chaos/"/>. To select a <italic>consistent </italic>sub-set of these local alignments, a greedy algorithm is used, see [<xref ref-type="bibr" rid="B18">18</xref>] for details.</p><p>CHAOS uses a <italic>trie </italic>data structure to identify pairs of segments with a user-defined upper bound on the number of mismatches per segment pair. It defines a local alignment as a <italic>chain </italic>of such gap-free local alignments that are located within a certain distance from each other. Finally, the algorithm returns an optimal chain of such local alignments. After the consistency check, these alignments are used by our algorithm to define <italic>anchor points </italic>in order to narrow down the search space for the final pair-wise alignment procedure that is performed by DIALIGN as explained in [<xref ref-type="bibr" rid="B18">18</xref>].</p><p>To be precise, an anchor point is a pair of segments, one segment from each of the two input sequences; this way each position in the first segment is assigned to the respective position in the second segment. If a residue <italic>x </italic>is assigned to a residue <italic>y </italic>through one of the anchor points, this means that <italic>x </italic>is the <italic>only </italic>residue that can be aligned with <italic>y </italic>in the final output alignment. Whether or not <italic>x </italic>and <italic>y </italic>will be aligned depends on the degree of local sequence similarity that DIALIGN detects. Moreover, all residues to the left of <italic>x </italic>can be aligned only with residues to the left of <italic>y </italic>and vice versa, see Figure <xref ref-type="fig" rid="F1">1</xref>. The algorithm then returns an optimal alignment, i.e. a chain of fragments with maximum total weight score respecting the constraints imposed by the selected anchor points. Note that, if all anchor points are consistent with the optimal <italic>non-anchored </italic>alignment, then the result of the anchored alignment procedure will necessarily be the same as for the non-anchored procedure. In particular, this is the case if all anchor points are <italic>part </italic>of the optimal non-anchored alignment.</p><p>In the present study, we use selected anchor points as <italic>cutting positions </italic>to split the input sequences into smaller <italic>sub-sequences</italic>, and we reduce the program running time for DIALIGN by aligning these sub-sequences <italic>independently </italic>on multiple processors. This procedure is related to Stoye's well-known <italic>divide-and-conquer </italic>approach to multiple alignment [<xref ref-type="bibr" rid="B25">25</xref>] and to the linear-space algorithm for pair-wise alignment proposed by Hirschberg [<xref ref-type="bibr" rid="B26">26</xref>].</p><p>It should be mentioned that, unlike the above outlined anchoring procedure, distributing sub-alignments to multiple processors may well affect the resulting output alignments, even if the selected cut positions are consistent with the optimal alignment. No matter how well our anchoring positions are chosen, we can generally not expect the optimal alignments of our sub-sequences to coincide with the optimal alignment of the original input sequences The reason for this behaviour is that DIALIGN uses a <italic>non-additive </italic>weighting function <italic>w </italic>for segment pairs (fragments). If a large fragment <italic>f </italic>is split into two smaller sub-fragments <italic>f</italic><sub>1</sub>, <italic>f</italic><sub>2</sub>, the sum <italic>w</italic>(<italic>f</italic><sub>1</sub>) + <italic>w</italic>(<italic>f</italic><sub>2</sub>) is, in general, lower than the original weight <italic>w</italic>(<italic>f</italic>), see [<xref ref-type="bibr" rid="B8">8</xref>]. As demonstrated in Figure <xref ref-type="fig" rid="F1">1</xref>, concatenating alignments of sub-sequences may or may not result in the optimal alignment that would be returned by the naive alignment procedure or by the anchored procedure if anchor points are selected appropriately. Thus, special care has to be taken in selecting appropriate sub-sequences. In particular, the number of splits should not be too high as every split can possibly reduce the quality of the output alignment.</p><p>To reduce the total running time of the alignment procedure as far as possible, our algorithm distributes the sub-sequence alignments evenly to the available processors. At the same time, it minimizes the loss of alignment quality that may be caused by splitting the sequences into too many subsequences. To this end, we first identify a chain of anchor points using CHAOS. The program then divides the sequences at every anchor point, thereby producing a large set S1 of pairs of relatively small sub-sequences. The running time for each of the corresponding sub-alignments is estimated as described above. Using these estimates, the sub-sequences in S1 are concatenated in such a way that a set S2 of larger sub-sequences is obtained that can still be evenly distributed to the available processors. Here again, we use a greedy approach to assign processors to sub-alignments. As a result, our algorithm minimizes the program running time by balancing the work load among the processors while it maximizes the length of the aligned sub-sequences, thereby reducing the possible loss of alignment quality.</p></sec><sec><title>Computer resources</title><p>We decided to use the message-passing interface (MPI) [<xref ref-type="bibr" rid="B27">27</xref>,<xref ref-type="bibr" rid="B28">28</xref>] for our work. Efficient MPI libraries are available for all supercomputing systems, and also for casual workstation pools. The results reported in the next section were achieved by experimental tests made on the Kepler-Cluster [University of T&#x000fc;bingen (SFB-382, <ext-link ext-link-type="uri" xlink:href="http://kepler.sfb382-zdv.uni-tuebingen.de/"/>) that is a Linux-SMP cluster with two Pentium III processors (650 MHz) and 1 GB main memory per node. The nodes are connected by a Myrinet 1.28 GBit/s switched LAN. The software was also compiled and tested on a Sun fire with 8 processors and on an ordinary Linux-based workstation pool that generally exists in every institute.</p></sec></sec><sec><title>Results and conclusion</title><p>The performance of existing multi-alignment software has been evaluated in detail. All programs have been extensively tested by their authors; in addition several independent studies have been carried out using numerous sets of real and artificial benchmark data. The quality of multiple-protein-alignment programs including DIALIGN has been systematically studied by Thompson <italic>at al</italic>. [<xref ref-type="bibr" rid="B29">29</xref>] and by Lassmann and Sonnhammer [<xref ref-type="bibr" rid="B2">2</xref>]. The ability of multi-alignment tools to detect conserved patterns in <italic>genomic </italic>sequences has recently been investigated by Pollard <italic>et al</italic>. [<xref ref-type="bibr" rid="B3">3</xref>]. Since the goal of the present study is to speed-up an <italic>existing </italic>approach, we do not evaluate the <italic>quality </italic>of the produced output alignments; the ability of our software to produce biologically meaningful alignments under various conditions has been evaluated in the above cited papers. Herein, we compare the <italic>running time </italic>of our parallel software to the original serial version of the program.</p><p>As a first test example, we aligned sets of proteins with 20, 55, and 100 sequences, respectively. The program distributed the pair-wise alignments to different processors as described in section. Table <xref ref-type="table" rid="T1">1</xref> shows running time and speed-up for different numbers <italic>p </italic>of processors. Using 64 processors, the running time for these data sets can be reduced by 94.82%, 90.80% and 75.90%, respectively, compared to the serial running time. The observed differences in the relative speed-up are due to the different proportion of CPU time that is spent on the pairwise alignments, see [<xref ref-type="bibr" rid="B23">23</xref>]. The larger this proportion is, the higher is the relative speed-up that can be achieved by running these procedures on parallel processors (Amdahl's law [<xref ref-type="bibr" rid="B30">30</xref>]). Further improvements in program running time should be possible by parallelizing other parts of the algorithm such as fragment sorting and consistency calculations during assembly of the multiple alignment [<xref ref-type="bibr" rid="B23">23</xref>].</p><p>Next, we looked at the improvement of program running time that can be achieved for large genomic sequences using the algorithm described in section. As a test example, we used a set of three syntenic genomic sequences from mouse, rat and human. Each of these sequences is around 1 MB in length. The program CHAOS identified a total of 15,818 anchor points; 4,294 for human/mouse, 4,072 for human/rat and 7,452 for mouse/rat. Most of these anchor points were consistent with each other, only 121 out of the 15,818 anchor points had to be discarded because of consistency problems [<xref ref-type="bibr" rid="B18">18</xref>]. The consistent anchor points led to a set S1 containing 15,700 pairs of sub-sequences with an average length of 214 <italic>bp </italic>(note that, for each sequence pair, a chain of <italic>n </italic>anchor points divides the sequences into <italic>n </italic>+ 1 pairs of sub-sequences). These pairs of subsequences were concatenated to obtain a set S2 of larger sub-sequences that can be evenly distributed to the available processors.</p><p>Using CHAOS anchor points, the serial version of our program took 267,574 s = 74 h 19 m 34 s to compute the multiple alignment of our input sequences on a single processor of our cluster. We estimate that, without the anchoring option, the original DIALIGN program would have taken around three weeks to align these sequences. By contrast, the parallel version of the program with 64 processors took only 6,583 s = 1 h 49 m 43 s to align the same sequence set, corresponding to a running time improvement by 97.5 %. With a speed-up from more than three days to less than two hours, DIALIGN can now compute long-range multiple alignments of genomic sequences that were, until recently, far beyond its scope.</p></sec><sec><title>Availability</title><p>The program will be available online through <italic>G&#x000f6;ttingen Bioinformatics Compute Server (GO-BICS) </italic>at <ext-link ext-link-type="uri" xlink:href="http://www.gobics.de"/>. The program code is available on request.</p></sec><sec><title>Authors' contributions</title><p>MS parallelized DIALIGN, installed it on the Kepler cluster, performed the test runs and wrote parts of the manuscript. KN and MK participated in the design of the project and manuscript preparation. BM supervised the project and wrote most of the manuscript. All authors read and approved the final manuscript.</p></sec></body><back><ack><sec><title>Acknowledgements</title><p>We would like to thank Michael Brudno for his help with CHAOS and Rasmus Steinkamp for installing our software at GOBICS. The work was partly supported by DFG grant MO 1048l1-1 to BM.</p></sec></ack><ref-list><ref id="B1"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Notredame</surname><given-names>C</given-names></name></person-group><article-title>Recent progress in multiple sequence alignment: a survey</article-title><source>Pharmacogenomics</source><year>2002</year><volume>3</volume><fpage>131</fpage><lpage>144</lpage><pub-id pub-id-type="pmid">11966409</pub-id></citation></ref><ref id="B2"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Lassmann</surname><given-names>T</given-names></name><name><surname>Sonnhammer</surname><given-names>EL</given-names></name></person-group><article-title>Quality assessment of multiple alignment programs</article-title><source>FEBS Letters</source><year>2002</year><volume>529</volume><fpage>126</fpage><lpage>130</lpage><pub-id pub-id-type="pmid">12354624</pub-id><pub-id pub-id-type="doi">10.1016/S0014-5793(02)03189-7</pub-id></citation></ref><ref id="B3"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Pollard</surname><given-names>DA</given-names></name><name><surname>Bergman</surname><given-names>CM</given-names></name><name><surname>Stoye</surname><given-names>J</given-names></name><name><surname>Celniker</surname><given-names>SE</given-names></name><name><surname>Eisen</surname><given-names>MB</given-names></name></person-group><article-title>Benchmarking tools for the alignment of functional noncoding DNA</article-title><source>BMC Bioinformatics</source><year>2004</year><volume>5</volume><fpage>6</fpage><ext-link ext-link-type="uri" xlink:href="http://www.biomedcentral.com/1471-2105/5/6"/><pub-id pub-id-type="pmid">14736341</pub-id><pub-id pub-id-type="doi">10.1186/1471-2105-5-6</pub-id></citation></ref><ref id="B4"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Chain</surname><given-names>P</given-names></name><name><surname>Kurtz</surname><given-names>S</given-names></name><name><surname>Ohlebusch</surname><given-names>E</given-names></name><name><surname>Slezak</surname><given-names>T</given-names></name></person-group><article-title>An applications-focused review of comparative genomics tools: capabilities, limitations, and future challenges</article-title><source>Briefings in Bioinformatics</source><year>2003</year><volume>4</volume><fpage>105</fpage><lpage>123</lpage><pub-id pub-id-type="pmid">12846393</pub-id></citation></ref><ref id="B5"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Miller</surname><given-names>W</given-names></name></person-group><article-title>Comparison of genomic DNA sequences: solved and unsolved problems</article-title><source>Bioinformatics</source><year>2001</year><volume>17</volume><fpage>391</fpage><lpage>397</lpage><pub-id pub-id-type="pmid">11331233</pub-id><pub-id pub-id-type="doi">10.1093/bioinformatics/17.5.391</pub-id></citation></ref><ref id="B6"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Salzberg</surname><given-names>SL</given-names></name><name><surname>Delcher</surname><given-names>AL</given-names></name><name><surname>Kasif</surname><given-names>S</given-names></name><name><surname>White</surname><given-names>O</given-names></name></person-group><article-title>Microbial gene identification using interpolated Markov models</article-title><source>Nucleic Acids Research</source><year>1998</year><volume>26</volume><fpage>544</fpage><lpage>548</lpage><pub-id pub-id-type="pmid">9421513</pub-id><pub-id pub-id-type="doi">10.1093/nar/26.2.544</pub-id></citation></ref><ref id="B7"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Hohl</surname><given-names>M</given-names></name><name><surname>Kurtz</surname><given-names>S</given-names></name><name><surname>Ohlebusch</surname><given-names>E</given-names></name></person-group><article-title>Efficient multiple genome alignment</article-title><source>Bioinformatics</source><year>2002</year><volume>18 Suppl 1</volume><fpage>S312</fpage><lpage>S320</lpage><pub-id pub-id-type="pmid">12169561</pub-id></citation></ref><ref id="B8"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Morgenstern</surname><given-names>B</given-names></name></person-group><article-title>DIALIGN 2: improvement of the segment-to-segment approach to multiple sequence alignment</article-title><source>Bioinformatics</source><year>1999</year><volume>15</volume><fpage>211</fpage><lpage>218</lpage><pub-id pub-id-type="pmid">10222408</pub-id><pub-id pub-id-type="doi">10.1093/bioinformatics/15.3.211</pub-id></citation></ref><ref id="B9"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Morgenstern</surname><given-names>B</given-names></name><name><surname>Rinner</surname><given-names>O</given-names></name><name><surname>Abdedda&#x000ef;m</surname><given-names>S</given-names></name><name><surname>Haase</surname><given-names>D</given-names></name><name><surname>Mayer</surname><given-names>K</given-names></name><name><surname>Dress</surname><given-names>A</given-names></name><name><surname>Mewes</surname><given-names>HW</given-names></name></person-group><article-title>Exon Discovery by Genomic Sequence Alignment</article-title><source>Bioinformatics</source><year>2002</year><volume>18</volume><fpage>777</fpage><lpage>787</lpage><pub-id pub-id-type="pmid">12075013</pub-id><pub-id pub-id-type="doi">10.1093/bioinformatics/18.6.777</pub-id></citation></ref><ref id="B10"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>G&#x000f6;ttgens</surname><given-names>B</given-names></name><name><surname>Barton</surname><given-names>L</given-names></name><name><surname>Gilbert</surname><given-names>J</given-names></name><name><surname>Bench</surname><given-names>A</given-names></name><name><surname>Sanchez</surname><given-names>M</given-names></name><name><surname>Bahn</surname><given-names>S</given-names></name><name><surname>Mistry</surname><given-names>S</given-names></name><name><surname>Grafham</surname><given-names>D</given-names></name><name><surname>McMurray</surname><given-names>A</given-names></name><name><surname>Vaudin</surname><given-names>M</given-names></name><name><surname>Amaya</surname><given-names>E</given-names></name><name><surname>Bentley</surname><given-names>D</given-names></name><name><surname>Green</surname><given-names>A</given-names></name></person-group><article-title>Analysis of vertebrate SCL loci identifies conserved enhancers</article-title><source>Nature Biotechnology</source><year>2000</year><volume>18</volume><fpage>181</fpage><lpage>186</lpage><pub-id pub-id-type="pmid">10657125</pub-id><pub-id pub-id-type="doi">10.1038/72635</pub-id></citation></ref><ref id="B11"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>G&#x000f6;ttgens</surname><given-names>B</given-names></name><name><surname>Gilbert</surname><given-names>J</given-names></name><name><surname>Barton</surname><given-names>L</given-names></name><name><surname>Grafham</surname><given-names>D</given-names></name><name><surname>Rogers</surname><given-names>J</given-names></name><name><surname>Bentley</surname><given-names>D</given-names></name><name><surname>Green</surname><given-names>A</given-names></name></person-group><article-title>Long-range comparison of human and mouse SCL loci: localized regions of sensitivity to restriction endonucleases correspond precisely with peaks of conserved noncoding sequences</article-title><source>Genome Res</source><year>2001</year><volume>11</volume><fpage>87</fpage><lpage>97</lpage><pub-id pub-id-type="pmid">11156618</pub-id><pub-id pub-id-type="doi">10.1101/gr.153001</pub-id></citation></ref><ref id="B12"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>G&#x000f6;ttgens</surname><given-names>B</given-names></name><name><surname>Barton</surname><given-names>L</given-names></name><name><surname>Chapman</surname><given-names>M</given-names></name><name><surname>Sinclair</surname><given-names>A</given-names></name><name><surname>Knudsen</surname><given-names>B</given-names></name><name><surname>Grafham</surname><given-names>D</given-names></name><name><surname>Gilbert</surname><given-names>J</given-names></name><name><surname>Rogers</surname><given-names>J</given-names></name><name><surname>Bentley</surname><given-names>D</given-names></name><name><surname>Green</surname><given-names>A</given-names></name></person-group><article-title>Transcriptional regulation of the Stem Cell Leukemia gene (SCL) Comparative analysis of five vertebrate SCL loci</article-title><source>Genome Res</source><year>2002</year><volume>12</volume><fpage>749</fpage><lpage>759</lpage><pub-id pub-id-type="pmid">11997341</pub-id><pub-id pub-id-type="doi">10.1101/gr.45502</pub-id></citation></ref><ref id="B13"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Guo</surname><given-names>H</given-names></name><name><surname>Moose</surname><given-names>SP</given-names></name></person-group><article-title>Conserved noncoding sequences among cultivated cereal genomes identify candidate regulatory sequence elements and patterns of promoter evolution</article-title><source>Plant Cell</source><year>2003</year><volume>15</volume><fpage>1143</fpage><lpage>1158</lpage><pub-id pub-id-type="pmid">12724540</pub-id><pub-id pub-id-type="doi">10.1105/tpc.010181</pub-id></citation></ref><ref id="B14"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Chapman</surname><given-names>MA</given-names></name><name><surname>Charchar</surname><given-names>FJ</given-names></name><name><surname>Kinston</surname><given-names>S</given-names></name><name><surname>Bird</surname><given-names>CP</given-names></name><name><surname>Grafham</surname><given-names>D</given-names></name><name><surname>Rogers</surname><given-names>J</given-names></name><name><surname>Gr&#x000fc;tzner</surname><given-names>F</given-names></name><name><surname>Graves</surname><given-names>JAM</given-names></name><name><surname>Green</surname><given-names>AR</given-names></name><name><surname>G&#x000f6;ttgens</surname><given-names>B</given-names></name></person-group><article-title>Comparative and functional analysis of LYL1 loci establish marsupial sequences as a model for phylogenetic footprinting</article-title><source>Genomics</source><year>2003</year><volume>81</volume><fpage>249</fpage><lpage>259</lpage><pub-id pub-id-type="pmid">12659809</pub-id><pub-id pub-id-type="doi">10.1016/S0888-7543(03)00005-3</pub-id></citation></ref><ref id="B15"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Prohaska</surname><given-names>S</given-names></name><name><surname>Fried</surname><given-names>C</given-names></name><name><surname>Flamm</surname><given-names>C</given-names></name><name><surname>Wagner</surname><given-names>GP</given-names></name><name><surname>Stadler</surname><given-names>PF</given-names></name></person-group><article-title>Surveying Phylogenetic Footprints in Large Gene Clusters: Applications to Hox Cluster Duplications</article-title><source>Mol Evol Phylog</source><year>2004</year><volume>31</volume><fpage>581</fpage><lpage>604</lpage><pub-id pub-id-type="doi">10.1016/j.ympev.2003.08.009</pub-id></citation></ref><ref id="B16"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Fried</surname><given-names>C</given-names></name><name><surname>Prohaska</surname><given-names>S</given-names></name><name><surname>Stadler</surname><given-names>P</given-names></name></person-group><article-title>Independent Hox-cluster duplications in lampreys</article-title><source>J EXP ZOOL PART B</source><year>2003</year><volume>299B</volume><fpage>18</fpage><lpage>25</lpage><pub-id pub-id-type="doi">10.1002/jez.b.37</pub-id></citation></ref><ref id="B17"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Fitch</surname><given-names>J</given-names></name><name><surname>Gardner</surname><given-names>S</given-names></name><name><surname>Kuczmarski</surname><given-names>T</given-names></name><name><surname>Kurtz</surname><given-names>S</given-names></name><name><surname>Myers</surname><given-names>R</given-names></name><name><surname>Ott</surname><given-names>L</given-names></name><name><surname>Slezak</surname><given-names>T</given-names></name><name><surname>Vitalis</surname><given-names>E</given-names></name><name><surname>Zemla</surname><given-names>A</given-names></name><name><surname>McCready</surname><given-names>P</given-names></name></person-group><article-title>Rapid Development of Nucleic Acid Diagnostics</article-title><source>Proceedings of the IEEE</source><year>2002</year><volume>90</volume><fpage>1708</fpage><lpage>1721</lpage><pub-id pub-id-type="doi">10.1109/JPROC.2002.804680</pub-id></citation></ref><ref id="B18"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Brudno</surname><given-names>M</given-names></name><name><surname>Chapman</surname><given-names>M</given-names></name><name><surname>G&#x000f6;ttgens</surname><given-names>B</given-names></name><name><surname>Batzoglou</surname><given-names>S</given-names></name><name><surname>Morgenstern</surname><given-names>B</given-names></name></person-group><article-title>Fast and sensitive multiple alignment of large genomic sequences</article-title><source>BMC Bioinformatics</source><year>2003</year><volume>4</volume><fpage>66</fpage><ext-link ext-link-type="uri" xlink:href="http://www.biomedcentral.com/1471-2105/4/66"/><pub-id pub-id-type="pmid">14693042</pub-id><pub-id pub-id-type="doi">10.1186/1471-2105-4-66</pub-id></citation></ref><ref id="B19"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Yap</surname><given-names>TK</given-names></name><name><surname>Frieder</surname><given-names>O</given-names></name><name><surname>Martino</surname><given-names>RL</given-names></name></person-group><article-title>Parallel Computation in biological sequence analysis</article-title><source>IEEE Transactions on Parallel and Distributed Systems</source><year>1998</year><volume>9</volume><fpage>283</fpage><lpage>294</lpage><pub-id pub-id-type="doi">10.1109/71.674320</pub-id></citation></ref><ref id="B20"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Kleinjung</surname><given-names>J</given-names></name><name><surname>Douglas</surname><given-names>N</given-names></name><name><surname>Heringa</surname><given-names>J</given-names></name></person-group><article-title>Parallelized multiple alignment</article-title><source>Bioinformatics</source><year>2002</year><volume>18</volume><fpage>1270</fpage><lpage>1271</lpage><pub-id pub-id-type="pmid">12217922</pub-id><pub-id pub-id-type="doi">10.1093/bioinformatics/18.9.1270</pub-id></citation></ref><ref id="B21"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Li</surname><given-names>KB</given-names></name></person-group><article-title>ClustalW-MPI: ClustalW analysis using distributed and parallel computing</article-title><source>Bioinformatics</source><year>2003</year><volume>19</volume><fpage>1585</fpage><lpage>1586</lpage><pub-id pub-id-type="pmid">12912844</pub-id><pub-id pub-id-type="doi">10.1093/bioinformatics/btg192</pub-id></citation></ref><ref id="B22"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Morgenstern</surname><given-names>B</given-names></name></person-group><article-title>A simple and space-efficient fragment-chaining algorithm for alignment of DNA and protein sequences</article-title><source>Applied Mathematics Letters</source><year>2002</year><volume>15</volume><fpage>11</fpage><lpage>16</lpage><pub-id pub-id-type="doi">10.1016/S0893-9659(01)00085-4</pub-id></citation></ref><ref id="B23"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Abdedda&#x000ef;m</surname><given-names>S</given-names></name><name><surname>Morgenstern</surname><given-names>B</given-names></name></person-group><article-title>Speeding up the DIALIGN multiple alignment program by using the 'Greedy Alignment of BIOlogical Sequences LIBrary' (GABIOS-LIB)</article-title><source>Lecture Notes in Computer Science</source><year>2001</year><volume>2066</volume><fpage>1</fpage><lpage>11</lpage></citation></ref><ref id="B24"><citation citation-type="other"><person-group person-group-type="author"><name><surname>Morgenstern</surname><given-names>B</given-names></name><name><surname>Prohaska</surname><given-names>SJ</given-names></name><name><surname>Werner</surname><given-names>N</given-names></name><name><surname>Weyer-Menkhoff</surname><given-names>J</given-names></name><name><surname>Schneider</surname><given-names>I</given-names></name><name><surname>Subramanian</surname><given-names>AR</given-names></name><name><surname>Stadler</surname><given-names>PF</given-names></name></person-group><article-title>Multiple sequence alignment with user-defined constraints</article-title><source>In Proceedings GCB'04, Lecture Notes in Informatics</source><comment>P-53, 25-36</comment></citation></ref><ref id="B25"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Stoye</surname><given-names>J</given-names></name></person-group><article-title>Multiple sequence alignment with the divide-and-conquer method</article-title><source>Gene</source><year>1998</year><volume>211</volume><fpage>GC45</fpage><lpage>GC56</lpage><pub-id pub-id-type="pmid">9669886</pub-id><pub-id pub-id-type="doi">10.1016/S0378-1119(98)00097-3</pub-id></citation></ref><ref id="B26"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Hirschberg</surname><given-names>DS</given-names></name></person-group><article-title>A linear space algorithm for computing maximal common subsequences</article-title><source>Commun ACM</source><year>1975</year><volume>18</volume><fpage>314</fpage><lpage>343</lpage><pub-id pub-id-type="doi">10.1145/360825.360861</pub-id></citation></ref><ref id="B27"><citation citation-type="other"><person-group person-group-type="author"><collab>Message Passing Interface Forum</collab></person-group><article-title>MPI: A Message-Passing Interface Standard</article-title><source>Tech Rep CS-94-230, Computer Science Department, University of Tennessee, Knoxville, TN</source><year>1994</year></citation></ref><ref id="B28"><citation citation-type="other"><person-group person-group-type="author"><collab>Message Passing Interface Forum</collab></person-group><article-title>MPI-2: Extensions to the Message-Passing Interface</article-title><source>Tech rep, Computer Science Department, University of Tennessee, Knoxville, TN</source><year>1997</year></citation></ref><ref id="B29"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Thompson</surname><given-names>JD</given-names></name><name><surname>Plewniak</surname><given-names>F</given-names></name><name><surname>Poch</surname><given-names>O</given-names></name></person-group><article-title>A comprehensive comparison of protein sequence alignment programs</article-title><source>Nucleic Acids Research</source><year>1999</year><volume>27</volume><fpage>2682</fpage><lpage>2690</lpage><pub-id pub-id-type="pmid">10373585</pub-id><pub-id pub-id-type="doi">10.1093/nar/27.13.2682</pub-id></citation></ref><ref id="B30"><citation citation-type="book"><person-group person-group-type="author"><name><surname>Amdahl</surname><given-names>GM</given-names></name></person-group><article-title>Validity of the single processor approach to achieve large-scale computing capabilities</article-title><source>In AFIPS Conference Proceedings 30</source><year>1967</year><publisher-name>AFIPS Press</publisher-name><fpage>483</fpage></citation></ref></ref-list><sec sec-type="display-objects"><title>Figures and Tables</title><fig position="float" id="F1"><label>Figure 1</label><caption><p><bold>Anchored alignment and parallel computation of sub-alignments for pair-wise sequence comparison. </bold>(<italic>a</italic>) Un-constrained alignment: an optimal chain of fragments <italic>f</italic><sub>1</sub>, <italic>f</italic><sub>2</sub>, <italic>f</italic><sub>3 </sub>is identified in the comparison matrix spanned by input sequences <italic>S</italic><sub>1 </sub>and <italic>S</italic><sub>2</sub>. (<italic>b</italic>) Anchored alignment: an anchor point (<italic>A</italic><sub>1</sub>, <italic>A</italic><sub>2</sub>) is defined prior to the alignment procedure, and an optimal chain of fragments is searched under the constraints imposed by this anchor. That is, residues to the left of <italic>A</italic><sub>1 </sub>can be aligned only to residues to the left of <italic>A</italic><sub>2 </sub>and vice versa, so the alignment search space is reduced by a factor of 2. If anchor point (<italic>A</italic><sub>1</sub>, <italic>A</italic><sub>2</sub>) is <italic>consistent </italic>with the optimal un-constrained alignment as shown in (<italic>a</italic>), the constraints imposed by this anchor point do not affect the resulting alignment, so exactly the same fragment chain <italic>f</italic><sub>1</sub>, <italic>f</italic><sub>2</sub>, <italic>f</italic><sub>3 </sub>is obtained. (<italic>c</italic>) In the <italic>parallel </italic>aligment procedure, sequence <italic>S</italic><sub>1 </sub>and <italic>S</italic><sub>2 </sub>are split into sub-sequences <inline-graphic xlink:href="1471-2105-5-128-i1.gif"/>, <inline-graphic xlink:href="1471-2105-5-128-i2.gif"/> and <inline-graphic xlink:href="1471-2105-5-128-i3.gif"/>, <inline-graphic xlink:href="1471-2105-5-128-i4.gif"/>, respectively, where the anchor point (<italic>A</italic><sub>1</sub>, <italic>A</italic><sub>2</sub>) defines the exact cutting-position. Alignments of <inline-graphic xlink:href="1471-2105-5-128-i1.gif"/> and <inline-graphic xlink:href="1471-2105-5-128-i3.gif"/> and of <inline-graphic xlink:href="1471-2105-5-128-i2.gif"/> and <inline-graphic xlink:href="1471-2105-5-128-i4.gif"/> are calculated independently, and concatenated to obtain an output alignment of <italic>S</italic><sub>1 </sub>and <italic>S</italic><sub>2</sub>. In (<italic>c</italic>), the obtimal sub-alignments involve fragments <inline-graphic xlink:href="1471-2105-5-128-i5.gif"/> and <inline-graphic xlink:href="1471-2105-5-128-i6.gif"/> which are sub-fragments of <italic>f</italic><sub>2 </sub>contained in the un-constrained alignment. In this case, the resulting final alignment of sequences <italic>S</italic><sub>1 </sub>and <italic>S</italic><sub>2 </sub>is therefore the same as the un-constrained one in example (<italic>a</italic>). Note, however, that the scoring function <italic>w </italic>for fragments is <italic>not additive </italic>and we may have, for example, <inline-graphic xlink:href="1471-2105-5-128-i7.gif"/>. Therefore, even if anchor point (<italic>A</italic><sub>1</sub>, <italic>A</italic><sub>2</sub>) is consistent with the optimal un-constrained alignment, there is no guarantee that concatenating optimal sub-alignments yields the same alignment as the un-constrained alignment of the input sequences <italic>S</italic><sub>1 </sub>and <italic>S</italic><sub>2</sub>. The algorithm may end up with a situation as shown in example (<italic>d</italic>) where the parallel alignment procedure leads to a different output alignment.</p></caption><graphic xlink:href="1471-2105-5-128-1"/></fig><table-wrap position="float" id="T1"><label>Table 1</label><caption><p>Test results for three data sets using different numbers of processors <italic>p </italic>Running time of the parallelized version of DIALIGN on protein sequences (average length: 381 residues) using different numbers <italic>p </italic>of processors. The values for <italic>p </italic>= 1 are measured with DIALIGN, the others with ParDIALIGN. All running times in the table are the fastest achieved values of several runs. The speed-up value is defined as the time needed for <italic>p </italic>= 1 divided by the time for ParDIALIGN. The percentages show the reduction of the time with respect to the sequential version of DIALIGN.</p></caption><table frame="hsides" rules="groups"><thead><tr><td></td><td align="center" colspan="2">20 sequences</td><td align="center" colspan="2">55 sequences</td><td align="center" colspan="2">100 sequences</td></tr></thead><tbody><tr><td align="center"><italic>p</italic></td><td align="center">time (sec)</td><td align="center">speed-up</td><td align="center">time (sec)</td><td align="center">speed-up</td><td align="center">time (sec)</td><td align="center">speed-up</td></tr><tr><td colspan="7"><hr></hr></td></tr><tr><td align="center">1</td><td align="center">37.69</td><td align="center">-</td><td align="center">334.17</td><td align="center">-</td><td align="center">1283.80</td><td align="center">-</td></tr><tr><td align="center">4</td><td align="center">10.40</td><td align="center">3.62 (72.41%)</td><td align="center">104.61</td><td align="center">3.19 (68.70%)</td><td align="center">552.68</td><td align="center">2.32 (56.95%)</td></tr><tr><td align="center">8</td><td align="center">5.93</td><td align="center">6.36 (84.27%)</td><td align="center">65.69</td><td align="center">5.09 (80.34%)</td><td align="center">421.69</td><td align="center">3.04 (67.15%)</td></tr><tr><td align="center">16</td><td align="center">3.57</td><td align="center">10.56 (90.53%)</td><td align="center">46.25</td><td align="center">7.23 (86.16%)</td><td align="center">359.50</td><td align="center">3.57 (72.00%)</td></tr><tr><td align="center">32</td><td align="center">2.65</td><td align="center">14.22 (92.97%)</td><td align="center">36.92</td><td align="center">9.05 (88.95%)</td><td align="center">332.22</td><td align="center">3.86 (74.12%)</td></tr><tr><td align="center">64</td><td align="center">1.95</td><td align="center">19.32 (94.82%)</td><td align="center">30.74</td><td align="center">10.87 (90.80%)</td><td align="center">309.43</td><td align="center">4.15 (75.90%)</td></tr></tbody></table></table-wrap></sec></back></article>



